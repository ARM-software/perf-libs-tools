float  cblas_sdot( MKL_INT N,  float  *X,  MKL_INT incX,                   float  *Y,  MKL_INT incY)
float  cblas_sdoti( MKL_INT N,  float *X,  MKL_INT *indx,                    float *Y)
double cblas_ddot( MKL_INT N,  double *X,  MKL_INT incX,                   double *Y,  MKL_INT incY)
double cblas_ddoti( MKL_INT N,  double *X,  MKL_INT *indx,                    double *Y)
double cblas_dsdot( MKL_INT N,  float  *X,  MKL_INT incX,                   float  *Y,  MKL_INT incY)
float  cblas_sdsdot( MKL_INT N,  float sb,  float  *X,		     MKL_INT incX,  float  *Y,  MKL_INT incY)
void   cblas_cdotu_sub( MKL_INT N,  armpl_singlecomplex_t *X,  MKL_INT incX,                        armpl_singlecomplex_t *Y,  MKL_INT incY, armpl_singlecomplex_t *dotu)
void   cblas_cdotui_sub( MKL_INT N,  armpl_singlecomplex_t *X,  MKL_INT *indx,                         armpl_singlecomplex_t *Y, armpl_singlecomplex_t *dotui)
void   cblas_cdotc_sub( MKL_INT N,  armpl_singlecomplex_t *X,  MKL_INT incX,                        armpl_singlecomplex_t *Y,  MKL_INT incY, armpl_singlecomplex_t *dotc)
void   cblas_cdotci_sub( MKL_INT N,  armpl_singlecomplex_t *X,  MKL_INT *indx,                         armpl_singlecomplex_t *Y, armpl_singlecomplex_t *dotui)
void   cblas_zdotu_sub( MKL_INT N,  armpl_doublecomplex_t *X,  MKL_INT incX,                        armpl_doublecomplex_t *Y,  MKL_INT incY, armpl_doublecomplex_t *dotu)
void   cblas_zdotui_sub( MKL_INT N,  armpl_doublecomplex_t *X,  MKL_INT *indx,                         armpl_doublecomplex_t *Y, armpl_doublecomplex_t *dotui)
void   cblas_zdotc_sub( MKL_INT N,  armpl_doublecomplex_t *X,  MKL_INT incX,                        armpl_doublecomplex_t *Y,  MKL_INT incY, armpl_doublecomplex_t *dotc)
void   cblas_zdotci_sub( MKL_INT N,  armpl_doublecomplex_t *X,  MKL_INT *indx,                         armpl_doublecomplex_t *Y, armpl_doublecomplex_t *dotui)
float  cblas_snrm2( MKL_INT N,  float *X,  MKL_INT incX)
float  cblas_sasum( MKL_INT N,  float *X,  MKL_INT incX)
double cblas_dnrm2( MKL_INT N,  double *X,  MKL_INT incX)
double cblas_dasum( MKL_INT N,  double *X,  MKL_INT incX)
void cblas_sswap( MKL_INT N, float *X,  MKL_INT incX,                 float *Y,  MKL_INT incY)
void cblas_scopy( MKL_INT N,  float *X,  MKL_INT incX,                 float *Y,  MKL_INT incY)
void cblas_saxpy( MKL_INT N,  float alpha,  float *X,                  MKL_INT incX, float *Y,  MKL_INT incY)
void cblas_saxpby( MKL_INT N,  float alpha,  float *X,                  MKL_INT incX,  float beta, float *Y,  MKL_INT incY)
void cblas_saxpyi( MKL_INT N,  float alpha,  float *X,                  MKL_INT *indx, float *Y)
void cblas_sgthr( MKL_INT N,  float *Y, float *X,                                  MKL_INT *indx)
void cblas_sgthrz( MKL_INT N, float *Y, float *X,                                  MKL_INT *indx)
void cblas_ssctr( MKL_INT N,  float *X,  MKL_INT *indx,                                 float *Y)
void cblas_srotg(float *a, float *b, float *c, float *s)
void cblas_dswap( MKL_INT N, double *X,  MKL_INT incX,                 double *Y,  MKL_INT incY)
void cblas_dcopy( MKL_INT N,  double *X,  MKL_INT incX,                 double *Y,  MKL_INT incY)
void cblas_daxpy( MKL_INT N,  double alpha,  double *X,                  MKL_INT incX, double *Y,  MKL_INT incY)
void cblas_daxpby( MKL_INT N,  double alpha,  double *X,                  MKL_INT incX,  double beta, double *Y,  MKL_INT incY)
void cblas_daxpyi( MKL_INT N,  double alpha,  double *X,                  MKL_INT *indx, double *Y)
void cblas_dgthr( MKL_INT N,  double *Y, double *X,                                  MKL_INT *indx)
void cblas_dgthrz( MKL_INT N, double *Y, double *X,                                  MKL_INT *indx)
void cblas_dsctr( MKL_INT N,  double *X,  MKL_INT *indx,                                 double *Y)
void cblas_drotg(double *a, double *b, double *c, double *s)
void cblas_cswap( MKL_INT N, armpl_singlecomplex_t *X,  MKL_INT incX,                 armpl_singlecomplex_t *Y,  MKL_INT incY)
void cblas_ccopy( MKL_INT N,  armpl_singlecomplex_t *X,  MKL_INT incX,                 armpl_singlecomplex_t *Y,  MKL_INT incY)
void cblas_caxpy( MKL_INT N,  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *X,                  MKL_INT incX, armpl_singlecomplex_t *Y,  MKL_INT incY)
void cblas_caxpby( MKL_INT N,  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *X,                  MKL_INT incX,  armpl_singlecomplex_t *beta, armpl_singlecomplex_t *Y,  MKL_INT incY)
void cblas_caxpyi( MKL_INT N,  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *X,                  MKL_INT *indx, armpl_singlecomplex_t *Y)
void cblas_cgthr( MKL_INT N,  armpl_singlecomplex_t *Y, armpl_singlecomplex_t *X,                                  MKL_INT *indx)
void cblas_cgthrz( MKL_INT N, armpl_singlecomplex_t *Y, armpl_singlecomplex_t *X,                                  MKL_INT *indx)
void cblas_csctr( MKL_INT N,  armpl_singlecomplex_t *X,  MKL_INT *indx,                                 armpl_singlecomplex_t *Y)
void cblas_crotg(armpl_singlecomplex_t *a,  armpl_singlecomplex_t *b, float *c, armpl_singlecomplex_t *s)
void cblas_zswap( MKL_INT N, armpl_doublecomplex_t *X,  MKL_INT incX,                 armpl_doublecomplex_t *Y,  MKL_INT incY)
void cblas_zcopy( MKL_INT N,  armpl_doublecomplex_t *X,  MKL_INT incX,                 armpl_doublecomplex_t *Y,  MKL_INT incY)
void cblas_zaxpy( MKL_INT N,  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *X,                  MKL_INT incX, armpl_doublecomplex_t *Y,  MKL_INT incY)
void cblas_zaxpby( MKL_INT N,  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *X,                  MKL_INT incX,  armpl_doublecomplex_t *beta, armpl_doublecomplex_t *Y,  MKL_INT incY)
void cblas_zaxpyi( MKL_INT N,  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *X,                  MKL_INT *indx, armpl_doublecomplex_t *Y)
void cblas_zgthr( MKL_INT N,  armpl_doublecomplex_t *Y, armpl_doublecomplex_t *X,                                  MKL_INT *indx)
void cblas_zgthrz( MKL_INT N, armpl_doublecomplex_t *Y, armpl_doublecomplex_t *X,                                  MKL_INT *indx)
void cblas_zsctr( MKL_INT N,  armpl_doublecomplex_t *X,  MKL_INT *indx,                                 armpl_doublecomplex_t *Y)
void cblas_zrotg(armpl_doublecomplex_t *a,  armpl_doublecomplex_t *b, double *c, armpl_doublecomplex_t *s)
void cblas_srotmg(float *d1, float *d2, float *b1,  float b2, float *P)
void cblas_srot( MKL_INT N, float *X,  MKL_INT incX,                float *Y,  MKL_INT incY,  float c,  float s)
void cblas_sroti( MKL_INT N, float *X,  MKL_INT *indx,                float *Y,  float c,  float s)
void cblas_srotm( MKL_INT N, float *X,  MKL_INT incX,                float *Y,  MKL_INT incY,  float *P)
void cblas_drotmg(double *d1, double *d2, double *b1,  double b2, double *P)
void cblas_drot( MKL_INT N, double *X,  MKL_INT incX,                double *Y,  MKL_INT incY,  double c,  double  s)
void cblas_drotm( MKL_INT N, double *X,  MKL_INT incX,                double *Y,  MKL_INT incY,  double *P)
void cblas_droti( MKL_INT N, double *X,  MKL_INT *indx,                double *Y,  double c,  double s)
void cblas_csrot( MKL_INT N, armpl_singlecomplex_t *X,  MKL_INT incX,                 armpl_singlecomplex_t *Y,  MKL_INT incY,  float c,  float s)
void cblas_zdrot( MKL_INT N, armpl_doublecomplex_t *X,  MKL_INT incX,                 armpl_doublecomplex_t *Y,  MKL_INT incY,  double c,  double  s)
void cblas_sscal( MKL_INT N,  float alpha, float *X,  MKL_INT incX)
void cblas_dscal( MKL_INT N,  double alpha, double *X,  MKL_INT incX)
void cblas_cscal( MKL_INT N,  armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *X,  MKL_INT incX)
void cblas_zscal( MKL_INT N,  armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *X,  MKL_INT incX)
void cblas_csscal( MKL_INT N,  float alpha, armpl_singlecomplex_t *X,  MKL_INT incX)
void cblas_zdscal( MKL_INT N,  double alpha, armpl_doublecomplex_t *X,  MKL_INT incX)
void cblas_sgemv(  CBLAS_LAYOUT Layout,                   CBLAS_TRANSPOSE TransA,  MKL_INT M,  MKL_INT N,                  float alpha,  float *A,  MKL_INT lda,                  float *X,  MKL_INT incX,  float beta,                 float *Y,  MKL_INT incY)
void cblas_sgbmv(  CBLAS_LAYOUT Layout,                   CBLAS_TRANSPOSE TransA,  MKL_INT M,  MKL_INT N,                  MKL_INT KL,  MKL_INT KU,  float alpha,                  float *A,  MKL_INT lda,  float *X,                  MKL_INT incX,  float beta, float *Y,  MKL_INT incY)
void cblas_strmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  float *A,  MKL_INT lda,                 float *X,  MKL_INT incX)
void cblas_stbmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  MKL_INT K,  float *A,  MKL_INT lda,                 float *X,  MKL_INT incX)
void cblas_stpmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  float *Ap, float *X,  MKL_INT incX)
void cblas_strsv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  float *A,  MKL_INT lda, float *X,                  MKL_INT incX)
void cblas_stbsv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  MKL_INT K,  float *A,  MKL_INT lda,                 float *X,  MKL_INT incX)
void cblas_stpsv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  float *Ap, float *X,  MKL_INT incX)
void cblas_dgemv(  CBLAS_LAYOUT Layout,                   CBLAS_TRANSPOSE TransA,  MKL_INT M,  MKL_INT N,                  double alpha,  double *A,  MKL_INT lda,                  double *X,  MKL_INT incX,  double beta,                 double *Y,  MKL_INT incY)
void cblas_dgbmv(  CBLAS_LAYOUT Layout,                   CBLAS_TRANSPOSE TransA,  MKL_INT M,  MKL_INT N,                  MKL_INT KL,  MKL_INT KU,  double alpha,                  double *A,  MKL_INT lda,  double *X,                  MKL_INT incX,  double beta, double *Y,  MKL_INT incY)
void cblas_dtrmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  double *A,  MKL_INT lda,                 double *X,  MKL_INT incX)
void cblas_dtbmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  MKL_INT K,  double *A,  MKL_INT lda,                 double *X,  MKL_INT incX)
void cblas_dtpmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  double *Ap, double *X,  MKL_INT incX)
void cblas_dtrsv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  double *A,  MKL_INT lda, double *X,                  MKL_INT incX)
void cblas_dtbsv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  MKL_INT K,  double *A,  MKL_INT lda,                 double *X,  MKL_INT incX)
void cblas_dtpsv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  double *Ap, double *X,  MKL_INT incX)
void cblas_cgemv(  CBLAS_LAYOUT Layout,                   CBLAS_TRANSPOSE TransA,  MKL_INT M,  MKL_INT N,                  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *A,  MKL_INT lda,                  armpl_singlecomplex_t *X,  MKL_INT incX,  armpl_singlecomplex_t *beta,                 armpl_singlecomplex_t *Y,  MKL_INT incY)
void cblas_cgbmv(  CBLAS_LAYOUT Layout,                   CBLAS_TRANSPOSE TransA,  MKL_INT M,  MKL_INT N,                  MKL_INT KL,  MKL_INT KU,  armpl_singlecomplex_t *alpha,                  armpl_singlecomplex_t *A,  MKL_INT lda,  armpl_singlecomplex_t *X,                  MKL_INT incX,  armpl_singlecomplex_t *beta, armpl_singlecomplex_t *Y,  MKL_INT incY)
void cblas_ctrmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  armpl_singlecomplex_t *A,  MKL_INT lda,                 armpl_singlecomplex_t *X,  MKL_INT incX)
void cblas_ctbmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  MKL_INT K,  armpl_singlecomplex_t *A,  MKL_INT lda,                 armpl_singlecomplex_t *X,  MKL_INT incX)
void cblas_ctpmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  armpl_singlecomplex_t *Ap, armpl_singlecomplex_t *X,  MKL_INT incX)
void cblas_ctrsv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  armpl_singlecomplex_t *A,  MKL_INT lda, armpl_singlecomplex_t *X,                  MKL_INT incX)
void cblas_ctbsv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  MKL_INT K,  armpl_singlecomplex_t *A,  MKL_INT lda,                 armpl_singlecomplex_t *X,  MKL_INT incX)
void cblas_ctpsv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  armpl_singlecomplex_t *Ap, armpl_singlecomplex_t *X,  MKL_INT incX)
void cblas_zgemv(  CBLAS_LAYOUT Layout,                   CBLAS_TRANSPOSE TransA,  MKL_INT M,  MKL_INT N,                  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *A,  MKL_INT lda,                  armpl_doublecomplex_t *X,  MKL_INT incX,  armpl_doublecomplex_t *beta,                 armpl_doublecomplex_t *Y,  MKL_INT incY)
void cblas_zgbmv(  CBLAS_LAYOUT Layout,                   CBLAS_TRANSPOSE TransA,  MKL_INT M,  MKL_INT N,                  MKL_INT KL,  MKL_INT KU,  armpl_doublecomplex_t *alpha,                  armpl_doublecomplex_t *A,  MKL_INT lda,  armpl_doublecomplex_t *X,                  MKL_INT incX,  armpl_doublecomplex_t *beta, armpl_doublecomplex_t *Y,  MKL_INT incY)
void cblas_ztrmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  armpl_doublecomplex_t *A,  MKL_INT lda,                 armpl_doublecomplex_t *X,  MKL_INT incX)
void cblas_ztbmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  MKL_INT K,  armpl_doublecomplex_t *A,  MKL_INT lda,                 armpl_doublecomplex_t *X,  MKL_INT incX)
void cblas_ztpmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  armpl_doublecomplex_t *Ap, armpl_doublecomplex_t *X,  MKL_INT incX)
void cblas_ztrsv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  armpl_doublecomplex_t *A,  MKL_INT lda, armpl_doublecomplex_t *X,                  MKL_INT incX)
void cblas_ztbsv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  MKL_INT K,  armpl_doublecomplex_t *A,  MKL_INT lda,                 armpl_doublecomplex_t *X,  MKL_INT incX)
void cblas_ztpsv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE TransA,   CBLAS_DIAG Diag,                  MKL_INT N,  armpl_doublecomplex_t *Ap, armpl_doublecomplex_t *X,  MKL_INT incX)
void cblas_ssymv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                  MKL_INT N,  float alpha,  float *A,                  MKL_INT lda,  float *X,  MKL_INT incX,                  float beta, float *Y,  MKL_INT incY)
void cblas_ssbmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                  MKL_INT N,  MKL_INT K,  float alpha,  float *A,                  MKL_INT lda,  float *X,  MKL_INT incX,                  float beta, float *Y,  MKL_INT incY)
void cblas_sspmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                  MKL_INT N,  float alpha,  float *Ap,                  float *X,  MKL_INT incX,                  float beta, float *Y,  MKL_INT incY)
void cblas_sger(  CBLAS_LAYOUT Layout,  MKL_INT M,  MKL_INT N,                 float alpha,  float *X,  MKL_INT incX,                 float *Y,  MKL_INT incY, float *A,  MKL_INT lda)
void cblas_ssyr(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                 MKL_INT N,  float alpha,  float *X,                 MKL_INT incX, float *A,  MKL_INT lda)
void cblas_sspr(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                 MKL_INT N,  float alpha,  float *X,                 MKL_INT incX, float *Ap)
void cblas_ssyr2(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                 MKL_INT N,  float alpha,  float *X,                 MKL_INT incX,  float *Y,  MKL_INT incY, float *A,                 MKL_INT lda)
void cblas_sspr2(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                 MKL_INT N,  float alpha,  float *X,                 MKL_INT incX,  float *Y,  MKL_INT incY, float *A)
void cblas_dsymv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                  MKL_INT N,  double alpha,  double *A,                  MKL_INT lda,  double *X,  MKL_INT incX,                  double beta, double *Y,  MKL_INT incY)
void cblas_dsbmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                  MKL_INT N,  MKL_INT K,  double alpha,  double *A,                  MKL_INT lda,  double *X,  MKL_INT incX,                  double beta, double *Y,  MKL_INT incY)
void cblas_dspmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                  MKL_INT N,  double alpha,  double *Ap,                  double *X,  MKL_INT incX,                  double beta, double *Y,  MKL_INT incY)
void cblas_dger(  CBLAS_LAYOUT Layout,  MKL_INT M,  MKL_INT N,                 double alpha,  double *X,  MKL_INT incX,                 double *Y,  MKL_INT incY, double *A,  MKL_INT lda)
void cblas_dsyr(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                 MKL_INT N,  double alpha,  double *X,                 MKL_INT incX, double *A,  MKL_INT lda)
void cblas_dspr(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                 MKL_INT N,  double alpha,  double *X,                 MKL_INT incX, double *Ap)
void cblas_dsyr2(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                 MKL_INT N,  double alpha,  double *X,                 MKL_INT incX,  double *Y,  MKL_INT incY, double *A,                 MKL_INT lda)
void cblas_dspr2(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                 MKL_INT N,  double alpha,  double *X,                 MKL_INT incX,  double *Y,  MKL_INT incY, double *A)
void cblas_chemv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                  MKL_INT N,  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *A,                  MKL_INT lda,  armpl_singlecomplex_t *X,  MKL_INT incX,                  armpl_singlecomplex_t *beta, armpl_singlecomplex_t *Y,  MKL_INT incY)
void cblas_chbmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                  MKL_INT N,  MKL_INT K,  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *A,                  MKL_INT lda,  armpl_singlecomplex_t *X,  MKL_INT incX,                  armpl_singlecomplex_t *beta, armpl_singlecomplex_t *Y,  MKL_INT incY)
void cblas_chpmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                  MKL_INT N,  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *Ap,                  armpl_singlecomplex_t *X,  MKL_INT incX,                  armpl_singlecomplex_t *beta, armpl_singlecomplex_t *Y,  MKL_INT incY)
void cblas_cgeru(  CBLAS_LAYOUT Layout,  MKL_INT M,  MKL_INT N,                  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *X,  MKL_INT incX,                  armpl_singlecomplex_t *Y,  MKL_INT incY, armpl_singlecomplex_t *A,  MKL_INT lda)
void cblas_cgerc(  CBLAS_LAYOUT Layout,  MKL_INT M,  MKL_INT N,                  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *X,  MKL_INT incX,                  armpl_singlecomplex_t *Y,  MKL_INT incY, armpl_singlecomplex_t *A,  MKL_INT lda)
void cblas_cher(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                 MKL_INT N,  float alpha,  armpl_singlecomplex_t *X,  MKL_INT incX,                armpl_singlecomplex_t *A,  MKL_INT lda)
void cblas_chpr(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                 MKL_INT N,  float alpha,  armpl_singlecomplex_t *X,                 MKL_INT incX, armpl_singlecomplex_t *A)
void cblas_cher2(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,  MKL_INT N,                 armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *X,  MKL_INT incX,                 armpl_singlecomplex_t *Y,  MKL_INT incY, armpl_singlecomplex_t *A,  MKL_INT lda)
void cblas_chpr2(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,  MKL_INT N,                 armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *X,  MKL_INT incX,                 armpl_singlecomplex_t *Y,  MKL_INT incY, armpl_singlecomplex_t *Ap)
void cblas_zhemv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                  MKL_INT N,  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *A,                  MKL_INT lda,  armpl_doublecomplex_t *X,  MKL_INT incX,                  armpl_doublecomplex_t *beta, armpl_doublecomplex_t *Y,  MKL_INT incY)
void cblas_zhbmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                  MKL_INT N,  MKL_INT K,  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *A,                  MKL_INT lda,  armpl_doublecomplex_t *X,  MKL_INT incX,                  armpl_doublecomplex_t *beta, armpl_doublecomplex_t *Y,  MKL_INT incY)
void cblas_zhpmv(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                  MKL_INT N,  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *Ap,                  armpl_doublecomplex_t *X,  MKL_INT incX,                  armpl_doublecomplex_t *beta, armpl_doublecomplex_t *Y,  MKL_INT incY)
void cblas_zgeru(  CBLAS_LAYOUT Layout,  MKL_INT M,  MKL_INT N,                  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *X,  MKL_INT incX,                  armpl_doublecomplex_t *Y,  MKL_INT incY, armpl_doublecomplex_t *A,  MKL_INT lda)
void cblas_zgerc(  CBLAS_LAYOUT Layout,  MKL_INT M,  MKL_INT N,                  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *X,  MKL_INT incX,                  armpl_doublecomplex_t *Y,  MKL_INT incY, armpl_doublecomplex_t *A,  MKL_INT lda)
void cblas_zher(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                 MKL_INT N,  double alpha,  armpl_doublecomplex_t *X,  MKL_INT incX,                armpl_doublecomplex_t *A,  MKL_INT lda)
void cblas_zhpr(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                 MKL_INT N,  double alpha,  armpl_doublecomplex_t *X,                 MKL_INT incX, armpl_doublecomplex_t *A)
void cblas_zher2(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,  MKL_INT N,                 armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *X,  MKL_INT incX,                 armpl_doublecomplex_t *Y,  MKL_INT incY, armpl_doublecomplex_t *A,  MKL_INT lda)
void cblas_zhpr2(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,  MKL_INT N,                 armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *X,  MKL_INT incX,                 armpl_doublecomplex_t *Y,  MKL_INT incY, armpl_doublecomplex_t *Ap)
void cblas_sgemm(  CBLAS_LAYOUT Layout,   CBLAS_TRANSPOSE TransA,                   CBLAS_TRANSPOSE TransB,  MKL_INT M,  MKL_INT N,                  MKL_INT K,  float alpha,  float *A,                  MKL_INT lda,  float *B,  MKL_INT ldb,                  float beta, float *C,  MKL_INT ldc)
void cblas_sgemm_batch( CBLAS_LAYOUT Layout,   CBLAS_TRANSPOSE *TransA_Array,                        CBLAS_TRANSPOSE *TransB_Array,  MKL_INT *M_Array,  MKL_INT *N_Array,                        MKL_INT *K_Array,  float *alpha_Array,  float **A_Array,                        MKL_INT *lda_Array,  float **B_Array,  MKL_INT *ldb_Array,                        float *beta_Array, float **C_Array,  MKL_INT *ldc_Array,                        MKL_INT group_count,  MKL_INT *group_size)
void cblas_sgemmt(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                    CBLAS_TRANSPOSE TransA,   CBLAS_TRANSPOSE TransB,		           MKL_INT N,  MKL_INT K,                   float alpha,  float *A,  MKL_INT lda,                   float *B,  MKL_INT ldb,  float beta,                  float *C,  MKL_INT ldc)
void cblas_ssymm(  CBLAS_LAYOUT Layout,   CBLAS_SIDE Side,                   CBLAS_UPLO Uplo,  MKL_INT M,  MKL_INT N,                  float alpha,  float *A,  MKL_INT lda,                  float *B,  MKL_INT ldb,  float beta,                 float *C,  MKL_INT ldc)
void cblas_ssyrk(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE Trans,  MKL_INT N,  MKL_INT K,                  float alpha,  float *A,  MKL_INT lda,                  float beta, float *C,  MKL_INT ldc)
void cblas_ssyr2k(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                    CBLAS_TRANSPOSE Trans,  MKL_INT N,  MKL_INT K,                   float alpha,  float *A,  MKL_INT lda,                   float *B,  MKL_INT ldb,  float beta,                  float *C,  MKL_INT ldc)
void cblas_strmm(  CBLAS_LAYOUT Layout,   CBLAS_SIDE Side,                   CBLAS_UPLO Uplo,   CBLAS_TRANSPOSE TransA,                   CBLAS_DIAG Diag,  MKL_INT M,  MKL_INT N,                  float alpha,  float *A,  MKL_INT lda,                 float *B,  MKL_INT ldb)
void cblas_strsm(  CBLAS_LAYOUT Layout,   CBLAS_SIDE Side,                   CBLAS_UPLO Uplo,   CBLAS_TRANSPOSE TransA,                   CBLAS_DIAG Diag,  MKL_INT M,  MKL_INT N,                  float alpha,  float *A,  MKL_INT lda,                 float *B,  MKL_INT ldb)
void cblas_strsm_batch( CBLAS_LAYOUT Layout,  CBLAS_SIDE *Side_Array,                        CBLAS_UPLO *Uplo_Array,  CBLAS_TRANSPOSE *TransA_Array,                        CBLAS_DIAG *Diag_Array,  MKL_INT *M_Array,                        MKL_INT *N_Array,  float *alpha_Array,                        float **A_Array,  MKL_INT *lda_Array,                       float **B_Array,  MKL_INT *ldb_Array,                        MKL_INT group_count,  MKL_INT *group_size)
void cblas_dgemm(  CBLAS_LAYOUT Layout,   CBLAS_TRANSPOSE TransA,                   CBLAS_TRANSPOSE TransB,  MKL_INT M,  MKL_INT N,                  MKL_INT K,  double alpha,  double *A,                  MKL_INT lda,  double *B,  MKL_INT ldb,                  double beta, double *C,  MKL_INT ldc)
void cblas_dgemm_batch( CBLAS_LAYOUT Layout,   CBLAS_TRANSPOSE *TransA_Array,                        CBLAS_TRANSPOSE *TransB_Array,  MKL_INT *M_Array,  MKL_INT *N_Array,                        MKL_INT *K_Array,  double *alpha_Array,  double **A_Array,                        MKL_INT *lda_Array,  double **B_Array,  MKL_INT* ldb_Array,                        double *beta_Array, double **C_Array,  MKL_INT *ldc_Array,                        MKL_INT group_count,  MKL_INT *group_size)
void cblas_dgemmt(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                    CBLAS_TRANSPOSE TransA,   CBLAS_TRANSPOSE TransB,		           MKL_INT N,  MKL_INT K,                   double alpha,  double *A,  MKL_INT lda,                   double *B,  MKL_INT ldb,  double beta,                  double *C,  MKL_INT ldc)
void cblas_dsymm(  CBLAS_LAYOUT Layout,   CBLAS_SIDE Side,                   CBLAS_UPLO Uplo,  MKL_INT M,  MKL_INT N,                  double alpha,  double *A,  MKL_INT lda,                  double *B,  MKL_INT ldb,  double beta,                 double *C,  MKL_INT ldc)
void cblas_dsyrk(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE Trans,  MKL_INT N,  MKL_INT K,                  double alpha,  double *A,  MKL_INT lda,                  double beta, double *C,  MKL_INT ldc)
void cblas_dsyr2k(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                    CBLAS_TRANSPOSE Trans,  MKL_INT N,  MKL_INT K,                   double alpha,  double *A,  MKL_INT lda,                   double *B,  MKL_INT ldb,  double beta,                  double *C,  MKL_INT ldc)
void cblas_dtrmm(  CBLAS_LAYOUT Layout,   CBLAS_SIDE Side,                   CBLAS_UPLO Uplo,   CBLAS_TRANSPOSE TransA,                   CBLAS_DIAG Diag,  MKL_INT M,  MKL_INT N,                  double alpha,  double *A,  MKL_INT lda,                 double *B,  MKL_INT ldb)
void cblas_dtrsm(  CBLAS_LAYOUT Layout,   CBLAS_SIDE Side,                   CBLAS_UPLO Uplo,   CBLAS_TRANSPOSE TransA,                   CBLAS_DIAG Diag,  MKL_INT M,  MKL_INT N,                  double alpha,  double *A,  MKL_INT lda,                 double *B,  MKL_INT ldb)
void cblas_dtrsm_batch( CBLAS_LAYOUT Layout,  CBLAS_SIDE *Side_Array,                        CBLAS_UPLO *Uplo_Array,  CBLAS_TRANSPOSE *Transa_Array,                        CBLAS_DIAG *Diag_Array,  MKL_INT *M_Array,                        MKL_INT *N_Array,  double *alpha_Array,                        double **A_Array,  MKL_INT *lda_Array,                       double **B_Array,  MKL_INT *ldb_Array,                        MKL_INT group_count,  MKL_INT *group_size)
void cblas_cgemm(  CBLAS_LAYOUT Layout,   CBLAS_TRANSPOSE TransA,                   CBLAS_TRANSPOSE TransB,  MKL_INT M,  MKL_INT N,                  MKL_INT K,  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *A,                  MKL_INT lda,  armpl_singlecomplex_t *B,  MKL_INT ldb,                  armpl_singlecomplex_t *beta, armpl_singlecomplex_t *C,  MKL_INT ldc)
void cblas_cgemm3m(  CBLAS_LAYOUT Layout,   CBLAS_TRANSPOSE TransA,                   CBLAS_TRANSPOSE TransB,  MKL_INT M,  MKL_INT N,                  MKL_INT K,  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *A,                  MKL_INT lda,  armpl_singlecomplex_t *B,  MKL_INT ldb,                  armpl_singlecomplex_t *beta, armpl_singlecomplex_t *C,  MKL_INT ldc)
void cblas_cgemm_batch( CBLAS_LAYOUT Layout,   CBLAS_TRANSPOSE *TransA_Array,                        CBLAS_TRANSPOSE *TransB_Array,  MKL_INT *M_Array,  MKL_INT *N_Array,                        MKL_INT *K_Array,  armpl_singlecomplex_t *alpha_Array,  armpl_singlecomplex_t **A_Array,                        MKL_INT *lda_Array,  armpl_singlecomplex_t **B_Array,  MKL_INT* ldb_Array,                        armpl_singlecomplex_t *beta_Array, armpl_singlecomplex_t **C_Array,  MKL_INT *ldc_Array,                        MKL_INT group_count,  MKL_INT *group_size)
void cblas_cgemm3m_batch( CBLAS_LAYOUT Layout,   CBLAS_TRANSPOSE *TransA_Array,                          CBLAS_TRANSPOSE *TransB_Array,  MKL_INT *M_Array,  MKL_INT *N_Array,                          MKL_INT *K_Array,  armpl_singlecomplex_t *alpha_Array,  armpl_singlecomplex_t **A_Array,                          MKL_INT *lda_Array,  armpl_singlecomplex_t **B_Array,  MKL_INT* ldb_Array,                          armpl_singlecomplex_t *beta_Array, armpl_singlecomplex_t **C_Array,  MKL_INT *ldc_Array,                          MKL_INT group_count,  MKL_INT *group_size)
void cblas_cgemmt(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                    CBLAS_TRANSPOSE TransA,   CBLAS_TRANSPOSE TransB,		           MKL_INT N,  MKL_INT K,                   armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *A,  MKL_INT lda,                   armpl_singlecomplex_t *B,  MKL_INT ldb,  armpl_singlecomplex_t *beta,                  armpl_singlecomplex_t *C,  MKL_INT ldc)
void cblas_csymm(  CBLAS_LAYOUT Layout,   CBLAS_SIDE Side,                   CBLAS_UPLO Uplo,  MKL_INT M,  MKL_INT N,                  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *A,  MKL_INT lda,                  armpl_singlecomplex_t *B,  MKL_INT ldb,  armpl_singlecomplex_t *beta,                 armpl_singlecomplex_t *C,  MKL_INT ldc)
void cblas_csyrk(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE Trans,  MKL_INT N,  MKL_INT K,                  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *A,  MKL_INT lda,                  armpl_singlecomplex_t *beta, armpl_singlecomplex_t *C,  MKL_INT ldc)
void cblas_csyr2k(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                    CBLAS_TRANSPOSE Trans,  MKL_INT N,  MKL_INT K,                   armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *A,  MKL_INT lda,                   armpl_singlecomplex_t *B,  MKL_INT ldb,  armpl_singlecomplex_t *beta,                  armpl_singlecomplex_t *C,  MKL_INT ldc)
void cblas_ctrmm(  CBLAS_LAYOUT Layout,   CBLAS_SIDE Side,                   CBLAS_UPLO Uplo,   CBLAS_TRANSPOSE TransA,                   CBLAS_DIAG Diag,  MKL_INT M,  MKL_INT N,                  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *A,  MKL_INT lda,                 armpl_singlecomplex_t *B,  MKL_INT ldb)
void cblas_ctrsm(  CBLAS_LAYOUT Layout,   CBLAS_SIDE Side,                   CBLAS_UPLO Uplo,   CBLAS_TRANSPOSE TransA,                   CBLAS_DIAG Diag,  MKL_INT M,  MKL_INT N,                  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *A,  MKL_INT lda,                 armpl_singlecomplex_t *B,  MKL_INT ldb)
void cblas_ctrsm_batch( CBLAS_LAYOUT Layout,  CBLAS_SIDE *Side_Array,                        CBLAS_UPLO *Uplo_Array,  CBLAS_TRANSPOSE *Transa_Array,                        CBLAS_DIAG *Diag_Array,  MKL_INT *M_Array,                        MKL_INT *N_Array,  armpl_singlecomplex_t *alpha_Array,                        armpl_singlecomplex_t **A_Array,  MKL_INT *lda_Array,                       armpl_singlecomplex_t **B_Array,  MKL_INT *ldb_Array,                        MKL_INT group_count,  MKL_INT *group_size)
void cblas_zgemm(  CBLAS_LAYOUT Layout,   CBLAS_TRANSPOSE TransA,                   CBLAS_TRANSPOSE TransB,  MKL_INT M,  MKL_INT N,                  MKL_INT K,  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *A,                  MKL_INT lda,  armpl_doublecomplex_t *B,  MKL_INT ldb,                  armpl_doublecomplex_t *beta, armpl_doublecomplex_t *C,  MKL_INT ldc)
void cblas_zgemm3m(  CBLAS_LAYOUT Layout,   CBLAS_TRANSPOSE TransA,                   CBLAS_TRANSPOSE TransB,  MKL_INT M,  MKL_INT N,                  MKL_INT K,  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *A,                  MKL_INT lda,  armpl_doublecomplex_t *B,  MKL_INT ldb,                  armpl_doublecomplex_t *beta, armpl_doublecomplex_t *C,  MKL_INT ldc)
void cblas_zgemm_batch( CBLAS_LAYOUT Layout,   CBLAS_TRANSPOSE *TransA_Array,                        CBLAS_TRANSPOSE *TransB_Array,  MKL_INT *M_Array,  MKL_INT *N_Array,                        MKL_INT *K_Array,  armpl_doublecomplex_t *alpha_Array,  armpl_doublecomplex_t **A_Array,                        MKL_INT *lda_Array,  armpl_doublecomplex_t **B_Array,  MKL_INT* ldb_Array,                        armpl_doublecomplex_t *beta_Array, armpl_doublecomplex_t **C_Array,  MKL_INT *ldc_Array,                        MKL_INT group_count,  MKL_INT *group_size)
void cblas_zgemm3m_batch( CBLAS_LAYOUT Layout,   CBLAS_TRANSPOSE *TransA_Array,                          CBLAS_TRANSPOSE *TransB_Array,  MKL_INT *M_Array,  MKL_INT *N_Array,                          MKL_INT *K_Array,  armpl_doublecomplex_t *alpha_Array,  armpl_doublecomplex_t **A_Array,                          MKL_INT *lda_Array,  armpl_doublecomplex_t **B_Array,  MKL_INT* ldb_Array,                          armpl_doublecomplex_t *beta_Array, armpl_doublecomplex_t **C_Array,  MKL_INT *ldc_Array,                          MKL_INT group_count,  MKL_INT *group_size)
void cblas_zgemmt(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                    CBLAS_TRANSPOSE TransA,   CBLAS_TRANSPOSE TransB, MKL_INT N,  MKL_INT K,                   armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *A,  MKL_INT lda,                   armpl_doublecomplex_t *B,  MKL_INT ldb,  armpl_doublecomplex_t *beta,                  armpl_doublecomplex_t *C,  MKL_INT ldc)
void cblas_zsymm(  CBLAS_LAYOUT Layout,   CBLAS_SIDE Side,                   CBLAS_UPLO Uplo,  MKL_INT M,  MKL_INT N,                  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *A,  MKL_INT lda,                  armpl_doublecomplex_t *B,  MKL_INT ldb,  armpl_doublecomplex_t *beta,                 armpl_doublecomplex_t *C,  MKL_INT ldc)
void cblas_zsyrk(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE Trans,  MKL_INT N,  MKL_INT K,                  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *A,  MKL_INT lda,                  armpl_doublecomplex_t *beta, armpl_doublecomplex_t *C,  MKL_INT ldc)
void cblas_zsyr2k(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                    CBLAS_TRANSPOSE Trans,  MKL_INT N,  MKL_INT K,                   armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *A,  MKL_INT lda,                   armpl_doublecomplex_t *B,  MKL_INT ldb,  armpl_doublecomplex_t *beta,                  armpl_doublecomplex_t *C,  MKL_INT ldc)
void cblas_ztrmm(  CBLAS_LAYOUT Layout,   CBLAS_SIDE Side,                   CBLAS_UPLO Uplo,   CBLAS_TRANSPOSE TransA,                   CBLAS_DIAG Diag,  MKL_INT M,  MKL_INT N,                  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *A,  MKL_INT lda,                 armpl_doublecomplex_t *B,  MKL_INT ldb)
void cblas_ztrsm(  CBLAS_LAYOUT Layout,   CBLAS_SIDE Side,                   CBLAS_UPLO Uplo,   CBLAS_TRANSPOSE TransA,                   CBLAS_DIAG Diag,  MKL_INT M,  MKL_INT N,                  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *A,  MKL_INT lda,                 armpl_doublecomplex_t *B,  MKL_INT ldb)
void cblas_ztrsm_batch( CBLAS_LAYOUT Layout,  CBLAS_SIDE *Side_Array,                        CBLAS_UPLO *Uplo_Array,  CBLAS_TRANSPOSE *Transa_Array,                        CBLAS_DIAG *Diag_Array,  MKL_INT *M_Array,                        MKL_INT *N_Array,  armpl_doublecomplex_t *alpha_Array,                        armpl_doublecomplex_t **A_Array,  MKL_INT *lda_Array,                       armpl_doublecomplex_t **B_Array,  MKL_INT *ldb_Array,                        MKL_INT group_count,  MKL_INT *group_size)
void cblas_chemm(  CBLAS_LAYOUT Layout,   CBLAS_SIDE Side,                   CBLAS_UPLO Uplo,  MKL_INT M,  MKL_INT N,                  armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *A,  MKL_INT lda,                  armpl_singlecomplex_t *B,  MKL_INT ldb,  armpl_singlecomplex_t *beta,                 armpl_singlecomplex_t *C,  MKL_INT ldc)
void cblas_cherk(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE Trans,  MKL_INT N,  MKL_INT K,                  float alpha,  armpl_singlecomplex_t *A,  MKL_INT lda,                  float beta, armpl_singlecomplex_t *C,  MKL_INT ldc)
void cblas_cher2k(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                    CBLAS_TRANSPOSE Trans,  MKL_INT N,  MKL_INT K,                   armpl_singlecomplex_t *alpha,  armpl_singlecomplex_t *A,  MKL_INT lda,                   armpl_singlecomplex_t *B,  MKL_INT ldb,  float beta,                  armpl_singlecomplex_t *C,  MKL_INT ldc)
void cblas_zhemm(  CBLAS_LAYOUT Layout,   CBLAS_SIDE Side,                   CBLAS_UPLO Uplo,  MKL_INT M,  MKL_INT N,                  armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *A,  MKL_INT lda,                  armpl_doublecomplex_t *B,  MKL_INT ldb,  armpl_doublecomplex_t *beta,                 armpl_doublecomplex_t *C,  MKL_INT ldc)
void cblas_zherk(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                   CBLAS_TRANSPOSE Trans,  MKL_INT N,  MKL_INT K,                  double alpha,  armpl_doublecomplex_t *A,  MKL_INT lda,                  double beta, armpl_doublecomplex_t *C,  MKL_INT ldc)
void cblas_zher2k(  CBLAS_LAYOUT Layout,   CBLAS_UPLO Uplo,                    CBLAS_TRANSPOSE Trans,  MKL_INT N,  MKL_INT K,                   armpl_doublecomplex_t *alpha,  armpl_doublecomplex_t *A,  MKL_INT lda,                   armpl_doublecomplex_t *B,  MKL_INT ldb,  double beta,                  armpl_doublecomplex_t *C,  MKL_INT ldc)
void cblas_sgemm_pack(  CBLAS_LAYOUT Layout,   CBLAS_IDENTIFIER identifier,                   CBLAS_TRANSPOSE Trans,  MKL_INT M,  MKL_INT N,                  MKL_INT K,  float alpha,  float *src,                  MKL_INT ld, float *dest)
void cblas_sgemm_compute(  CBLAS_LAYOUT Layout,  MKL_INT TransA,                  MKL_INT TransB,  MKL_INT M,  MKL_INT N,                  MKL_INT K,  float *A,                  MKL_INT lda,  float *B,  MKL_INT ldb,                  float beta, float *C,  MKL_INT ldc)
void cblas_sgemm_free(float *dest)
void cblas_dgemm_pack(  CBLAS_LAYOUT Layout,   CBLAS_IDENTIFIER identifier,                   CBLAS_TRANSPOSE Trans,  MKL_INT M,  MKL_INT N,                  MKL_INT K,  double alpha,  double *src,                  MKL_INT ld, double *dest)
void cblas_dgemm_compute(  CBLAS_LAYOUT Layout,  MKL_INT TransA,                  MKL_INT TransB,  MKL_INT M,  MKL_INT N,                  MKL_INT K,  double *A,                  MKL_INT lda,  double *B,  MKL_INT ldb,                  double beta, double *C,  MKL_INT ldc)
void cblas_dgemm_free(double *dest)
