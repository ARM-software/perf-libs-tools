/*
 * ARMPL version 18.2.0 Copyright ARM,NAG 2015-8
 */

/*
  This is the ARMPL header file. It contains function prototypes
  to allow a C programmer to call ARMPL routines via their C
  or Fortran interfaces.
*/

#ifndef _ARMPL_H
#define _ARMPL_H

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* ------------------------------------------------------------------ */

/* All lines containing _ARMPL_INT_T or INTEGER64 get          _ARMPL_INT_T
   filtered out of the distributed copy of armpl.h             _ARMPL_INT_T */
/* _ARMPL_INT_T The ARMPL integer type, either 32-bit or 64-bit */
#ifndef _ARMPL_INT_T
#define _ARMPL_INT_T
#ifdef INTEGER64
/* _ARMPL_INT_T  N.B. even in 64-bit integer variants of ARMPL, hidden
   _ARMPL_INT_T  Fortran string length arguments (type armpl_strlen_t)
   _ARMPL_INT_T  are of type int rather than long */
  typedef long armpl_int_t;                /* _ARMPL_INT_T */
  typedef unsigned long armpl_uint_t;      /* _ARMPL_INT_T */
  typedef int armpl_strlen_t;              /* _ARMPL_INT_T */
#else /* ! INTEGER64 */
  typedef int armpl_int_t;                 /* _ARMPL_INT_T */
  typedef unsigned int armpl_uint_t;       /* _ARMPL_INT_T */
  typedef int armpl_strlen_t;              /* _ARMPL_INT_T */
#endif /* ! INTEGER64 */
#endif /* _ARMPL_INT_T */

/* A complex datatype for use by the C interfaces to ARMPL routines */
#ifndef _ARMPL_ARMPL_SINGLECOMPLEX_T
#define _ARMPL_ARMPL_SINGLECOMPLEX_T
typedef struct
{
  float real, imag;
} armpl_singlecomplex_t;
typedef struct
{
  double real, imag;
} armpl_doublecomplex_t;
#endif /* !defined(_ARMPL_ARMPL_SINGLECOMPLEX_T) */

/*
   These typedefs are for routines that are arguments to other routines,
   e.g. ARMPL_CGEES_SELECT describes the argument "select" of routine cgees.
 */
typedef armpl_int_t (* ARMPL_CGEES_SELECT)(armpl_singlecomplex_t *);
typedef armpl_int_t (* ARMPL_CGEESX_SELECT)(armpl_singlecomplex_t *);
typedef armpl_int_t (* ARMPL_CGGES_SELCTG)(armpl_singlecomplex_t *, armpl_singlecomplex_t *);
typedef armpl_int_t (* ARMPL_CGGESX_SELCTG)(armpl_singlecomplex_t *, armpl_singlecomplex_t *);
typedef armpl_int_t (* ARMPL_DGEES_SELECT)(double *, double *);
typedef armpl_int_t (* ARMPL_DGEESX_SELECT)(double *, double *);
typedef armpl_int_t (* ARMPL_DGGES_DELCTG)(double *, double *, double *);
typedef armpl_int_t (* ARMPL_DGGESX_DELCTG)(double *, double *, double *);
typedef armpl_int_t (* ARMPL_SGEES_SELECT)(float *, float *);
typedef armpl_int_t (* ARMPL_SGEESX_SELECT)(float *, float *);
typedef armpl_int_t (* ARMPL_SGGES_SELCTG)(float *, float *, float *);
typedef armpl_int_t (* ARMPL_SGGESX_SELCTG)(float *, float *, float *);
typedef armpl_int_t (* ARMPL_ZGEES_SELECT)(armpl_doublecomplex_t *);
typedef armpl_int_t (* ARMPL_ZGEESX_SELECT)(armpl_doublecomplex_t *);
typedef armpl_int_t (* ARMPL_ZGGES_DELCTG)(armpl_doublecomplex_t *, armpl_doublecomplex_t *);
typedef armpl_int_t (* ARMPL_ZGGESX_DELCTG)(armpl_doublecomplex_t *, armpl_doublecomplex_t *);

/* ARMPL version information */
void armplversion(armpl_int_t *major, armpl_int_t *minor, armpl_int_t *patch, const char **tag);
void armplinfo(void);

/* OMP interfaces */
armpl_int_t armpl_get_max_threads(void);
armpl_int_t armpl_get_num_threads(void);
void armpl_set_num_threads(armpl_int_t numthreads);
armpl_int_t armpl_get_num_procs(void);
armpl_int_t armpl_get_thread_num(void);

/* Basic complex arithmetic routines for C */
armpl_singlecomplex_t compose_armpl_singlecomplex(float x, float y);
float complex_real(armpl_singlecomplex_t z);
float complex_imag(armpl_singlecomplex_t z);
armpl_singlecomplex_t complex_negate(armpl_singlecomplex_t z);
armpl_singlecomplex_t complex_conjugate(armpl_singlecomplex_t z);
armpl_singlecomplex_t complex_add(armpl_singlecomplex_t z1, armpl_singlecomplex_t z2);
armpl_singlecomplex_t complex_subtract(armpl_singlecomplex_t z1, armpl_singlecomplex_t z2);
armpl_singlecomplex_t complex_multiply(armpl_singlecomplex_t z1, armpl_singlecomplex_t z2);
armpl_singlecomplex_t complex_divide(armpl_singlecomplex_t z1, armpl_singlecomplex_t z2);
armpl_int_t complex_equal(armpl_singlecomplex_t z1, armpl_singlecomplex_t z2);
armpl_int_t complex_notequal(armpl_singlecomplex_t z1, armpl_singlecomplex_t z2);
float complex_abs(armpl_singlecomplex_t z);

armpl_doublecomplex_t compose_armpl_doublecomplex(double x, double y);
double doublecomplex_real(armpl_doublecomplex_t z);
double doublecomplex_imag(armpl_doublecomplex_t z);
armpl_doublecomplex_t doublecomplex_negate(armpl_doublecomplex_t z);
armpl_doublecomplex_t doublecomplex_conjugate(armpl_doublecomplex_t z);
armpl_doublecomplex_t doublecomplex_add(armpl_doublecomplex_t z1, armpl_doublecomplex_t z2);
armpl_doublecomplex_t doublecomplex_subtract(armpl_doublecomplex_t z1, armpl_doublecomplex_t z2);
armpl_doublecomplex_t doublecomplex_multiply(armpl_doublecomplex_t z1, armpl_doublecomplex_t z2);
armpl_doublecomplex_t doublecomplex_divide(armpl_doublecomplex_t z1, armpl_doublecomplex_t z2);
armpl_int_t doublecomplex_equal(armpl_doublecomplex_t z1, armpl_doublecomplex_t z2);
armpl_int_t doublecomplex_notequal(armpl_doublecomplex_t z1, armpl_doublecomplex_t z2);
double doublecomplex_abs(armpl_doublecomplex_t z);

/* minmax utilities */
armpl_int_t armpl_imax2(armpl_int_t a, armpl_int_t b);
armpl_int_t armpl_imin2(armpl_int_t a, armpl_int_t b);
armpl_int_t armpl_imax3(armpl_int_t a, armpl_int_t b, armpl_int_t c);
armpl_int_t armpl_imin3(armpl_int_t a, armpl_int_t b, armpl_int_t c);
float armpl_fmax2(float a, float b);
float armpl_fmin2(float a, float b);
float armpl_fmax3(float a, float b, float c);
float armpl_fmin3(float a, float b, float c);
double armpl_dmax2(double a, double b);
double armpl_dmin2(double a, double b);
double armpl_dmax3(double a, double b, double c);
double armpl_dmin3(double a, double b, double c);

/* ------------------------------------------------------------------ */
/* Below are prototypes for the FORTRAN interfaces to ARMPL routines */

/* BLAS routines */
void caxpby_(armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, armpl_int_t *incy);
void caxpy_(armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *y, armpl_int_t *incy);
void ccopy_(armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *y, armpl_int_t *incy);
armpl_singlecomplex_t cdotc_(armpl_singlecomplex_t *ret_val, armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *y, armpl_int_t *incy);
armpl_singlecomplex_t cdotu_(armpl_singlecomplex_t *ret_val, armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *y, armpl_int_t *incy);
void cgbmv_(char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, armpl_int_t *incy );
void cgemm_(char *transa, char *transb, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *c, armpl_int_t *ldc );
void cgemm3m_(char *transa, char *transb, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *c, armpl_int_t *ldc );
void cgemm_batch_(const char *transA, const char *transB, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t **A, const armpl_int_t *lda, const armpl_singlecomplex_t **B, const armpl_int_t *ldb, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t **C, const armpl_int_t *ldc, armpl_int_t *group_count, const armpl_int_t *group_size);
void cgemv_(char *trans, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, armpl_int_t *incy );
void cgerc_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *y, armpl_int_t *incy, armpl_singlecomplex_t *a, armpl_int_t *lda);
void cgeru_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *y, armpl_int_t *incy, armpl_singlecomplex_t *a, armpl_int_t *lda);
void chbmv_(char *uplo, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, armpl_int_t *incy );
void chemm_(char *side, char *uplo, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *c, armpl_int_t *ldc );
void chemv_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, armpl_int_t *incy );
void cher_(char *uplo, armpl_int_t *n, float *alpha, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *a, armpl_int_t *lda );
void cher2_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *y, armpl_int_t *incy, armpl_singlecomplex_t *a, armpl_int_t *lda );
void cher2k_(char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, float *beta, armpl_singlecomplex_t *c, armpl_int_t *ldc );
void cherk_(char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, float *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, float *beta, armpl_singlecomplex_t *c, armpl_int_t *ldc );
void chpmv_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, armpl_int_t *incy );
void chpr_(char *uplo, armpl_int_t *n, float *alpha, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *a );
void chpr2_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *y, armpl_int_t *incy, armpl_singlecomplex_t *a );
void classq_(armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx, float *scale, float *sumsq);
void crotg_(armpl_singlecomplex_t *a, armpl_singlecomplex_t *b, float *c, armpl_singlecomplex_t *s);
void cscal_(armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, armpl_int_t *incx);
void csrot_(armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *y, armpl_int_t *incy, float *c, float *s);
void csscal_(armpl_int_t *n, float *alpha, armpl_singlecomplex_t *x, armpl_int_t *incx);
void cstemr_(char *jobz, char *range, armpl_int_t *n, float *d, float *e, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_int_t *nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void cswap_(armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *y, armpl_int_t *incy);
void csymm_(char *side, char *uplo, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *c, armpl_int_t *ldc );
void csyr2k_(char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *c, armpl_int_t *ldc );
void csyrk_(char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *c, armpl_int_t *ldc );
void ctbmv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *x, armpl_int_t *incx );
void ctbsv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *x, armpl_int_t *incx );
void ctpmv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *x, armpl_int_t *incx );
void ctpsv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *x, armpl_int_t *incx );
void ctrmm_(char *side, char *uplo, char *transa, char *diag, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb );
void ctrmv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *x, armpl_int_t *incx );
void ctrsm_(char *side, char *uplo, char *transa, char *diag, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb );
void ctrsv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *x, armpl_int_t *incx );
double dasum_(armpl_int_t *n, double *x, armpl_int_t *incx);
void daxpby_(armpl_int_t *n, double *alpha, double *x, armpl_int_t *incx, double *beta, double *y, armpl_int_t *incy);
void daxpy_(armpl_int_t *n, double *alpha, double *x, armpl_int_t *incx, double *y, armpl_int_t *incy);
double dcabs1_(armpl_doublecomplex_t *z);
void dcopy_(armpl_int_t *n, double *x, armpl_int_t *incx, double *y, armpl_int_t *incy);
double ddot_(armpl_int_t *n, double *x, armpl_int_t *incx, double *y, armpl_int_t *incy);
void dgbmv_(char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, double *alpha, double *a, armpl_int_t *lda, double *x, armpl_int_t *incx, double *beta, double *y, armpl_int_t *incy );
void dgemm_(char *transa, char *transb, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *alpha, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *beta, double *c, armpl_int_t *ldc );
void dgemv_(char *trans, armpl_int_t *m, armpl_int_t *n, double *alpha, double *a, armpl_int_t *lda, double *x, armpl_int_t *incx, double *beta, double *y, armpl_int_t *incy );
void dgemm_batch_(const char *transA, const char *transB, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *alpha, const double **A, const armpl_int_t *lda, const double **B, const armpl_int_t *ldb, const double *beta, double **C, const armpl_int_t *ldc, armpl_int_t *group_count, const armpl_int_t *group_size);
void dger_(armpl_int_t *m, armpl_int_t *n, double *alpha, double *x, armpl_int_t *incx, double *y, armpl_int_t *incy, double *a, armpl_int_t *lda);
double dnrm2_(armpl_int_t *n, double *x, armpl_int_t *incx);
void drot_(armpl_int_t *n, double *x, armpl_int_t *incx, double *y, armpl_int_t *incy, double *c, double *s);
void drotg_(double *a, double *b, double *c, double *s);
void drotm_(armpl_int_t *n, double *x, armpl_int_t *incx, double *y, armpl_int_t *incy, double *param);
void drotmg_(double *d1, double *d2, double *b1, double *b2, double *param);
void dsbmv_(char *uplo, armpl_int_t *n, armpl_int_t *k, double *alpha, double *a, armpl_int_t *lda, double *x, armpl_int_t *incx, double *beta, double *y, armpl_int_t *incy );
void dscal_(armpl_int_t *n, double *alpha, double *x, armpl_int_t *incx);
double dsdot_(armpl_int_t *n, float *sx, armpl_int_t *incx, float *sy, armpl_int_t *incy);
void dspmv_(char *uplo, armpl_int_t *n, double *alpha, double *ap, double *x, armpl_int_t *incx, double *beta, double *y, armpl_int_t *incy );
void dspr_(char *uplo, armpl_int_t *n, double *alpha, double *x, armpl_int_t *incx, double *ap );
void dspr2_(char *uplo, armpl_int_t *n, double *alpha, double *x, armpl_int_t *incx, double *y, armpl_int_t *incy, double *ap );
void dswap_(armpl_int_t *n, double *x, armpl_int_t *incx, double *y, armpl_int_t *incy);
void dsymm_(char *side, char *uplo, armpl_int_t *m, armpl_int_t *n, double *alpha, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *beta, double *c, armpl_int_t *ldc );
void dsymv_(char *uplo, armpl_int_t *n, double *alpha, double *a, armpl_int_t *lda, double *x, armpl_int_t *incx, double *beta, double *y, armpl_int_t *incy );
void dsyr_(char *uplo, armpl_int_t *n, double *alpha, double *x, armpl_int_t *incx, double *a, armpl_int_t *lda );
void dsyr2_(char *uplo, armpl_int_t *n, double *alpha, double *x, armpl_int_t *incx, double *y, armpl_int_t *incy, double *a, armpl_int_t *lda );
void dsyr2k_(char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, double *alpha, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *beta, double *c, armpl_int_t *ldc );
void dsyrk_(char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, double *alpha, double *a, armpl_int_t *lda, double *beta, double *c, armpl_int_t *ldc );
void dtbmv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *x, armpl_int_t *incx );
void dtbsv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *x, armpl_int_t *incx );
void dtpmv_(char *uplo, char *trans, char *diag, armpl_int_t *n, double *ap, double *x, armpl_int_t *incx );
void dtpsv_(char *uplo, char *trans, char *diag, armpl_int_t *n, double *ap, double *x, armpl_int_t *incx );
void dtrmm_(char *side, char *uplo, char *transa, char *diag, armpl_int_t *m, armpl_int_t *n, double *alpha, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb );
void dtrmv_(char *uplo, char *trans, char *diag, armpl_int_t *n, double *a, armpl_int_t *lda, double *x, armpl_int_t *incx );
void dtrsm_(char *side, char *uplo, char *transa, char *diag, armpl_int_t *m, armpl_int_t *n, double *alpha, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb );
void dtrsv_(char *uplo, char *trans, char *diag, armpl_int_t *n, double *a, armpl_int_t *lda, double *x, armpl_int_t *incx );
double dzasum_(armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx);
double dznrm2_(armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx);
armpl_int_t icamax_(armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx);
armpl_int_t idamax_(armpl_int_t *n, double *x, armpl_int_t *incx);
armpl_int_t isamax_(armpl_int_t *n, float *x, armpl_int_t *incx);
armpl_int_t izamax_(armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx);
armpl_int_t lsame_(char *ca, char *cb );
float sasum_(armpl_int_t *n, float *x, armpl_int_t *incx);
void saxpby_(armpl_int_t *n, float *alpha, float *x, armpl_int_t *incx, float *beta, float *y, armpl_int_t *incy);
void saxpy_(armpl_int_t *n, float *alpha, float *x, armpl_int_t *incx, float *y, armpl_int_t *incy);
float scasum_(armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx);
float scnrm2_(armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx);
void scopy_(armpl_int_t *n, float *x, armpl_int_t *incx, float *y, armpl_int_t *incy);
float sdot_(armpl_int_t *n, float *x, armpl_int_t *incx, float *y, armpl_int_t *incy);
float sdsdot_(armpl_int_t *n, float *b, float *x, armpl_int_t *incx, float *y, armpl_int_t *incy);
void sgbmv_(char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, float *alpha, float *a, armpl_int_t *lda, float *x, armpl_int_t *incx, float *beta, float *y, armpl_int_t *incy );
void sgemm_(char *transa, char *transb, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *alpha, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *beta, float *c, armpl_int_t *ldc );
void sgemm_batch_(const char *transA, const char *transB, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *alpha, const float **A, const armpl_int_t *lda, const float **B, const armpl_int_t *ldb, const float *beta, float **C, const armpl_int_t *ldc, armpl_int_t *group_count, const armpl_int_t *group_size);
void sgemv_(char *trans, armpl_int_t *m, armpl_int_t *n, float *alpha, float *a, armpl_int_t *lda, float *x, armpl_int_t *incx, float *beta, float *y, armpl_int_t *incy );
void sger_(armpl_int_t *m, armpl_int_t *n, float *alpha, float *x, armpl_int_t *incx, float *y, armpl_int_t *incy, float *a, armpl_int_t *lda);
float snrm2_(armpl_int_t *n, float *x, armpl_int_t *incx);
void srot_(armpl_int_t *n, float *x, armpl_int_t *incx, float *y, armpl_int_t *incy, float *c, float *s);
void srotg_(float *a, float *b, float *c, float *s);
void srotm_(armpl_int_t *n, float *x, armpl_int_t *incx, float *y, armpl_int_t *incy, float *param);
void srotmg_(float *d1, float *d2, float *b1, float *b2, float *param);
void ssbmv_(char *uplo, armpl_int_t *n, armpl_int_t *k, float *alpha, float *a, armpl_int_t *lda, float *x, armpl_int_t *incx, float *beta, float *y, armpl_int_t *incy );
void sscal_(armpl_int_t *n, float *alpha, float *x, armpl_int_t *incx);
void sspmv_(char *uplo, armpl_int_t *n, float *alpha, float *ap, float *x, armpl_int_t *incx, float *beta, float *y, armpl_int_t *incy );
void sspr_(char *uplo, armpl_int_t *n, float *alpha, float *x, armpl_int_t *incx, float *ap );
void sspr2_(char *uplo, armpl_int_t *n, float *alpha, float *x, armpl_int_t *incx, float *y, armpl_int_t *incy, float *ap );
void sstemr_(char *jobz, char *range, armpl_int_t *n, float *d, float *e, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, armpl_int_t *m, float *w, float *z, armpl_int_t *ldz, armpl_int_t *nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void sswap_(armpl_int_t *n, float *x, armpl_int_t *incx, float *y, armpl_int_t *incy);
void ssymm_(char *side, char *uplo, armpl_int_t *m, armpl_int_t *n, float *alpha, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *beta, float *c, armpl_int_t *ldc );
void ssymv_(char *uplo, armpl_int_t *n, float *alpha, float *a, armpl_int_t *lda, float *x, armpl_int_t *incx, float *beta, float *y, armpl_int_t *incy );
void ssyr_(char *uplo, armpl_int_t *n, float *alpha, float *x, armpl_int_t *incx, float *a, armpl_int_t *lda );
void ssyr2_(char *uplo, armpl_int_t *n, float *alpha, float *x, armpl_int_t *incx, float *y, armpl_int_t *incy, float *a, armpl_int_t *lda );
void ssyr2k_(char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, float *alpha, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *beta, float *c, armpl_int_t *ldc );
void ssyrk_(char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, float *alpha, float *a, armpl_int_t *lda, float *beta, float *c, armpl_int_t *ldc );
void stbmv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *x, armpl_int_t *incx );
void stbsv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *x, armpl_int_t *incx );
void stpmv_(char *uplo, char *trans, char *diag, armpl_int_t *n, float *ap, float *x, armpl_int_t *incx );
void stpsv_(char *uplo, char *trans, char *diag, armpl_int_t *n, float *ap, float *x, armpl_int_t *incx );
void strmm_(char *side, char *uplo, char *transa, char *diag, armpl_int_t *m, armpl_int_t *n, float *alpha, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb );
void strmv_(char *uplo, char *trans, char *diag, armpl_int_t *n, float *a, armpl_int_t *lda, float *x, armpl_int_t *incx );
void strsm_(char *side, char *uplo, char *transa, char *diag, armpl_int_t *m, armpl_int_t *n, float *alpha, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb );
void strsv_(char *uplo, char *trans, char *diag, armpl_int_t *n, float *a, armpl_int_t *lda, float *x, armpl_int_t *incx );
void xerbla_(const char *srname, armpl_int_t *info );
void zaxpby_(armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, armpl_int_t *incy);
void zaxpy_(armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *y, armpl_int_t *incy);
void zcopy_(armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *y, armpl_int_t *incy);
armpl_doublecomplex_t zdotc_(armpl_doublecomplex_t *ret_val, armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *y, armpl_int_t *incy);
armpl_doublecomplex_t zdotu_(armpl_doublecomplex_t *ret_val, armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *y, armpl_int_t *incy);
void zdrot_(armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *y, armpl_int_t *incy, double *c, double *s);
void zdscal_(armpl_int_t *n, double *alpha, armpl_doublecomplex_t *x, armpl_int_t *incx);
void zgbmv_(char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, armpl_int_t *incy );
void zgemm_(char *transa, char *transb, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *c, armpl_int_t *ldc );
void zgemm3m_(char *transa, char *transb, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *c, armpl_int_t *ldc );
void zgemm_batch_(const char *transA, const char *transB, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t **A, const armpl_int_t *lda, const armpl_doublecomplex_t **B, const armpl_int_t *ldb, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t **C, const armpl_int_t *ldc, armpl_int_t *group_count, const armpl_int_t *group_size);
void zgemv_(char *trans, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, armpl_int_t *incy );
void zgerc_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *y, armpl_int_t *incy, armpl_doublecomplex_t *a, armpl_int_t *lda);
void zgeru_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *y, armpl_int_t *incy, armpl_doublecomplex_t *a, armpl_int_t *lda);
void zhbmv_(char *uplo, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, armpl_int_t *incy );
void zhemm_(char *side, char *uplo, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *c, armpl_int_t *ldc );
void zhemv_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, armpl_int_t *incy );
void zher_(char *uplo, armpl_int_t *n, double *alpha, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *a, armpl_int_t *lda );
void zher2_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *y, armpl_int_t *incy, armpl_doublecomplex_t *a, armpl_int_t *lda );
void zher2k_(char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, double *beta, armpl_doublecomplex_t *c, armpl_int_t *ldc );
void zherk_(char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, double *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, double *beta, armpl_doublecomplex_t *c, armpl_int_t *ldc );
void zhpmv_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, armpl_int_t *incy );
void zhpr_(char *uplo, armpl_int_t *n, double *alpha, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *a );
void zhpr2_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *y, armpl_int_t *incy, armpl_doublecomplex_t *a );
void zlassq_(armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx, double *scale, double *sumsq);
void zrotg_(armpl_doublecomplex_t *a, armpl_doublecomplex_t *b, double *c, armpl_doublecomplex_t *s);
void zscal_(armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, armpl_int_t *incx);
void zstemr_(char *jobz, char *range, armpl_int_t *n, double *d, double *e, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_int_t *nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void zswap_(armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *y, armpl_int_t *incy);
void zsymm_(char *side, char *uplo, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *c, armpl_int_t *ldc );
void zsyr2k_(char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *c, armpl_int_t *ldc );
void zsyrk_(char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *c, armpl_int_t *ldc );
void ztbmv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *x, armpl_int_t *incx );
void ztbsv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *x, armpl_int_t *incx );
void ztpmv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *x, armpl_int_t *incx );
void ztpsv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *x, armpl_int_t *incx );
void ztrmm_(char *side, char *uplo, char *transa, char *diag, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb );
void ztrmv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *x, armpl_int_t *incx );
void ztrsm_(char *side, char *uplo, char *transa, char *diag, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb );
void ztrsv_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *x, armpl_int_t *incx );

/* LAPACK routines */
void cbbcsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, armpl_int_t *m, armpl_int_t *p, armpl_int_t *q, float *theta, float *phi, armpl_singlecomplex_t *u1, armpl_int_t *ldu1, armpl_singlecomplex_t *u2, armpl_int_t *ldu2, armpl_singlecomplex_t *v1t, armpl_int_t *ldv1t, armpl_singlecomplex_t *v2t, armpl_int_t *ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e, float *rwork, armpl_int_t *lrwork, armpl_int_t *info );
void cbdsqr_(char *uplo, armpl_int_t *n, armpl_int_t *ncvt, armpl_int_t *nru, armpl_int_t *ncc, float *d, float *e, armpl_singlecomplex_t *vt, armpl_int_t *ldvt, armpl_singlecomplex_t *u, armpl_int_t *ldu, armpl_singlecomplex_t *c, armpl_int_t *ldc, float *rwork, armpl_int_t *info );
void cgbbrd_(char *vect, armpl_int_t *m, armpl_int_t *n, armpl_int_t *ncc, armpl_int_t *kl, armpl_int_t *ku, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *d, float *e, armpl_singlecomplex_t *q, armpl_int_t *ldq, armpl_singlecomplex_t *pt, armpl_int_t *ldpt, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cgbcon_(char *norm, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *ipiv, float *anorm, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cgbequ_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void cgbequb_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void cgbrfs_(char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cgbrfsx_(char *trans, char *equed, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, float *r, float *c, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cgbsv_(armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info);
void cgbsvx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cgbsvxx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cgbtrf_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void cgbtrs_(char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void cgebak_(char *job, char *side, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, armpl_int_t *m, armpl_singlecomplex_t *v, armpl_int_t *ldv, armpl_int_t *info );
void cgebal_(char *job, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, armpl_int_t *info );
void cgebrd_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *d, float *e, armpl_singlecomplex_t *tauq, armpl_singlecomplex_t *taup, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cgecon_(char *norm, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *anorm, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cgeequ_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void cgeequb_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void cgees_(char *jobvs, char *sort, ARMPL_CGEES_SELECT select, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *sdim, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vs, armpl_int_t *ldvs, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *bwork, armpl_int_t *info );
void cgeesx_(char *jobvs, char *sort, ARMPL_CGEESX_SELECT select, char *sense, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *sdim, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vs, armpl_int_t *ldvs, float *rconde, float *rcondv, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *bwork, armpl_int_t *info );
void cgeev_(char *jobvl, char *jobvr, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vl, armpl_int_t *ldvl, armpl_singlecomplex_t *vr, armpl_int_t *ldvr, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info );
void cgeevx_(char *balanc, char *jobvl, char *jobvr, char *sense, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vl, armpl_int_t *ldvl, armpl_singlecomplex_t *vr, armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info );
void cgegs_(char *jobvsl, char *jobvsr, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vsl, armpl_int_t *ldvsl, armpl_singlecomplex_t *vsr, armpl_int_t *ldvsr, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info );
void cgegv_(char *jobvl, char *jobvr, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vl, armpl_int_t *ldvl, armpl_singlecomplex_t *vr, armpl_int_t *ldvr, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info );
void cgehrd_(armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cgelqf_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cgelq_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *t, armpl_int_t *tsize, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cgels_(char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cgelsd_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, float *s, float *rcond, armpl_int_t *rank, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *info);
void cgelss_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, float *s, float *rcond, armpl_int_t *rank, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info);
void cgelsx_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *jpvt, float *rcond, armpl_int_t *rank, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info);
void cgelsy_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *jpvt, float *rcond, armpl_int_t *rank, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info);
void cgemlq_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, const armpl_singlecomplex_t *a, armpl_int_t *lda, const armpl_singlecomplex_t *t, armpl_int_t *tsize, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cgemqr_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, const armpl_singlecomplex_t *a, armpl_int_t *lda, const armpl_singlecomplex_t *t, armpl_int_t *tsize, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cgemqrt_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *nb, armpl_singlecomplex_t *v, armpl_int_t *ldv, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *info );
void cgeqlf_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cgeqp3_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *jpvt, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info);
void cgeqpf_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *jpvt, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info);
void cgeqr2p_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgeqrfp_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cgeqrf_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cgeqr_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *t, armpl_int_t *tsize, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cgeqrt2_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_int_t *info);
void cgeqrt3_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_int_t *info);
void cgeqrt_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nb, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgerfs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cgerfsx_(char *trans, char *equed, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, float *r, float *c, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cgerqf_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cgesdd_(char *jobz, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *s, armpl_singlecomplex_t *u, armpl_int_t *ldu, armpl_singlecomplex_t *vt, armpl_int_t *ldvt, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *info );
void cgesvd_(char *jobu, char *jobvt, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *s, armpl_singlecomplex_t *u, armpl_int_t *ldu, armpl_singlecomplex_t *vt, armpl_int_t *ldvt, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info );
void cgesv_(armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info);
void cgesvx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cgesvxx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cgetrf_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void cgetri_(armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cgetrs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void cgetsls_(char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cggbak_(char *job, char *side, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, armpl_int_t *m, armpl_singlecomplex_t *v, armpl_int_t *ldv, armpl_int_t *info );
void cggbal_(char *job, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *work, armpl_int_t *info );
void cgges_(char *jobvsl, char *jobvsr, char *sort, ARMPL_CGGES_SELCTG selctg, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *sdim, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vsl, armpl_int_t *ldvsl, armpl_singlecomplex_t *vsr, armpl_int_t *ldvsr, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *bwork, armpl_int_t *info );
void cggesx_(char *jobvsl, char *jobvsr, char *sort, ARMPL_CGGESX_SELCTG selctg, char *sense, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *sdim, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vsl, armpl_int_t *ldvsl, armpl_singlecomplex_t *vsr, armpl_int_t *ldvsr, float *rconde, float *rcondv, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *bwork, armpl_int_t *info );
void cggev_(char *jobvl, char *jobvr, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vl, armpl_int_t *ldvl, armpl_singlecomplex_t *vr, armpl_int_t *ldvr, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info );
void cggevx_(char *balanc, char *jobvl, char *jobvr, char *sense, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vl, armpl_int_t *ldvl, armpl_singlecomplex_t *vr, armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *bwork, armpl_int_t *info );
void cggglm_(armpl_int_t *n, armpl_int_t *m, armpl_int_t *p, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *d, armpl_singlecomplex_t *x, armpl_singlecomplex_t *y, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cgghrd_(char *compq, char *compz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *q, armpl_int_t *ldq, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_int_t *info );
void cgglse_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *p, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *c, armpl_singlecomplex_t *d, armpl_singlecomplex_t *x, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cggqrf_(armpl_int_t *n, armpl_int_t *m, armpl_int_t *p, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *taua, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *taub, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cggrqf_(armpl_int_t *m, armpl_int_t *p, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *taua, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *taub, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cggsvd_(char *jobu, char *jobv, char *jobq, armpl_int_t *m, armpl_int_t *n, armpl_int_t *p, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, float *alpha, float *beta, armpl_singlecomplex_t *u, armpl_int_t *ldu, armpl_singlecomplex_t *v, armpl_int_t *ldv, armpl_singlecomplex_t *q, armpl_int_t *ldq, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *info );
void cggsvp_(char *jobu, char *jobv, char *jobq, armpl_int_t *m, armpl_int_t *p, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, float *tola, float *tolb, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *u, armpl_int_t *ldu, armpl_singlecomplex_t *v, armpl_int_t *ldv, armpl_singlecomplex_t *q, armpl_int_t *ldq, armpl_int_t *iwork, float *rwork, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info );
void cgtcon_(char *norm, armpl_int_t *n, armpl_singlecomplex_t *dl, armpl_singlecomplex_t *d, armpl_singlecomplex_t *du, armpl_singlecomplex_t *du2, armpl_int_t *ipiv, float *anorm, float *rcond, armpl_singlecomplex_t *work, armpl_int_t *info );
void cgtrfs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *dl, armpl_singlecomplex_t *d, armpl_singlecomplex_t *du, armpl_singlecomplex_t *dlf, armpl_singlecomplex_t *df, armpl_singlecomplex_t *duf, armpl_singlecomplex_t *du2, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cgtsv_(armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *dl, armpl_singlecomplex_t *d, armpl_singlecomplex_t *du, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info);
void cgtsvx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *dl, armpl_singlecomplex_t *d, armpl_singlecomplex_t *du, armpl_singlecomplex_t *dlf, armpl_singlecomplex_t *df, armpl_singlecomplex_t *duf, armpl_singlecomplex_t *du2, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cgttrf_(armpl_int_t *n, armpl_singlecomplex_t *dl, armpl_singlecomplex_t *d, armpl_singlecomplex_t *du, armpl_singlecomplex_t *du2, armpl_int_t *ipiv, armpl_int_t *info);
void cgttrs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *dl, armpl_singlecomplex_t *d, armpl_singlecomplex_t *du, armpl_singlecomplex_t *du2, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void chbev_2stage_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info );
void chbev_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void chbevd_2stage_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void chbevd_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void chbevx_2stage_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *q, armpl_int_t *ldq, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void chbevx_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *q, armpl_int_t *ldq, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void chbgst_(char *vect, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *bb, armpl_int_t *ldbb, armpl_singlecomplex_t *x, armpl_int_t *ldx, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void chbgv_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *bb, armpl_int_t *ldbb, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void chbgvd_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *bb, armpl_int_t *ldbb, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void chbgvx_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *bb, armpl_int_t *ldbb, armpl_singlecomplex_t *q, armpl_int_t *ldq, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void chbtrd_(char *vect, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *d, float *e, armpl_singlecomplex_t *q, armpl_int_t *ldq, armpl_singlecomplex_t *work, armpl_int_t *info );
void checon_3_(char *uplo, armpl_int_t *n, const armpl_singlecomplex_t *a, armpl_int_t *lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, float *anorm, float *rcond, armpl_singlecomplex_t *work, armpl_int_t *info );
void checon_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, float *anorm, float *rcond, armpl_singlecomplex_t *work, armpl_int_t *info );
void cheequb_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *s, float *scond, float *amax, armpl_singlecomplex_t *work, armpl_int_t *info );
void cheev_2stage_(char *jobz, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *w, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info );
void cheev_(char *jobz, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *w, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info );
void cheevd_2stage_(char *jobz, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *w, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void cheevd_(char *jobz, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *w, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void cheevr_2stage_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_int_t *isuppz, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void cheevr_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_int_t *isuppz, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void cheevx_2stage_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void cheevx_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void chegst_(armpl_int_t *itype, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void chegv_2stage_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, float *w, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info );
void chegvd_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, float *w, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void chegv_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, float *w, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info );
void chegvx_(armpl_int_t *itype, char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void cherfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cherfsx_(char *uplo, char *equed, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, float *s, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void chesv_aa_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void chesv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void chesv_rk_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void chesvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info );
void chesvxx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cheswapr_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *i1, armpl_int_t *i2 );
void chetrd_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *d, float *e, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void chetrf_aa_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void chetrf_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void chetrf_rk_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void chetri2_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void chetri2x_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *nb, armpl_int_t *info );
void chetri_3_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void chetri_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *info );
void chetrs2_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *work, armpl_int_t *info );
void chetrs_3_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, const armpl_singlecomplex_t *a, armpl_int_t *lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void chetrs_aa_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, const armpl_singlecomplex_t *a, armpl_int_t *lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *work , armpl_int_t *lwork, armpl_int_t *info );
void chetrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void chfrk_(char *transr, char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, float *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, float *beta, armpl_singlecomplex_t *c );
void chgeqz_(char *job, char *compq, char *compz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *q, armpl_int_t *ldq, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info );
void chla_transtype_(char *ret_val, armpl_strlen_t ret_val_len, armpl_int_t *trans);
void chpcon_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, float *anorm, float *rcond, armpl_singlecomplex_t *work, armpl_int_t *info );
void chpev_(char *jobz, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void chpevd_(char *jobz, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void chpevx_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void chpgst_(armpl_int_t *itype, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *bp, armpl_int_t *info );
void chpgv_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *bp, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void chpgvd_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *bp, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void chpgvx_(armpl_int_t *itype, char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *bp, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void chprfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *afp, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void chpsv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void chpsvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *afp, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void chptrd_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, float *d, float *e, armpl_singlecomplex_t *tau, armpl_int_t *info );
void chptrf_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_int_t *info );
void chptri_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *info );
void chptrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void chsein_(char *side, char *eigsrc, char *initv, armpl_int_t *select, armpl_int_t *n, armpl_singlecomplex_t *h, armpl_int_t *ldh, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vl, armpl_int_t *ldvl, armpl_singlecomplex_t *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *ifaill, armpl_int_t *ifailr, armpl_int_t *info );
void chseqr_(char *job, char *compz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_singlecomplex_t *h, armpl_int_t *ldh, armpl_singlecomplex_t *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cla_gbamv_(armpl_int_t *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, float *alpha, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *x, armpl_int_t *incx, float *beta, float *y, armpl_int_t *incy);
float cla_gbrcond_c_(char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, float *c, int *capply, armpl_int_t *info, armpl_singlecomplex_t *work, float *rwork );
float cla_gbrcond_x_(char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, armpl_singlecomplex_t *x, armpl_int_t *info, armpl_singlecomplex_t *work, float *rwork );
void cla_gbrfsx_extended_(armpl_int_t *prec_type, armpl_int_t *trans_type, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, int *colequ, float *c, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *y, armpl_int_t *ldy, float *berr_out, armpl_int_t *n_norms, float *err_bnds_norm, float *err_bnds_comp, armpl_singlecomplex_t *res, float *ayb, armpl_singlecomplex_t *dy, armpl_singlecomplex_t *y_tail, float *rcond, armpl_int_t *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, armpl_int_t *info);
float cla_gbrpvgrw_(armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *ncols, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *afb, armpl_int_t *ldafb);
void cla_geamv_(armpl_int_t *trans, armpl_int_t *m, armpl_int_t *n, float *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *x, armpl_int_t *incx, float *beta, float *y, armpl_int_t *incy);
float cla_gercond_c_(char *trans, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, float *c, int *capply, armpl_int_t *info, armpl_singlecomplex_t *work, float *rwork );
float cla_gercond_x_(char *trans, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_singlecomplex_t *x, armpl_int_t *info, armpl_singlecomplex_t *work, float *rwork );
void cla_gerfsx_extended_(armpl_int_t *prec_type, armpl_int_t *trans_type, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, int *colequ, float *c, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *y, armpl_int_t *ldy, float *berr_out, armpl_int_t *n_norms, float *errs_n, float *errs_c, armpl_singlecomplex_t *res, float *ayb, armpl_singlecomplex_t *dy, armpl_singlecomplex_t *y_tail, float *rcond, armpl_int_t *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, armpl_int_t *info);
float cla_gerpvgrw_(armpl_int_t *n, armpl_int_t *ncols, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf);
void cla_heamv_(armpl_int_t *uplo, armpl_int_t *n, float *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *x, armpl_int_t *incx, float *beta, float *y, armpl_int_t *incy);
float cla_hercond_c_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, float *c, int *capply, armpl_int_t *info, armpl_singlecomplex_t *work, float *rwork );
float cla_hercond_x_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_singlecomplex_t *x, armpl_int_t *info, armpl_singlecomplex_t *work, float *rwork );
void cla_herfsx_extended_(armpl_int_t *prec_type, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, int *colequ, float *c, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *y, armpl_int_t *ldy, float *berr_out, armpl_int_t *n_norms, float *err_bnds_norm, float *err_bnds_comp, armpl_singlecomplex_t *res, float *ayb, armpl_singlecomplex_t *dy, armpl_singlecomplex_t *y_tail, float *rcond, armpl_int_t *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, armpl_int_t *info );
float cla_herpvgrw_(char *uplo, armpl_int_t *n, armpl_int_t *info, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, float *work );
void cla_lin_berr_(armpl_int_t *n, armpl_int_t *nz, armpl_int_t *nrhs, armpl_singlecomplex_t *res, float *ayb, float *berr);
float cla_porcond_c_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, float *c, int *capply, armpl_int_t *info, armpl_singlecomplex_t *work, float *rwork );
float cla_porcond_x_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_singlecomplex_t *x, armpl_int_t *info, armpl_singlecomplex_t *work, float *rwork );
void cla_porfsx_extended_(armpl_int_t *prec_type, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, int *colequ, float *c, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *y, armpl_int_t *ldy, float *berr_out, armpl_int_t *n_norms, float *err_bnds_norm, float *err_bnds_comp, armpl_singlecomplex_t *res, float *ayb, armpl_singlecomplex_t *dy, armpl_singlecomplex_t *y_tail, float *rcond, armpl_int_t *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, armpl_int_t *info );
float cla_porpvgrw_(char *uplo, armpl_int_t *ncols, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, float *work );
void cla_syamv_(armpl_int_t *uplo, armpl_int_t *n, float *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *x, armpl_int_t *incx, float *beta, float *y, armpl_int_t *incy);
float cla_syrcond_c_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, float *c, int *capply, armpl_int_t *info, armpl_singlecomplex_t *work, float *rwork );
float cla_syrcond_x_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_singlecomplex_t *x, armpl_int_t *info, armpl_singlecomplex_t *work, float *rwork );
void cla_syrfsx_extended_(armpl_int_t *prec_type, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, int *colequ, float *c, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *y, armpl_int_t *ldy, float *berr_out, armpl_int_t *n_norms, float *err_bnds_norm, float *err_bnds_comp, armpl_singlecomplex_t *res, float *ayb, armpl_singlecomplex_t *dy, armpl_singlecomplex_t *y_tail, float *rcond, armpl_int_t *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, armpl_int_t *info );
float cla_syrpvgrw_(char *uplo, armpl_int_t *n, armpl_int_t *info, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, float *work );
void cla_wwaddw_(armpl_int_t *n, armpl_singlecomplex_t *x, armpl_singlecomplex_t *y, armpl_singlecomplex_t *w);
float clanhf_(char *norm, char *transr, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, float *work );
void clapmr_(int *forwrd, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *ldx, armpl_int_t *k);
void clarfgp_(armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *tau);
void clarscl2_(armpl_int_t *m, armpl_int_t *n, float *d, armpl_singlecomplex_t *x, armpl_int_t *ldx);
void clascl2_(armpl_int_t *m, armpl_int_t *n, float *d, armpl_singlecomplex_t *x, armpl_int_t *ldx);
void cpbcon_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *anorm, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cpbequ_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *s, float *scond, float *amax, armpl_int_t *info );
void cpbrfs_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *afb, armpl_int_t *ldafb, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cpbstf_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *info );
void cpbsv_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void cpbsvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *afb, armpl_int_t *ldafb, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cpbtrf_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *info );
void cpbtrs_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void cpftrf_(char *transr, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *info );
void cpftri_(char *transr, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *info );
void cpftrs_(char *transr, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void cpocon_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *anorm, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cpoequ_(armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *s, float *scond, float *amax, armpl_int_t *info);
void cpoequb_(armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *s, float *scond, float *amax, armpl_int_t *info);
void cporfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cporfsx_(char *uplo, char *equed, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, float *s, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cposv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void cposvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cposvxx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cpotrf_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void cpotri_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void cpotrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void cppcon_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, float *anorm, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cppequ_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, float *s, float *scond, float *amax, armpl_int_t *info );
void cpprfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *afp, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cppsv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void cppsvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *afp, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cpptrf_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_int_t *info );
void cpptri_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_int_t *info );
void cpptrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void cpstf2_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, float *tol, float *work, armpl_int_t *info );
void cpstrf_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, float *tol, float *work, armpl_int_t *info );
void cptcon_(armpl_int_t *n, float *d, armpl_singlecomplex_t *e, float *anorm, float *rcond, float *rwork, armpl_int_t *info);
void cpteqr_(char *compz, armpl_int_t *n, float *d, float *e, armpl_singlecomplex_t *z, armpl_int_t *ldz, float *work, armpl_int_t *info );
void cptrfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *d, armpl_singlecomplex_t *e, float *df, armpl_singlecomplex_t *ef, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cptsv_(armpl_int_t *n, armpl_int_t *nrhs, float *d, armpl_singlecomplex_t *e, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info);
void cptsvx_(char *fact, armpl_int_t *n, armpl_int_t *nrhs, float *d, armpl_singlecomplex_t *e, float *df, armpl_singlecomplex_t *ef, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cpttrf_(armpl_int_t *n, float *d, armpl_singlecomplex_t *e, armpl_int_t *info);
void cpttrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *d, armpl_singlecomplex_t *e, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void cspcon_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, float *anorm, float *rcond, armpl_singlecomplex_t *work, armpl_int_t *info );
void csprfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *afp, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void cspsv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void cspsvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *afp, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void csptrf_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_int_t *info );
void csptri_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *info );
void csptrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void cstedc_(char *compz, armpl_int_t *n, float *d, float *e, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void cstegr_(char *jobz, char *range, armpl_int_t *n, float *d, float *e, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_int_t *isuppz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void cstein_(armpl_int_t *n, float *d, float *e, armpl_int_t *m, float *w, armpl_int_t *iblock, armpl_int_t *isplit, armpl_singlecomplex_t *z, armpl_int_t *ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info);
void csteqr_(char *compz, armpl_int_t *n, float *d, float *e, armpl_singlecomplex_t *z, armpl_int_t *ldz, float *work, armpl_int_t *info );
void csycon_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, float *anorm, float *rcond, armpl_singlecomplex_t *work, armpl_int_t *info );
void csyconv_(char *uplo, char *way, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *info );
void csyequb_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *s, float *scond, float *amax, armpl_singlecomplex_t *work, armpl_int_t *info );
void csyrfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void csyrfsx_(char *uplo, char *equed, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, float *s, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void csysv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void csysvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *info );
void csysvxx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void csyswapr_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *i1, armpl_int_t *i2 );
void csytrf_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void csytri2_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void csytri2x_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *nb, armpl_int_t *info );
void csytri_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t *info );
void csytrs2_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *work, armpl_int_t *info );
void csytrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void ctbcon_(char *norm, char *uplo, char *diag, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void ctbrfs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void ctbtrs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void ctfsm_(char *transr, char *side, char *uplo, char *trans, char *diag, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_singlecomplex_t *b, armpl_int_t *ldb );
void ctftri_(char *transr, char *uplo, char *diag, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *info );
void ctfttp_(char *transr, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *arf, armpl_singlecomplex_t *ap, armpl_int_t *info );
void ctfttr_(char *transr, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *arf, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void ctgevc_(char *side, char *howmny, armpl_int_t *select, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *vl, armpl_int_t *ldvl, armpl_singlecomplex_t *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void ctgexc_(armpl_int_t *wantq, armpl_int_t *wantz, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *q, armpl_int_t *ldq, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_int_t *ifst, armpl_int_t *ilst, armpl_int_t *info);
void ctgsen_(armpl_int_t *ijob, armpl_int_t *wantq, armpl_int_t *wantz, armpl_int_t *select, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *q, armpl_int_t *ldq, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_int_t *m, float *pl, float *pr, float *dif, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info);
void ctgsja_(char *jobu, char *jobv, char *jobq, armpl_int_t *m, armpl_int_t *p, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, float *tola, float *tolb, float *alpha, float *beta, armpl_singlecomplex_t *u, armpl_int_t *ldu, armpl_singlecomplex_t *v, armpl_int_t *ldv, armpl_singlecomplex_t *q, armpl_int_t *ldq, armpl_singlecomplex_t *work, armpl_int_t *ncycle, armpl_int_t *info );
void ctgsna_(char *job, char *howmny, armpl_int_t *select, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *vl, armpl_int_t *ldvl, armpl_singlecomplex_t *vr, armpl_int_t *ldvr, float *s, float *dif, armpl_int_t *mm, armpl_int_t *m, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void ctgsyl_(char *trans, armpl_int_t *ijob, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *d, armpl_int_t *ldd, armpl_singlecomplex_t *e, armpl_int_t *lde, armpl_singlecomplex_t *f, armpl_int_t *ldf, float *scale, float *dif, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void ctpcon_(char *norm, char *uplo, char *diag, armpl_int_t *n, armpl_singlecomplex_t *ap, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void ctpmqrt_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, armpl_int_t *nb, armpl_singlecomplex_t *v, armpl_int_t *ldv, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *work, armpl_int_t *info );
void ctpqrt2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_int_t *info);
void ctpqrt_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, armpl_int_t *nb, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_singlecomplex_t *work, armpl_int_t *info);
void ctprfb_(char *side, char *trans, char *direct, char *storev, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *v, armpl_int_t *ldv, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *work, armpl_int_t *ldwork );
void ctprfs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void ctptri_(char *uplo, char *diag, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_int_t *info );
void ctptrs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void ctpttf_(char *transr, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *arf, armpl_int_t *info );
void ctpttr_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void ctrcon_(char *norm, char *uplo, char *diag, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *rcond, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void ctrevc3_(char *side, char *howmny, armpl_int_t *select, armpl_int_t *n, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_singlecomplex_t *vl, armpl_int_t *ldvl, armpl_singlecomplex_t *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *lrwork, armpl_int_t *info );
void ctrevc_(char *side, char *howmny, armpl_int_t *select, armpl_int_t *n, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_singlecomplex_t *vl, armpl_int_t *ldvl, armpl_singlecomplex_t *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void ctrexc_(char *compq, armpl_int_t *n, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_singlecomplex_t *q, armpl_int_t *ldq, armpl_int_t *ifst, armpl_int_t *ilst, armpl_int_t *info );
void ctrrfs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *info );
void ctrsen_(char *job, char *compq, armpl_int_t *select, armpl_int_t *n, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_singlecomplex_t *q, armpl_int_t *ldq, armpl_singlecomplex_t *w, armpl_int_t *m, float *s, float *sep, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void ctrsna_(char *job, char *howmny, armpl_int_t *select, armpl_int_t *n, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_singlecomplex_t *vl, armpl_int_t *ldvl, armpl_singlecomplex_t *vr, armpl_int_t *ldvr, float *s, float *sep, armpl_int_t *mm, armpl_int_t *m, armpl_singlecomplex_t *work, armpl_int_t *ldwork, float *rwork, armpl_int_t *info );
void ctrsyl_(char *trana, char *tranb, armpl_int_t *isgn, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *c, armpl_int_t *ldc, float *scale, armpl_int_t *info );
void ctrtri_(char *uplo, char *diag, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void ctrtrs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void ctrttf_(char *transr, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *arf, armpl_int_t *info );
void ctrttp_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *ap, armpl_int_t *info );
void ctzrqf_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_int_t *info);
void ctzrzf_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cunbdb_(char *trans, char *signs, armpl_int_t *m, armpl_int_t *p, armpl_int_t *q, armpl_singlecomplex_t *x11, armpl_int_t *ldx11, armpl_singlecomplex_t *x12, armpl_int_t *ldx12, armpl_singlecomplex_t *x21, armpl_int_t *ldx21, armpl_singlecomplex_t *x22, armpl_int_t *ldx22, float *theta, float *phi, armpl_singlecomplex_t *taup1, armpl_singlecomplex_t *taup2, armpl_singlecomplex_t *tauq1, armpl_singlecomplex_t *tauq2, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cuncsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, char *signs, armpl_int_t *m, armpl_int_t *p, armpl_int_t *q, armpl_singlecomplex_t *x11, armpl_int_t *ldx11, armpl_singlecomplex_t *x12, armpl_int_t *ldx12, armpl_singlecomplex_t *x21, armpl_int_t *ldx21, armpl_singlecomplex_t *x22, armpl_int_t *ldx22, float *theta, armpl_singlecomplex_t *u1, armpl_int_t *ldu1, armpl_singlecomplex_t *u2, armpl_int_t *ldu2, armpl_singlecomplex_t *v1t, armpl_int_t *ldv1t, armpl_singlecomplex_t *v2t, armpl_int_t *ldv2t, armpl_singlecomplex_t *work, armpl_int_t *lwork, float *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *info );
void cungbr_(char *vect, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cunghr_(armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cunglq_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cungql_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cungqr_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cungrq_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void cungtr_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cunmbr_(char *vect, char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cunmhr_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cunmlq_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cunmql_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cunmqr_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cunmrq_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cunmrz_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cunmtr_(char *side, char *uplo, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void cupgtr_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *q, armpl_int_t *ldq, armpl_singlecomplex_t *work, armpl_int_t *info );
void cupmtr_(char *side, char *uplo, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *info );
void dbbcsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, armpl_int_t *m, armpl_int_t *p, armpl_int_t *q, double *theta, double *phi, double *u1, armpl_int_t *ldu1, double *u2, armpl_int_t *ldu2, double *v1t, armpl_int_t *ldv1t, double *v2t, armpl_int_t *ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dbdsdc_(char *uplo, char *compq, armpl_int_t *n, double *d, double *e, double *u, armpl_int_t *ldu, double *vt, armpl_int_t *ldvt, double *q, armpl_int_t *iq, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dbdsqr_(char *uplo, armpl_int_t *n, armpl_int_t *ncvt, armpl_int_t *nru, armpl_int_t *ncc, double *d, double *e, double *vt, armpl_int_t *ldvt, double *u, armpl_int_t *ldu, double *c, armpl_int_t *ldc, double *work, armpl_int_t *info );
void ddisna_(char *job, armpl_int_t *m, armpl_int_t *n, double *d, double *sep, armpl_int_t *info );
void dgbbrd_(char *vect, armpl_int_t *m, armpl_int_t *n, armpl_int_t *ncc, armpl_int_t *kl, armpl_int_t *ku, double *ab, armpl_int_t *ldab, double *d, double *e, double *q, armpl_int_t *ldq, double *pt, armpl_int_t *ldpt, double *c, armpl_int_t *ldc, double *work, armpl_int_t *info );
void dgbcon_(char *norm, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, double *ab, armpl_int_t *ldab, armpl_int_t *ipiv, double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dgbequ_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, double *ab, armpl_int_t *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void dgbequb_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, double *ab, armpl_int_t *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void dgbrfs_(char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, double *ab, armpl_int_t *ldab, double *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dgbrfsx_(char *trans, char *equed, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, double *ab, armpl_int_t *ldab, double *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, double *r, double *c, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dgbsv_(armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, double *ab, armpl_int_t *ldab, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, armpl_int_t *info);
void dgbsvx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, double *ab, armpl_int_t *ldab, double *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dgbsvxx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, double *ab, armpl_int_t *ldab, double *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dgbtrf_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, double *ab, armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void dgbtrs_(char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, double *ab, armpl_int_t *ldab, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dgebak_(char *job, char *side, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, armpl_int_t *m, double *v, armpl_int_t *ldv, armpl_int_t *info );
void dgebal_(char *job, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, armpl_int_t *info );
void dgebrd_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *d, double *e, double *tauq, double *taup, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dgecon_(char *norm, armpl_int_t *n, double *a, armpl_int_t *lda, double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dgeequb_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void dgeequ_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void dgees_(char *jobvs, char *sort, ARMPL_DGEES_SELECT select, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *sdim, double *wr, double *wi, double *vs, armpl_int_t *ldvs, double *work, armpl_int_t *lwork, armpl_int_t *bwork, armpl_int_t *info );
void dgeesx_(char *jobvs, char *sort, ARMPL_DGEESX_SELECT select, char *sense, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *sdim, double *wr, double *wi, double *vs, armpl_int_t *ldvs, double *rconde, double *rcondv, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *bwork, armpl_int_t *info );
void dgeev_(char *jobvl, char *jobvr, armpl_int_t *n, double *a, armpl_int_t *lda, double *wr, double *wi, double *vl, armpl_int_t *ldvl, double *vr, armpl_int_t *ldvr, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dgeevx_(char *balanc, char *jobvl, char *jobvr, char *sense, armpl_int_t *n, double *a, armpl_int_t *lda, double *wr, double *wi, double *vl, armpl_int_t *ldvl, double *vr, armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void dgegs_(char *jobvsl, char *jobvsr, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *alphar, double *alphai, double *beta, double *vsl, armpl_int_t *ldvsl, double *vsr, armpl_int_t *ldvsr, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dgegv_(char *jobvl, char *jobvr, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *alphar, double *alphai, double *beta, double *vl, armpl_int_t *ldvl, double *vr, armpl_int_t *ldvr, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dgehrd_(armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dgejsv_(char *joba, char *jobu, char *jobv, char *jobr, char *jobt, char *jobp, armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *sva, double *u, armpl_int_t *ldu, double *v, armpl_int_t *ldv, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void dgelqf_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dgelq_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *t, armpl_int_t *tsize, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dgels_(char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dgelsd_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *s, double *rcond, armpl_int_t *rank, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info);
void dgelss_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *s, double *rcond, armpl_int_t *rank, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dgelsx_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, armpl_int_t *jpvt, double *rcond, armpl_int_t *rank, double *work, armpl_int_t *info);
void dgelsy_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, armpl_int_t *jpvt, double *rcond, armpl_int_t *rank, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dgemlq_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, const double *a, armpl_int_t *lda, const double *t, armpl_int_t *tsize, double *c, armpl_int_t *ldc, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dgemqr_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, const double *a, armpl_int_t *lda, const double *t, armpl_int_t *tsize, double *c, armpl_int_t *ldc, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dgemqrt_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *nb, double *v, armpl_int_t *ldv, double *t, armpl_int_t *ldt, double *c, armpl_int_t *ldc, double *work, armpl_int_t *info );
void dgeqlf_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dgeqp3_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *jpvt, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dgeqpf_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *jpvt, double *tau, double *work, armpl_int_t *info);
void dgeqr2p_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dgeqrfp_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dgeqrf_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dgeqr_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *t, armpl_int_t *tsize, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dgeqrt2_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *t, armpl_int_t *ldt, armpl_int_t *info);
void dgeqrt3_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *t, armpl_int_t *ldt, armpl_int_t *info);
void dgeqrt_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nb, double *a, armpl_int_t *lda, double *t, armpl_int_t *ldt, double *work, armpl_int_t *info);
void dgerfs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dgerfsx_(char *trans, char *equed, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, armpl_int_t *ipiv, double *r, double *c, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dgerqf_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dgesdd_(char *jobz, armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *s, double *u, armpl_int_t *ldu, double *vt, armpl_int_t *ldvt, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void dgesvd_(char *jobu, char *jobvt, armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *s, double *u, armpl_int_t *ldu, double *vt, armpl_int_t *ldvt, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dgesvj_(char *joba, char *jobu, char *jobv, armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *sva, armpl_int_t *mv, double *v, armpl_int_t *ldv, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dgesv_(armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, armpl_int_t *info);
void dgesvx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dgesvxx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dgetrf_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void dgetri_(armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dgetrs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dgetsls_(char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dggbak_(char *job, char *side, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, armpl_int_t *m, double *v, armpl_int_t *ldv, armpl_int_t *info );
void dggbal_(char *job, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *work, armpl_int_t *info );
void dgges_(char *jobvsl, char *jobvsr, char *sort, ARMPL_DGGES_DELCTG delctg, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, armpl_int_t *ldvsl, double *vsr, armpl_int_t *ldvsr, double *work, armpl_int_t *lwork, armpl_int_t *bwork, armpl_int_t *info );
void dggesx_(char *jobvsl, char *jobvsr, char *sort, ARMPL_DGGESX_DELCTG delctg, char *sense, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, armpl_int_t *ldvsl, double *vsr, armpl_int_t *ldvsr, double *rconde, double *rcondv, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *bwork, armpl_int_t *info );
void dggev_(char *jobvl, char *jobvr, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *alphar, double *alphai, double *beta, double *vl, armpl_int_t *ldvl, double *vr, armpl_int_t *ldvr, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dggevx_(char *balanc, char *jobvl, char *jobvr, char *sense, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *alphar, double *alphai, double *beta, double *vl, armpl_int_t *ldvl, double *vr, armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *bwork, armpl_int_t *info );
void dggglm_(armpl_int_t *n, armpl_int_t *m, armpl_int_t *p, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *d, double *x, double *y, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dgghrd_(char *compq, char *compz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *q, armpl_int_t *ldq, double *z, armpl_int_t *ldz, armpl_int_t *info );
void dgglse_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *p, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *c, double *d, double *x, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dggqrf_(armpl_int_t *n, armpl_int_t *m, armpl_int_t *p, double *a, armpl_int_t *lda, double *taua, double *b, armpl_int_t *ldb, double *taub, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dggrqf_(armpl_int_t *m, armpl_int_t *p, armpl_int_t *n, double *a, armpl_int_t *lda, double *taua, double *b, armpl_int_t *ldb, double *taub, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dggsvd_(char *jobu, char *jobv, char *jobq, armpl_int_t *m, armpl_int_t *n, armpl_int_t *p, armpl_int_t *k, armpl_int_t *l, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *alpha, double *beta, double *u, armpl_int_t *ldu, double *v, armpl_int_t *ldv, double *q, armpl_int_t *ldq, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dggsvp_(char *jobu, char *jobv, char *jobq, armpl_int_t *m, armpl_int_t *p, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *tola, double *tolb, armpl_int_t *k, armpl_int_t *l, double *u, armpl_int_t *ldu, double *v, armpl_int_t *ldv, double *q, armpl_int_t *ldq, armpl_int_t *iwork, double *tau, double *work, armpl_int_t *info );
void dgsvj0_(char *jobv, armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *d, double *sva, armpl_int_t *mv, double *v, armpl_int_t *ldv, double *eps, double *sfmin, double *tol, armpl_int_t *nsweep, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dgsvj1_(char *jobv, armpl_int_t *m, armpl_int_t *n, armpl_int_t *n1, double *a, armpl_int_t *lda, double *d, double *sva, armpl_int_t *mv, double *v, armpl_int_t *ldv, double *eps, double *sfmin, double *tol, armpl_int_t *nsweep, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dgtcon_(char *norm, armpl_int_t *n, double *dl, double *d, double *du, double *du2, armpl_int_t *ipiv, double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dgtrfs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, double *dl, double *d, double *du, double *dlf, double *df, double *duf, double *du2, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dgtsv_(armpl_int_t *n, armpl_int_t *nrhs, double *dl, double *d, double *du, double *b, armpl_int_t *ldb, armpl_int_t *info);
void dgtsvx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *nrhs, double *dl, double *d, double *du, double *dlf, double *df, double *duf, double *du2, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dgttrf_(armpl_int_t *n, double *dl, double *d, double *du, double *du2, armpl_int_t *ipiv, armpl_int_t *info);
void dgttrs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, double *dl, double *d, double *du, double *du2, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dhgeqz_(char *job, char *compq, char *compz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *alphar, double *alphai, double *beta, double *q, armpl_int_t *ldq, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dhsein_(char *side, char *eigsrc, char *initv, armpl_int_t *select, armpl_int_t *n, double *h, armpl_int_t *ldh, double *wr, double *wi, double *vl, armpl_int_t *ldvl, double *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, double *work, armpl_int_t *ifaill, armpl_int_t *ifailr, armpl_int_t *info );
void dhseqr_(char *job, char *compz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, double *h, armpl_int_t *ldh, double *wr, double *wi, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *info );
armpl_int_t disnan_(double *din);
void dla_gbamv_(armpl_int_t *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, double *alpha, double *ab, armpl_int_t *ldab, double *x, armpl_int_t *incx, double *beta, double *y, armpl_int_t *incy);
double dla_gbrcond_(char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, double *ab, armpl_int_t *ldab, double *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, armpl_int_t *cmode, double *c, armpl_int_t *info, double *work, armpl_int_t *iwork );
void dla_gbrfsx_extended_(armpl_int_t *prec_type, armpl_int_t *trans_type, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, double *ab, armpl_int_t *ldab, double *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, int *colequ, double *c, double *b, armpl_int_t *ldb, double *y, armpl_int_t *ldy, double *berr_out, armpl_int_t *n_norms, double *err_bnds_norm, double *err_bnds_comp, double *res, double *ayb, double *dy, double *y_tail, double *rcond, armpl_int_t *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, armpl_int_t *info);
double dla_gbrpvgrw_(armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *ncols, double *ab, armpl_int_t *ldab, double *afb, armpl_int_t *ldafb);
void dla_geamv_(armpl_int_t *trans, armpl_int_t *m, armpl_int_t *n, double *alpha, double *a, armpl_int_t *lda, double *x, armpl_int_t *incx, double *beta, double *y, armpl_int_t *incy);
double dla_gercond_(char *trans, armpl_int_t *n, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_int_t *cmode, double *c, armpl_int_t *info, double *work, armpl_int_t *iwork );
void dla_gerfsx_extended_(armpl_int_t *prec_type, armpl_int_t *trans_type, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, armpl_int_t *ipiv, int *colequ, double *c, double *b, armpl_int_t *ldb, double *y, armpl_int_t *ldy, double *berr_out, armpl_int_t *n_norms, double *errs_n, double *errs_c, double *res, double *ayb, double *dy, double *y_tail, double *rcond, armpl_int_t *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, armpl_int_t *info);
double dla_gerpvgrw_(armpl_int_t *n, armpl_int_t *ncols, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf);
void dla_lin_berr_(armpl_int_t *n, armpl_int_t *nz, armpl_int_t *nrhs, double *res, double *ayb, double *berr);
double dla_porcond_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, armpl_int_t *cmode, double *c, armpl_int_t *info, double *work, armpl_int_t *iwork );
void dla_porfsx_extended_(armpl_int_t *prec_type, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, int *colequ, double *c, double *b, armpl_int_t *ldb, double *y, armpl_int_t *ldy, double *berr_out, armpl_int_t *n_norms, double *err_bnds_norm, double *err_bnds_comp, double *res, double *ayb, double *dy, double *y_tail, double *rcond, armpl_int_t *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, armpl_int_t *info );
double dla_porpvgrw_(char *uplo, armpl_int_t *ncols, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, double *work );
void dla_syamv_(armpl_int_t *uplo, armpl_int_t *n, double *alpha, double *a, armpl_int_t *lda, double *x, armpl_int_t *incx, double *beta, double *y, armpl_int_t *incy);
double dla_syrcond_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_int_t *cmode, double *c, armpl_int_t *info, double *work, armpl_int_t *iwork );
void dla_syrfsx_extended_(armpl_int_t *prec_type, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, armpl_int_t *ipiv, int *colequ, double *c, double *b, armpl_int_t *ldb, double *y, armpl_int_t *ldy, double *berr_out, armpl_int_t *n_norms, double *err_bnds_norm, double *err_bnds_comp, double *res, double *ayb, double *dy, double *y_tail, double *rcond, armpl_int_t *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, armpl_int_t *info );
double dla_syrpvgrw_(char *uplo, armpl_int_t *n, armpl_int_t *info, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, armpl_int_t *ipiv, double *work );
void dla_wwaddw_(armpl_int_t *n, double *x, double *y, double *w);
double dlamch_(char *cmach );
double dlansf_(char *norm, char *transr, char *uplo, armpl_int_t *n, double *a, double *work );
void dlapmr_(int *forwrd, armpl_int_t *m, armpl_int_t *n, double *x, armpl_int_t *ldx, armpl_int_t *k);
void dlarfgp_(armpl_int_t *n, double *alpha, double *x, armpl_int_t *incx, double *tau);
void dlarft_(char *direct, char *storev, armpl_int_t *n, armpl_int_t *k, double *v, armpl_int_t *ldv, double *tau, double *t, armpl_int_t *ldt );
void dlarscl2_(armpl_int_t *m, armpl_int_t *n, double *d, double *x, armpl_int_t *ldx);
void dlartgp_(double *f, double *g, double *cs, double *sn, double *r_);
void dlartgs_(double *x, double *y, double *sigma, double *cs, double *sn);
void dlascl2_(armpl_int_t *m, armpl_int_t *n, double *d, double *x, armpl_int_t *ldx);
void dlasrt_(char *id, armpl_int_t *n, double *d, armpl_int_t *info );
void dlassq_(armpl_int_t *n, double *x, armpl_int_t *incx, double *scale, double *sumsq);
void dlat2s_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, float *sa, armpl_int_t *ldsa, armpl_int_t *info );
void dopgtr_(char *uplo, armpl_int_t *n, double *ap, double *tau, double *q, armpl_int_t *ldq, double *work, armpl_int_t *info );
void dopmtr_(char *side, char *uplo, char *trans, armpl_int_t *m, armpl_int_t *n, double *ap, double *tau, double *c, armpl_int_t *ldc, double *work, armpl_int_t *info );
void dorbdb_(char *trans, char *signs, armpl_int_t *m, armpl_int_t *p, armpl_int_t *q, double *x11, armpl_int_t *ldx11, double *x12, armpl_int_t *ldx12, double *x21, armpl_int_t *ldx21, double *x22, armpl_int_t *ldx22, double *theta, double *phi, double *taup1, double *taup2, double *tauq1, double *tauq2, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dorcsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, char *signs, armpl_int_t *m, armpl_int_t *p, armpl_int_t *q, double *x11, armpl_int_t *ldx11, double *x12, armpl_int_t *ldx12, double *x21, armpl_int_t *ldx21, double *x22, armpl_int_t *ldx22, double *theta, double *u1, armpl_int_t *ldu1, double *u2, armpl_int_t *ldu2, double *v1t, armpl_int_t *ldv1t, double *v2t, armpl_int_t *ldv2t, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void dorgbr_(char *vect, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dorghr_(armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dorglq_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dorgql_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dorgqr_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dorgrq_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dorgtr_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dormbr_(char *vect, char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *c, armpl_int_t *ldc, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dormhr_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, double *a, armpl_int_t *lda, double *tau, double *c, armpl_int_t *ldc, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dormlq_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *c, armpl_int_t *ldc, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dormql_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *c, armpl_int_t *ldc, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dormqr_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *c, armpl_int_t *ldc, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dormr3_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, double *a, armpl_int_t *lda, double *tau, double *c, armpl_int_t *ldc, double *work, armpl_int_t *info );
void dormrq_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *c, armpl_int_t *ldc, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dormrz_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, double *a, armpl_int_t *lda, double *tau, double *c, armpl_int_t *ldc, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dormtr_(char *side, char *uplo, char *trans, armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *tau, double *c, armpl_int_t *ldc, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dpbcon_(char *uplo, armpl_int_t *n, armpl_int_t *kd, double *ab, armpl_int_t *ldab, double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dpbequ_(char *uplo, armpl_int_t *n, armpl_int_t *kd, double *ab, armpl_int_t *ldab, double *s, double *scond, double *amax, armpl_int_t *info );
void dpbrfs_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, double *ab, armpl_int_t *ldab, double *afb, armpl_int_t *ldafb, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dpbstf_(char *uplo, armpl_int_t *n, armpl_int_t *kd, double *ab, armpl_int_t *ldab, armpl_int_t *info );
void dpbsv_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, double *ab, armpl_int_t *ldab, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dpbsvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, double *ab, armpl_int_t *ldab, double *afb, armpl_int_t *ldafb, char *equed, double *s, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dpbtrf_(char *uplo, armpl_int_t *n, armpl_int_t *kd, double *ab, armpl_int_t *ldab, armpl_int_t *info );
void dpbtrs_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, double *ab, armpl_int_t *ldab, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dpftrf_(char *transr, char *uplo, armpl_int_t *n, double *a, armpl_int_t *info );
void dpftri_(char *transr, char *uplo, armpl_int_t *n, double *a, armpl_int_t *info );
void dpftrs_(char *transr, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dpocon_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dpoequ_(armpl_int_t *n, double *a, armpl_int_t *lda, double *s, double *scond, double *amax, armpl_int_t *info);
void dpoequb_(armpl_int_t *n, double *a, armpl_int_t *lda, double *s, double *scond, double *amax, armpl_int_t *info);
void dporfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dporfsx_(char *uplo, char *equed, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, double *s, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dposv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dposvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, char *equed, double *s, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dposvxx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, char *equed, double *s, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dpotrf_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *info );
void dpotri_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *info );
void dpotrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dppcon_(char *uplo, armpl_int_t *n, double *ap, double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dppequ_(char *uplo, armpl_int_t *n, double *ap, double *s, double *scond, double *amax, armpl_int_t *info );
void dpprfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *ap, double *afp, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dppsv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *ap, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dppsvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *ap, double *afp, char *equed, double *s, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dpptrf_(char *uplo, armpl_int_t *n, double *ap, armpl_int_t *info );
void dpptri_(char *uplo, armpl_int_t *n, double *ap, armpl_int_t *info );
void dpptrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *ap, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dpstf2_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, double *tol, double *work, armpl_int_t *info );
void dpstrf_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, double *tol, double *work, armpl_int_t *info );
void dptcon_(armpl_int_t *n, double *d, double *e, double *anorm, double *rcond, double *work, armpl_int_t *info);
void dpteqr_(char *compz, armpl_int_t *n, double *d, double *e, double *z, armpl_int_t *ldz, double *work, armpl_int_t *info );
void dptrfs_(armpl_int_t *n, armpl_int_t *nrhs, double *d, double *e, double *df, double *ef, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *info);
void dptsv_(armpl_int_t *n, armpl_int_t *nrhs, double *d, double *e, double *b, armpl_int_t *ldb, armpl_int_t *info);
void dptsvx_(char *fact, armpl_int_t *n, armpl_int_t *nrhs, double *d, double *e, double *df, double *ef, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *info );
void dpttrf_(armpl_int_t *n, double *d, double *e, armpl_int_t *info);
void dpttrs_(armpl_int_t *n, armpl_int_t *nrhs, double *d, double *e, double *b, armpl_int_t *ldb, armpl_int_t *info);
void dsbev_2stage_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, double *ab, armpl_int_t *ldab, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dsbev_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, double *ab, armpl_int_t *ldab, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *info );
void dsbevd_2stage_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, double *ab, armpl_int_t *ldab, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dsbevd_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, double *ab, armpl_int_t *ldab, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dsbevx_2stage_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_int_t *kd, double *ab, armpl_int_t *ldab, double *q, armpl_int_t *ldq, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void dsbevx_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_int_t *kd, double *ab, armpl_int_t *ldab, double *q, armpl_int_t *ldq, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void dsbgst_(char *vect, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, double *ab, armpl_int_t *ldab, double *bb, armpl_int_t *ldbb, double *x, armpl_int_t *ldx, double *work, armpl_int_t *info );
void dsbgv_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, double *ab, armpl_int_t *ldab, double *bb, armpl_int_t *ldbb, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *info );
void dsbgvd_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, double *ab, armpl_int_t *ldab, double *bb, armpl_int_t *ldbb, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dsbgvx_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, double *ab, armpl_int_t *ldab, double *bb, armpl_int_t *ldbb, double *q, armpl_int_t *ldq, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void dsbtrd_(char *vect, char *uplo, armpl_int_t *n, armpl_int_t *kd, double *ab, armpl_int_t *ldab, double *d, double *e, double *q, armpl_int_t *ldq, double *work, armpl_int_t *info );
double dsecnd_(void);
void dsfrk_(char *transr, char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, double *alpha, double *a, armpl_int_t *lda, double *beta, double *c );
void dsgesv_(armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *work, float *swork, armpl_int_t *iter, armpl_int_t *info);
void dspcon_(char *uplo, armpl_int_t *n, double *ap, armpl_int_t *ipiv, double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dspev_(char *jobz, char *uplo, armpl_int_t *n, double *ap, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *info );
void dspevd_(char *jobz, char *uplo, armpl_int_t *n, double *ap, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dspevx_(char *jobz, char *range, char *uplo, armpl_int_t *n, double *ap, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void dspgst_(armpl_int_t *itype, char *uplo, armpl_int_t *n, double *ap, double *bp, armpl_int_t *info );
void dspgv_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, double *ap, double *bp, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *info );
void dspgvd_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, double *ap, double *bp, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dspgvx_(armpl_int_t *itype, char *jobz, char *range, char *uplo, armpl_int_t *n, double *ap, double *bp, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void dsposv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *work, float *swork, armpl_int_t *iter, armpl_int_t *info );
void dsprfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *ap, double *afp, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dspsv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *ap, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dspsvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *ap, double *afp, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dsptrd_(char *uplo, armpl_int_t *n, double *ap, double *d, double *e, double *tau, armpl_int_t *info );
void dsptrf_(char *uplo, armpl_int_t *n, double *ap, armpl_int_t *ipiv, armpl_int_t *info );
void dsptri_(char *uplo, armpl_int_t *n, double *ap, armpl_int_t *ipiv, double *work, armpl_int_t *info );
void dsptrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *ap, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dstebz_(char *range, char *order, armpl_int_t *n, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, double *d, double *e, armpl_int_t *m, armpl_int_t *nsplit, double *w, armpl_int_t *iblock, armpl_int_t *isplit, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dstedc_(char *compz, armpl_int_t *n, double *d, double *e, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dstegr_(char *jobz, char *range, armpl_int_t *n, double *d, double *e, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, double *z, armpl_int_t *ldz, armpl_int_t *isuppz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dstein_(armpl_int_t *n, double *d, double *e, armpl_int_t *m, double *w, armpl_int_t *iblock, armpl_int_t *isplit, double *z, armpl_int_t *ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info);
void dstemr_(char *jobz, char *range, armpl_int_t *n, double *d, double *e, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, armpl_int_t *m, double *w, double *z, armpl_int_t *ldz, armpl_int_t *nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dsteqr_(char *compz, armpl_int_t *n, double *d, double *e, double *z, armpl_int_t *ldz, double *work, armpl_int_t *info );
void dsterf_(armpl_int_t *n, double *d, double *e, armpl_int_t *info);
void dstev_(char *jobz, armpl_int_t *n, double *d, double *e, double *z, armpl_int_t *ldz, double *work, armpl_int_t *info );
void dstevd_(char *jobz, armpl_int_t *n, double *d, double *e, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dstevr_(char *jobz, char *range, armpl_int_t *n, double *d, double *e, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, double *z, armpl_int_t *ldz, armpl_int_t *isuppz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dstevx_(char *jobz, char *range, armpl_int_t *n, double *d, double *e, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void dsycon_3_(char *uplo, armpl_int_t *n, const double *a, armpl_int_t *lda, const double *e, const armpl_int_t *ipiv, double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dsycon_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *anorm, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dsyconv_(char *uplo, char *way, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *work, armpl_int_t *info );
void dsyequb_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *s, double *scond, double *amax, double *work, armpl_int_t *info );
void dsyev_2stage_(char *jobz, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *w, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dsyev_(char *jobz, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *w, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dsyevd_2stage_(char *jobz, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *w, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dsyevd_(char *jobz, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *w, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dsyevr_2stage_(char *jobz, char *range, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, double *z, armpl_int_t *ldz, armpl_int_t *isuppz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dsyevr_(char *jobz, char *range, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, double *z, armpl_int_t *ldz, armpl_int_t *isuppz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dsyevx_2stage_(char *jobz, char *range, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void dsyevx_(char *jobz, char *range, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void dsygst_(armpl_int_t *itype, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dsygv_2stage_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *w, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dsygvd_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *w, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dsygv_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *w, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dsygvx_(armpl_int_t *itype, char *jobz, char *range, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void dsyrfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dsyrfsx_(char *uplo, char *equed, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, armpl_int_t *ipiv, double *s, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dsysv_aa_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dsysv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dsysv_rk_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *e, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dsysvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void dsysvxx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *af, armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, double *s, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dsyswapr_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *i1, armpl_int_t *i2 );
void dsytrd_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *d, double *e, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dsytrf_aa_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dsytrf_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dsytrf_rk_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *e, armpl_int_t *ipiv, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dsytri2_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dsytri2x_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *work, armpl_int_t *nb, armpl_int_t *info );
void dsytri_3_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, const double *e, const armpl_int_t *ipiv, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dsytri_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *work, armpl_int_t *info );
void dsytrs2_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, double *work, armpl_int_t *info );
void dsytrs_3_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, const double *a, armpl_int_t *lda, const double *e, const armpl_int_t *ipiv, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dsytrs_aa_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, const double *a, armpl_int_t *lda, const armpl_int_t *ipiv, double *b, armpl_int_t *ldb, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dsytrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dtbcon_(char *norm, char *uplo, char *diag, armpl_int_t *n, armpl_int_t *kd, double *ab, armpl_int_t *ldab, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dtbrfs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, double *ab, armpl_int_t *ldab, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dtbtrs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, double *ab, armpl_int_t *ldab, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dtfsm_(char *transr, char *side, char *uplo, char *trans, char *diag, armpl_int_t *m, armpl_int_t *n, double *alpha, double *a, double *b, armpl_int_t *ldb );
void dtftri_(char *transr, char *uplo, char *diag, armpl_int_t *n, double *a, armpl_int_t *info );
void dtfttp_(char *transr, char *uplo, armpl_int_t *n, double *arf, double *ap, armpl_int_t *info );
void dtfttr_(char *transr, char *uplo, armpl_int_t *n, double *arf, double *a, armpl_int_t *lda, armpl_int_t *info );
void dtgevc_(char *side, char *howmny, armpl_int_t *select, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *vl, armpl_int_t *ldvl, double *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, double *work, armpl_int_t *info );
void dtgexc_(armpl_int_t *wantq, armpl_int_t *wantz, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *q, armpl_int_t *ldq, double *z, armpl_int_t *ldz, armpl_int_t *ifst, armpl_int_t *ilst, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dtgsen_(armpl_int_t *ijob, armpl_int_t *wantq, armpl_int_t *wantz, armpl_int_t *select, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *alphar, double *alphai, double *beta, double *q, armpl_int_t *ldq, double *z, armpl_int_t *ldz, armpl_int_t *m, double *pl, double *pr, double *dif, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info);
void dtgsja_(char *jobu, char *jobv, char *jobq, armpl_int_t *m, armpl_int_t *p, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *tola, double *tolb, double *alpha, double *beta, double *u, armpl_int_t *ldu, double *v, armpl_int_t *ldv, double *q, armpl_int_t *ldq, double *work, armpl_int_t *ncycle, armpl_int_t *info );
void dtgsna_(char *job, char *howmny, armpl_int_t *select, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *vl, armpl_int_t *ldvl, double *vr, armpl_int_t *ldvr, double *s, double *dif, armpl_int_t *mm, armpl_int_t *m, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void dtgsyl_(char *trans, armpl_int_t *ijob, armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *c, armpl_int_t *ldc, double *d, armpl_int_t *ldd, double *e, armpl_int_t *lde, double *f, armpl_int_t *ldf, double *scale, double *dif, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void dtpcon_(char *norm, char *uplo, char *diag, armpl_int_t *n, double *ap, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dtpmqrt_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, armpl_int_t *nb, double *v, armpl_int_t *ldv, double *t, armpl_int_t *ldt, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *work, armpl_int_t *info );
void dtpqrt2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *t, armpl_int_t *ldt, armpl_int_t *info);
void dtpqrt_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, armpl_int_t *nb, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *t, armpl_int_t *ldt, double *work, armpl_int_t *info);
void dtprfb_(char *side, char *trans, char *direct, char *storev, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, double *v, armpl_int_t *ldv, double *t, armpl_int_t *ldt, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *work, armpl_int_t *ldwork );
void dtprfs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, double *ap, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dtptri_(char *uplo, char *diag, armpl_int_t *n, double *ap, armpl_int_t *info );
void dtptrs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, double *ap, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dtpttf_(char *transr, char *uplo, armpl_int_t *n, double *ap, double *arf, armpl_int_t *info );
void dtpttr_(char *uplo, armpl_int_t *n, double *ap, double *a, armpl_int_t *lda, armpl_int_t *info );
void dtrcon_(char *norm, char *uplo, char *diag, armpl_int_t *n, double *a, armpl_int_t *lda, double *rcond, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dtrevc3_(char *side, char *howmny, armpl_int_t *select, armpl_int_t *n, double *t, armpl_int_t *ldt, double *vl, armpl_int_t *ldvl, double *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, double *work, armpl_int_t *lwork, armpl_int_t *info );
void dtrevc_(char *side, char *howmny, armpl_int_t *select, armpl_int_t *n, double *t, armpl_int_t *ldt, double *vl, armpl_int_t *ldvl, double *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, double *work, armpl_int_t *info );
void dtrexc_(char *compq, armpl_int_t *n, double *t, armpl_int_t *ldt, double *q, armpl_int_t *ldq, armpl_int_t *ifst, armpl_int_t *ilst, double *work, armpl_int_t *info );
void dtrrfs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *x, armpl_int_t *ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dtrsen_(char *job, char *compq, armpl_int_t *select, armpl_int_t *n, double *t, armpl_int_t *ldt, double *q, armpl_int_t *ldq, double *wr, double *wi, armpl_int_t *m, double *s, double *sep, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void dtrsna_(char *job, char *howmny, armpl_int_t *select, armpl_int_t *n, double *t, armpl_int_t *ldt, double *vl, armpl_int_t *ldvl, double *vr, armpl_int_t *ldvr, double *s, double *sep, armpl_int_t *mm, armpl_int_t *m, double *work, armpl_int_t *ldwork, armpl_int_t *iwork, armpl_int_t *info );
void dtrsyl_(char *trana, char *tranb, armpl_int_t *isgn, armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *c, armpl_int_t *ldc, double *scale, armpl_int_t *info );
void dtrtri_(char *uplo, char *diag, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *info );
void dtrtrs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dtrttf_(char *transr, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *arf, armpl_int_t *info );
void dtrttp_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *ap, armpl_int_t *info );
void dtzrqf_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *tau, armpl_int_t *info);
void dtzrzf_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *lwork, armpl_int_t *info);
armpl_int_t ilaenv_(armpl_int_t *ispec, const char *name, const char *opts, armpl_int_t *n1, armpl_int_t *n2, armpl_int_t *n3, armpl_int_t *n4 );
void ilaenvset_(armpl_int_t *ispec, const char *name, const char *opts, armpl_int_t *n1, armpl_int_t *n2, armpl_int_t *n3, armpl_int_t *n4, armpl_int_t *nvalue, armpl_int_t *info );
void ilaver_(armpl_int_t *vers_major, armpl_int_t *vers_minor, armpl_int_t *vers_patch);
armpl_int_t ilaclc_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda);
armpl_int_t ilaclr_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda);
armpl_int_t iladiag_(char *diag );
armpl_int_t iladlc_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda);
armpl_int_t iladlr_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda);
armpl_int_t ilaprec_(char *prec );
armpl_int_t ilaslc_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda);
armpl_int_t ilaslr_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda);
armpl_int_t ilatrans_(char *trans );
armpl_int_t ilauplo_(char *uplo );
armpl_int_t ilazlc_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda);
armpl_int_t ilazlr_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda);
void sbbcsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, armpl_int_t *m, armpl_int_t *p, armpl_int_t *q, float *theta, float *phi, float *u1, armpl_int_t *ldu1, float *u2, armpl_int_t *ldu2, float *v1t, armpl_int_t *ldv1t, float *v2t, armpl_int_t *ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sbdsdc_(char *uplo, char *compq, armpl_int_t *n, float *d, float *e, float *u, armpl_int_t *ldu, float *vt, armpl_int_t *ldvt, float *q, armpl_int_t *iq, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sbdsqr_(char *uplo, armpl_int_t *n, armpl_int_t *ncvt, armpl_int_t *nru, armpl_int_t *ncc, float *d, float *e, float *vt, armpl_int_t *ldvt, float *u, armpl_int_t *ldu, float *c, armpl_int_t *ldc, float *work, armpl_int_t *info );
void sdisna_(char *job, armpl_int_t *m, armpl_int_t *n, float *d, float *sep, armpl_int_t *info );
float second_(void);
void sgbbrd_(char *vect, armpl_int_t *m, armpl_int_t *n, armpl_int_t *ncc, armpl_int_t *kl, armpl_int_t *ku, float *ab, armpl_int_t *ldab, float *d, float *e, float *q, armpl_int_t *ldq, float *pt, armpl_int_t *ldpt, float *c, armpl_int_t *ldc, float *work, armpl_int_t *info );
void sgbcon_(char *norm, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, float *ab, armpl_int_t *ldab, armpl_int_t *ipiv, float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sgbequ_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, float *ab, armpl_int_t *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void sgbequb_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, float *ab, armpl_int_t *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void sgbrfs_(char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, float *ab, armpl_int_t *ldab, float *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sgbrfsx_(char *trans, char *equed, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, float *ab, armpl_int_t *ldab, float *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, float *r, float *c, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sgbsv_(armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, float *ab, armpl_int_t *ldab, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, armpl_int_t *info);
void sgbsvx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, float *ab, armpl_int_t *ldab, float *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sgbsvxx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, float *ab, armpl_int_t *ldab, float *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sgbtrf_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, float *ab, armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void sgbtrs_(char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, float *ab, armpl_int_t *ldab, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, armpl_int_t *info );
void sgebak_(char *job, char *side, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, armpl_int_t *m, float *v, armpl_int_t *ldv, armpl_int_t *info );
void sgebal_(char *job, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, armpl_int_t *info );
void sgebrd_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *d, float *e, float *tauq, float *taup, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sgecon_(char *norm, armpl_int_t *n, float *a, armpl_int_t *lda, float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sgeequb_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void sgeequ_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, armpl_int_t *info);
void sgees_(char *jobvs, char *sort, ARMPL_SGEES_SELECT select, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *sdim, float *wr, float *wi, float *vs, armpl_int_t *ldvs, float *work, armpl_int_t *lwork, armpl_int_t *bwork, armpl_int_t *info );
void sgeesx_(char *jobvs, char *sort, ARMPL_SGEESX_SELECT select, char *sense, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *sdim, float *wr, float *wi, float *vs, armpl_int_t *ldvs, float *rconde, float *rcondv, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *bwork, armpl_int_t *info );
void sgeev_(char *jobvl, char *jobvr, armpl_int_t *n, float *a, armpl_int_t *lda, float *wr, float *wi, float *vl, armpl_int_t *ldvl, float *vr, armpl_int_t *ldvr, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sgeevx_(char *balanc, char *jobvl, char *jobvr, char *sense, armpl_int_t *n, float *a, armpl_int_t *lda, float *wr, float *wi, float *vl, armpl_int_t *ldvl, float *vr, armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void sgegs_(char *jobvsl, char *jobvsr, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *alphar, float *alphai, float *beta, float *vsl, armpl_int_t *ldvsl, float *vsr, armpl_int_t *ldvsr, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sgegv_(char *jobvl, char *jobvr, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *alphar, float *alphai, float *beta, float *vl, armpl_int_t *ldvl, float *vr, armpl_int_t *ldvr, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sgehrd_(armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sgejsv_(char *joba, char *jobu, char *jobv, char *jobr, char *jobt, char *jobp, armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *sva, float *u, armpl_int_t *ldu, float *v, armpl_int_t *ldv, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void sgelqf_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sgelq_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *t, armpl_int_t *tsize, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sgels_(char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sgelsd_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *s, float *rcond, armpl_int_t *rank, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info);
void sgelss_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *s, float *rcond, armpl_int_t *rank, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sgelsx_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, armpl_int_t *jpvt, float *rcond, armpl_int_t *rank, float *work, armpl_int_t *info);
void sgelsy_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, armpl_int_t *jpvt, float *rcond, armpl_int_t *rank, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sgemlq_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, const float *a, armpl_int_t *lda, const float *t, armpl_int_t *tsize, float *c, armpl_int_t *ldc, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sgemqr_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, const float *a, armpl_int_t *lda, const float *t, armpl_int_t *tsize, float *c, armpl_int_t *ldc, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sgemqrt_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *nb, float *v, armpl_int_t *ldv, float *t, armpl_int_t *ldt, float *c, armpl_int_t *ldc, float *work, armpl_int_t *info );
void sgeqlf_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sgeqp3_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *jpvt, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sgeqpf_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *jpvt, float *tau, float *work, armpl_int_t *info);
void sgeqr2p_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sgeqrfp_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sgeqrf_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sgeqr_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *t, armpl_int_t *tsize, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sgeqrt2_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *t, armpl_int_t *ldt, armpl_int_t *info);
void sgeqrt3_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *t, armpl_int_t *ldt, armpl_int_t *info);
void sgeqrt_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nb, float *a, armpl_int_t *lda, float *t, armpl_int_t *ldt, float *work, armpl_int_t *info);
void sgerfs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sgerfsx_(char *trans, char *equed, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, armpl_int_t *ipiv, float *r, float *c, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sgerqf_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sgesdd_(char *jobz, armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *s, float *u, armpl_int_t *ldu, float *vt, armpl_int_t *ldvt, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void sgesvd_(char *jobu, char *jobvt, armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *s, float *u, armpl_int_t *ldu, float *vt, armpl_int_t *ldvt, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sgesvj_(char *joba, char *jobu, char *jobv, armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *sva, armpl_int_t *mv, float *v, armpl_int_t *ldv, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sgesv_(armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, armpl_int_t *info);
void sgesvx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sgesvxx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sgetrf_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void sgetri_(armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *ipiv, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sgetrs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, armpl_int_t *info );
void sgetsls_(char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sggbak_(char *job, char *side, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, armpl_int_t *m, float *v, armpl_int_t *ldv, armpl_int_t *info );
void sggbal_(char *job, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *work, armpl_int_t *info );
void sgges_(char *jobvsl, char *jobvsr, char *sort, ARMPL_SGGES_SELCTG selctg, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, armpl_int_t *ldvsl, float *vsr, armpl_int_t *ldvsr, float *work, armpl_int_t *lwork, armpl_int_t *bwork, armpl_int_t *info );
void sggesx_(char *jobvsl, char *jobvsr, char *sort, ARMPL_SGGESX_SELCTG selctg, char *sense, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, armpl_int_t *ldvsl, float *vsr, armpl_int_t *ldvsr, float *rconde, float *rcondv, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *bwork, armpl_int_t *info );
void sggev_(char *jobvl, char *jobvr, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *alphar, float *alphai, float *beta, float *vl, armpl_int_t *ldvl, float *vr, armpl_int_t *ldvr, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sggevx_(char *balanc, char *jobvl, char *jobvr, char *sense, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *alphar, float *alphai, float *beta, float *vl, armpl_int_t *ldvl, float *vr, armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *bwork, armpl_int_t *info );
void sggglm_(armpl_int_t *n, armpl_int_t *m, armpl_int_t *p, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *d, float *x, float *y, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sgghrd_(char *compq, char *compz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *q, armpl_int_t *ldq, float *z, armpl_int_t *ldz, armpl_int_t *info );
void sgglse_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *p, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *c, float *d, float *x, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sggqrf_(armpl_int_t *n, armpl_int_t *m, armpl_int_t *p, float *a, armpl_int_t *lda, float *taua, float *b, armpl_int_t *ldb, float *taub, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sggrqf_(armpl_int_t *m, armpl_int_t *p, armpl_int_t *n, float *a, armpl_int_t *lda, float *taua, float *b, armpl_int_t *ldb, float *taub, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sggsvd_(char *jobu, char *jobv, char *jobq, armpl_int_t *m, armpl_int_t *n, armpl_int_t *p, armpl_int_t *k, armpl_int_t *l, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *alpha, float *beta, float *u, armpl_int_t *ldu, float *v, armpl_int_t *ldv, float *q, armpl_int_t *ldq, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sggsvp_(char *jobu, char *jobv, char *jobq, armpl_int_t *m, armpl_int_t *p, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *tola, float *tolb, armpl_int_t *k, armpl_int_t *l, float *u, armpl_int_t *ldu, float *v, armpl_int_t *ldv, float *q, armpl_int_t *ldq, armpl_int_t *iwork, float *tau, float *work, armpl_int_t *info );
void sgsvj0_(char *jobv, armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *d, float *sva, armpl_int_t *mv, float *v, armpl_int_t *ldv, float *eps, float *sfmin, float *tol, armpl_int_t *nsweep, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sgsvj1_(char *jobv, armpl_int_t *m, armpl_int_t *n, armpl_int_t *n1, float *a, armpl_int_t *lda, float *d, float *sva, armpl_int_t *mv, float *v, armpl_int_t *ldv, float *eps, float *sfmin, float *tol, armpl_int_t *nsweep, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sgtcon_(char *norm, armpl_int_t *n, float *dl, float *d, float *du, float *du2, armpl_int_t *ipiv, float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sgtrfs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, float *dl, float *d, float *du, float *dlf, float *df, float *duf, float *du2, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sgtsv_(armpl_int_t *n, armpl_int_t *nrhs, float *dl, float *d, float *du, float *b, armpl_int_t *ldb, armpl_int_t *info);
void sgtsvx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *nrhs, float *dl, float *d, float *du, float *dlf, float *df, float *duf, float *du2, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sgttrf_(armpl_int_t *n, float *dl, float *d, float *du, float *du2, armpl_int_t *ipiv, armpl_int_t *info);
void sgttrs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, float *dl, float *d, float *du, float *du2, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, armpl_int_t *info );
void shgeqz_(char *job, char *compq, char *compz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *alphar, float *alphai, float *beta, float *q, armpl_int_t *ldq, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *info );
void shsein_(char *side, char *eigsrc, char *initv, armpl_int_t *select, armpl_int_t *n, float *h, armpl_int_t *ldh, float *wr, float *wi, float *vl, armpl_int_t *ldvl, float *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, float *work, armpl_int_t *ifaill, armpl_int_t *ifailr, armpl_int_t *info );
void shseqr_(char *job, char *compz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, float *h, armpl_int_t *ldh, float *wr, float *wi, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *info );
armpl_int_t sisnan_(float *sin);
void sla_gbamv_(armpl_int_t *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, float *alpha, float *ab, armpl_int_t *ldab, float *x, armpl_int_t *incx, float *beta, float *y, armpl_int_t *incy);
double sla_gbrcond_(char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, float *ab, armpl_int_t *ldab, float *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, armpl_int_t *cmode, float *c, armpl_int_t *info, float *work, armpl_int_t *iwork );
void sla_gbrfsx_extended_(armpl_int_t *prec_type, armpl_int_t *trans_type, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, float *ab, armpl_int_t *ldab, float *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, int *colequ, float *c, float *b, armpl_int_t *ldb, float *y, armpl_int_t *ldy, float *berr_out, armpl_int_t *n_norms, float *err_bnds_norm, float *err_bnds_comp, float *res, float *ayb, float *dy, float *y_tail, float *rcond, armpl_int_t *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, armpl_int_t *info);
double sla_gbrpvgrw_(armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *ncols, float *ab, armpl_int_t *ldab, float *afb, armpl_int_t *ldafb);
void sla_geamv_(armpl_int_t *trans, armpl_int_t *m, armpl_int_t *n, float *alpha, float *a, armpl_int_t *lda, float *x, armpl_int_t *incx, float *beta, float *y, armpl_int_t *incy);
double sla_gercond_(char *trans, armpl_int_t *n, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_int_t *cmode, float *c, armpl_int_t *info, float *work, armpl_int_t *iwork );
void sla_gerfsx_extended_(armpl_int_t *prec_type, armpl_int_t *trans_type, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, armpl_int_t *ipiv, int *colequ, float *c, float *b, armpl_int_t *ldb, float *y, armpl_int_t *ldy, float *berr_out, armpl_int_t *n_norms, float *err_bnds_norm, float *err_bnds_comp, float *res, float *ayb, float *dy, float *y_tail, float *rcond, armpl_int_t *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, armpl_int_t *info);
float sla_gerpvgrw_(armpl_int_t *n, armpl_int_t *ncols, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf);
void sla_lin_berr_(armpl_int_t *n, armpl_int_t *nz, armpl_int_t *nrhs, float *res, float *ayb, float *berr);
double sla_porcond_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, armpl_int_t *cmode, float *c, armpl_int_t *info, float *work, armpl_int_t *iwork );
void sla_porfsx_extended_(armpl_int_t *prec_type, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, int *colequ, float *c, float *b, armpl_int_t *ldb, float *y, armpl_int_t *ldy, float *berr_out, armpl_int_t *n_norms, float *err_bnds_norm, float *err_bnds_comp, float *res, float *ayb, float *dy, float *y_tail, float *rcond, armpl_int_t *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, armpl_int_t *info );
double sla_porpvgrw_(char *uplo, armpl_int_t *ncols, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, float *work );
void sla_syamv_(armpl_int_t *uplo, armpl_int_t *n, float *alpha, float *a, armpl_int_t *lda, float *x, armpl_int_t *incx, float *beta, float *y, armpl_int_t *incy);
double sla_syrcond_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_int_t *cmode, float *c, armpl_int_t *info, float *work, armpl_int_t *iwork );
void sla_syrfsx_extended_(armpl_int_t *prec_type, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, armpl_int_t *ipiv, int *colequ, float *c, float *b, armpl_int_t *ldb, float *y, armpl_int_t *ldy, float *berr_out, armpl_int_t *n_norms, float *err_bnds_norm, float *err_bnds_comp, float *res, float *ayb, float *dy, float *y_tail, float *rcond, armpl_int_t *ithresh, float *rthresh, float *dz_ub, int *ignore_cwise, armpl_int_t *info );
double sla_syrpvgrw_(char *uplo, armpl_int_t *n, armpl_int_t *info, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, armpl_int_t *ipiv, float *work );
void sla_wwaddw_(armpl_int_t *n, float *x, float *y, float *w);
float slamch_(char *cmach );
float slansf_(char *norm, char *transr, char *uplo, armpl_int_t *n, float *a, float *work );
void slapmr_(int *forwrd, armpl_int_t *m, armpl_int_t *n, float *x, armpl_int_t *ldx, armpl_int_t *k);
void slarfgp_(armpl_int_t *n, float *alpha, float *x, armpl_int_t *incx, float *tau);
void slarft_(char *direct, char *storev, armpl_int_t *n, armpl_int_t *k, float *v, armpl_int_t *ldv, float *tau, float *t, armpl_int_t *ldt );
void slarscl2_(armpl_int_t *m, armpl_int_t *n, float *d, float *x, armpl_int_t *ldx);
void slartgp_(float *f, float *g, float *cs, float *sn, float *r_);
void slartgs_(float *x, float *y, float *sigma, float *cs, float *sn);
void slascl2_(armpl_int_t *m, armpl_int_t *n, float *d, float *x, armpl_int_t *ldx);
void slasrt_(char *id, armpl_int_t *n, float *d, armpl_int_t *info );
void slassq_(armpl_int_t *n, float *x, armpl_int_t *incx, float *scale, float *sumsq);
void sopgtr_(char *uplo, armpl_int_t *n, float *ap, float *tau, float *q, armpl_int_t *ldq, float *work, armpl_int_t *info );
void sopmtr_(char *side, char *uplo, char *trans, armpl_int_t *m, armpl_int_t *n, float *ap, float *tau, float *c, armpl_int_t *ldc, float *work, armpl_int_t *info );
void sorbdb_(char *trans, char *signs, armpl_int_t *m, armpl_int_t *p, armpl_int_t *q, float *x11, armpl_int_t *ldx11, float *x12, armpl_int_t *ldx12, float *x21, armpl_int_t *ldx21, float *x22, armpl_int_t *ldx22, float *theta, float *phi, float *taup1, float *taup2, float *tauq1, float *tauq2, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sorcsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, char *signs, armpl_int_t *m, armpl_int_t *p, armpl_int_t *q, float *x11, armpl_int_t *ldx11, float *x12, armpl_int_t *ldx12, float *x21, armpl_int_t *ldx21, float *x22, armpl_int_t *ldx22, float *theta, float *u1, armpl_int_t *ldu1, float *u2, armpl_int_t *ldu2, float *v1t, armpl_int_t *ldv1t, float *v2t, armpl_int_t *ldv2t, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void sorgbr_(char *vect, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sorghr_(armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sorglq_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sorgql_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sorgqr_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sorgrq_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info);
void sorgtr_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sormbr_(char *vect, char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *c, armpl_int_t *ldc, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sormhr_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, float *a, armpl_int_t *lda, float *tau, float *c, armpl_int_t *ldc, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sormlq_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *c, armpl_int_t *ldc, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sormql_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *c, armpl_int_t *ldc, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sormqr_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *c, armpl_int_t *ldc, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sormr3_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, float *a, armpl_int_t *lda, float *tau, float *c, armpl_int_t *ldc, float *work, armpl_int_t *info );
void sormrq_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *c, armpl_int_t *ldc, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sormrz_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, float *a, armpl_int_t *lda, float *tau, float *c, armpl_int_t *ldc, float *work, armpl_int_t *lwork, armpl_int_t *info );
void sormtr_(char *side, char *uplo, char *trans, armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *tau, float *c, armpl_int_t *ldc, float *work, armpl_int_t *lwork, armpl_int_t *info );
void spbcon_(char *uplo, armpl_int_t *n, armpl_int_t *kd, float *ab, armpl_int_t *ldab, float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info );
void spbequ_(char *uplo, armpl_int_t *n, armpl_int_t *kd, float *ab, armpl_int_t *ldab, float *s, float *scond, float *amax, armpl_int_t *info );
void spbrfs_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, float *ab, armpl_int_t *ldab, float *afb, armpl_int_t *ldafb, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void spbstf_(char *uplo, armpl_int_t *n, armpl_int_t *kd, float *ab, armpl_int_t *ldab, armpl_int_t *info );
void spbsv_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, float *ab, armpl_int_t *ldab, float *b, armpl_int_t *ldb, armpl_int_t *info );
void spbsvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, float *ab, armpl_int_t *ldab, float *afb, armpl_int_t *ldafb, char *equed, float *s, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void spbtrf_(char *uplo, armpl_int_t *n, armpl_int_t *kd, float *ab, armpl_int_t *ldab, armpl_int_t *info );
void spbtrs_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, float *ab, armpl_int_t *ldab, float *b, armpl_int_t *ldb, armpl_int_t *info );
void spftrf_(char *transr, char *uplo, armpl_int_t *n, float *a, armpl_int_t *info );
void spftri_(char *transr, char *uplo, armpl_int_t *n, float *a, armpl_int_t *info );
void spftrs_(char *transr, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, float *b, armpl_int_t *ldb, armpl_int_t *info );
void spocon_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info );
void spoequ_(armpl_int_t *n, float *a, armpl_int_t *lda, float *s, float *scond, float *amax, armpl_int_t *info);
void spoequb_(armpl_int_t *n, float *a, armpl_int_t *lda, float *s, float *scond, float *amax, armpl_int_t *info);
void sporfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sporfsx_(char *uplo, char *equed, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, float *s, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sposv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, armpl_int_t *info );
void sposvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, char *equed, float *s, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sposvxx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, char *equed, float *s, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info );
void spotrf_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *info );
void spotri_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *info );
void spotrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, armpl_int_t *info );
void sppcon_(char *uplo, armpl_int_t *n, float *ap, float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sppequ_(char *uplo, armpl_int_t *n, float *ap, float *s, float *scond, float *amax, armpl_int_t *info );
void spprfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *ap, float *afp, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sppsv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *ap, float *b, armpl_int_t *ldb, armpl_int_t *info );
void sppsvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *ap, float *afp, char *equed, float *s, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void spptrf_(char *uplo, armpl_int_t *n, float *ap, armpl_int_t *info );
void spptri_(char *uplo, armpl_int_t *n, float *ap, armpl_int_t *info );
void spptrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *ap, float *b, armpl_int_t *ldb, armpl_int_t *info );
void spstf2_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, float *tol, float *work, armpl_int_t *info );
void spstrf_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, float *tol, float *work, armpl_int_t *info );
void sptcon_(armpl_int_t *n, float *d, float *e, float *anorm, float *rcond, float *work, armpl_int_t *info);
void spteqr_(char *compz, armpl_int_t *n, float *d, float *e, float *z, armpl_int_t *ldz, float *work, armpl_int_t *info );
void sptrfs_(armpl_int_t *n, armpl_int_t *nrhs, float *d, float *e, float *df, float *ef, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *info);
void sptsv_(armpl_int_t *n, armpl_int_t *nrhs, float *d, float *e, float *b, armpl_int_t *ldb, armpl_int_t *info);
void sptsvx_(char *fact, armpl_int_t *n, armpl_int_t *nrhs, float *d, float *e, float *df, float *ef, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *info );
void spttrf_(armpl_int_t *n, float *d, float *e, armpl_int_t *info);
void spttrs_(armpl_int_t *n, armpl_int_t *nrhs, float *d, float *e, float *b, armpl_int_t *ldb, armpl_int_t *info);
void ssbev_2stage_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, float *ab, armpl_int_t *ldab, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *info );
void ssbev_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, float *ab, armpl_int_t *ldab, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *info );
void ssbevd_2stage_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, float *ab, armpl_int_t *ldab, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void ssbevd_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, float *ab, armpl_int_t *ldab, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void ssbevx_2stage_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_int_t *kd, float *ab, armpl_int_t *ldab, float *q, armpl_int_t *ldq, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void ssbevx_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_int_t *kd, float *ab, armpl_int_t *ldab, float *q, armpl_int_t *ldq, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void ssbgst_(char *vect, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, float *ab, armpl_int_t *ldab, float *bb, armpl_int_t *ldbb, float *x, armpl_int_t *ldx, float *work, armpl_int_t *info );
void ssbgv_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, float *ab, armpl_int_t *ldab, float *bb, armpl_int_t *ldbb, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *info );
void ssbgvd_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, float *ab, armpl_int_t *ldab, float *bb, armpl_int_t *ldbb, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void ssbgvx_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, float *ab, armpl_int_t *ldab, float *bb, armpl_int_t *ldbb, float *q, armpl_int_t *ldq, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void ssbtrd_(char *vect, char *uplo, armpl_int_t *n, armpl_int_t *kd, float *ab, armpl_int_t *ldab, float *d, float *e, float *q, armpl_int_t *ldq, float *work, armpl_int_t *info );
void ssfrk_(char *transr, char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, float *alpha, float *a, armpl_int_t *lda, float *beta, float *c );
void sspcon_(char *uplo, armpl_int_t *n, float *ap, armpl_int_t *ipiv, float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sspev_(char *jobz, char *uplo, armpl_int_t *n, float *ap, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *info );
void sspevd_(char *jobz, char *uplo, armpl_int_t *n, float *ap, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void sspevx_(char *jobz, char *range, char *uplo, armpl_int_t *n, float *ap, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void sspgst_(armpl_int_t *itype, char *uplo, armpl_int_t *n, float *ap, float *bp, armpl_int_t *info );
void sspgvd_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, float *ap, float *bp, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void sspgv_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, float *ap, float *bp, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *info );
void sspgvx_(armpl_int_t *itype, char *jobz, char *range, char *uplo, armpl_int_t *n, float *ap, float *bp, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void ssprfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *ap, float *afp, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sspsv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *ap, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, armpl_int_t *info );
void sspsvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *ap, float *afp, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void ssptrd_(char *uplo, armpl_int_t *n, float *ap, float *d, float *e, float *tau, armpl_int_t *info );
void ssptrf_(char *uplo, armpl_int_t *n, float *ap, armpl_int_t *ipiv, armpl_int_t *info );
void ssptri_(char *uplo, armpl_int_t *n, float *ap, armpl_int_t *ipiv, float *work, armpl_int_t *info );
void ssptrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *ap, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, armpl_int_t *info );
void sstebz_(char *range, char *order, armpl_int_t *n, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, float *d, float *e, armpl_int_t *m, armpl_int_t *nsplit, float *w, armpl_int_t *iblock, armpl_int_t *isplit, float *work, armpl_int_t *iwork, armpl_int_t *info );
void sstedc_(char *compz, armpl_int_t *n, float *d, float *e, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void sstegr_(char *jobz, char *range, armpl_int_t *n, float *d, float *e, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, float *z, armpl_int_t *ldz, armpl_int_t *isuppz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void sstein_(armpl_int_t *n, float *d, float *e, armpl_int_t *m, float *w, armpl_int_t *iblock, armpl_int_t *isplit, float *z, armpl_int_t *ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info);
void ssteqr_(char *compz, armpl_int_t *n, float *d, float *e, float *z, armpl_int_t *ldz, float *work, armpl_int_t *info );
void ssterf_(armpl_int_t *n, float *d, float *e, armpl_int_t *info);
void sstev_(char *jobz, armpl_int_t *n, float *d, float *e, float *z, armpl_int_t *ldz, float *work, armpl_int_t *info );
void sstevd_(char *jobz, armpl_int_t *n, float *d, float *e, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void sstevr_(char *jobz, char *range, armpl_int_t *n, float *d, float *e, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, float *z, armpl_int_t *ldz, armpl_int_t *isuppz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void sstevx_(char *jobz, char *range, armpl_int_t *n, float *d, float *e, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void ssycon_3_(char *uplo, armpl_int_t *n, const float *a, armpl_int_t *lda, const float *e, const armpl_int_t *ipiv, float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info );
void ssycon_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *ipiv, float *anorm, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info );
void ssyconv_(char *uplo, char *way, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *ipiv, float *work, armpl_int_t *info );
void ssyequb_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *s, float *scond, float *amax, float *work, armpl_int_t *info );
void ssyev_2stage_(char *jobz, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *w, float *work, armpl_int_t *lwork, armpl_int_t *info );
void ssyev_(char *jobz, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *w, float *work, armpl_int_t *lwork, armpl_int_t *info );
void ssyevd_2stage_(char *jobz, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *w, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void ssyevd_(char *jobz, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *w, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void ssyevr_2stage_(char *jobz, char *range, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, float *z, armpl_int_t *ldz, armpl_int_t *isuppz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void ssyevr_(char *jobz, char *range, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, float *z, armpl_int_t *ldz, armpl_int_t *isuppz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void ssyevx_2stage_(char *jobz, char *range, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void ssyevx_(char *jobz, char *range, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void ssygst_(armpl_int_t *itype, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, armpl_int_t *info );
void ssygv_2stage_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *w, float *work, armpl_int_t *lwork, armpl_int_t *info );
void ssygvd_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *w, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void ssygv_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *w, float *work, armpl_int_t *lwork, armpl_int_t *info );
void ssygvx_(armpl_int_t *itype, char *jobz, char *range, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *abstol, armpl_int_t *m, float *w, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void ssyrfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void ssyrfsx_(char *uplo, char *equed, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, armpl_int_t *ipiv, float *s, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info );
void ssysv_aa_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, float *work, armpl_int_t *lwork, armpl_int_t *info );
void ssysv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, float *work, armpl_int_t *lwork, armpl_int_t *info );
void ssysv_rk_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *e, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, float *work, armpl_int_t *lwork, armpl_int_t *info );
void ssysvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void ssysvxx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *af, armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, float *s, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t *n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t *nparams, float *params, float *work, armpl_int_t *iwork, armpl_int_t *info );
void ssyswapr_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *i1, armpl_int_t *i2 );
void ssytrd_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *d, float *e, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info );
void ssytrf_aa_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *ipiv, float *work, armpl_int_t *lwork, armpl_int_t *info );
void ssytrf_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *ipiv, float *work, armpl_int_t *lwork, armpl_int_t *info );
void ssytrf_rk_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *e, armpl_int_t *ipiv, float *work, armpl_int_t *lwork, armpl_int_t *info );
void ssytri2_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *ipiv, float *work, armpl_int_t *lwork, armpl_int_t *info );
void ssytri2x_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *ipiv, float *work, armpl_int_t *nb, armpl_int_t *info );
void ssytri_3_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, const float *e, const armpl_int_t *ipiv, float *work, armpl_int_t *lwork, armpl_int_t *info );
void ssytri_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *ipiv, float *work, armpl_int_t *info );
void ssytrs2_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, float *work, armpl_int_t *info );
void ssytrs_3_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, const float *a, armpl_int_t *lda, const float *e, const armpl_int_t *ipiv, float *b, armpl_int_t *ldb, armpl_int_t *info );
void ssytrs_aa_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, const float *a, armpl_int_t *lda, const armpl_int_t *ipiv, float *b, armpl_int_t *ldb, float *work, armpl_int_t *lwork, armpl_int_t *info );
void ssytrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, armpl_int_t *ipiv, float *b, armpl_int_t *ldb, armpl_int_t *info );
void stbcon_(char *norm, char *uplo, char *diag, armpl_int_t *n, armpl_int_t *kd, float *ab, armpl_int_t *ldab, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info );
void stbrfs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, float *ab, armpl_int_t *ldab, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void stbtrs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, float *ab, armpl_int_t *ldab, float *b, armpl_int_t *ldb, armpl_int_t *info );
void stfsm_(char *transr, char *side, char *uplo, char *trans, char *diag, armpl_int_t *m, armpl_int_t *n, float *alpha, float *a, float *b, armpl_int_t *ldb );
void stftri_(char *transr, char *uplo, char *diag, armpl_int_t *n, float *a, armpl_int_t *info );
void stfttp_(char *transr, char *uplo, armpl_int_t *n, float *arf, float *ap, armpl_int_t *info );
void stfttr_(char *transr, char *uplo, armpl_int_t *n, float *arf, float *a, armpl_int_t *lda, armpl_int_t *info );
void stgevc_(char *side, char *howmny, armpl_int_t *select, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *vl, armpl_int_t *ldvl, float *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, float *work, armpl_int_t *info );
void stgexc_(armpl_int_t *wantq, armpl_int_t *wantz, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *q, armpl_int_t *ldq, float *z, armpl_int_t *ldz, armpl_int_t *ifst, armpl_int_t *ilst, float *work, armpl_int_t *lwork, armpl_int_t *info);
void stgsen_(armpl_int_t *ijob, armpl_int_t *wantq, armpl_int_t *wantz, armpl_int_t *select, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *alphar, float *alphai, float *beta, float *q, armpl_int_t *ldq, float *z, armpl_int_t *ldz, armpl_int_t *m, float *pl, float *pr, float *dif, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info);
void stgsja_(char *jobu, char *jobv, char *jobq, armpl_int_t *m, armpl_int_t *p, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *tola, float *tolb, float *alpha, float *beta, float *u, armpl_int_t *ldu, float *v, armpl_int_t *ldv, float *q, armpl_int_t *ldq, float *work, armpl_int_t *ncycle, armpl_int_t *info );
void stgsna_(char *job, char *howmny, armpl_int_t *select, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *vl, armpl_int_t *ldvl, float *vr, armpl_int_t *ldvr, float *s, float *dif, armpl_int_t *mm, armpl_int_t *m, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void stgsyl_(char *trans, armpl_int_t *ijob, armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *c, armpl_int_t *ldc, float *d, armpl_int_t *ldd, float *e, armpl_int_t *lde, float *f, armpl_int_t *ldf, float *scale, float *dif, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void stpcon_(char *norm, char *uplo, char *diag, armpl_int_t *n, float *ap, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info );
void stpmqrt_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, armpl_int_t *nb, float *v, armpl_int_t *ldv, float *t, armpl_int_t *ldt, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *work, armpl_int_t *info );
void stpqrt2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *t, armpl_int_t *ldt, armpl_int_t *info);
void stpqrt_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, armpl_int_t *nb, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *t, armpl_int_t *ldt, float *work, armpl_int_t *info);
void stprfb_(char *side, char *trans, char *direct, char *storev, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, float *v, armpl_int_t *ldv, float *t, armpl_int_t *ldt, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *work, armpl_int_t *ldwork );
void stprfs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, float *ap, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void stptri_(char *uplo, char *diag, armpl_int_t *n, float *ap, armpl_int_t *info );
void stptrs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, float *ap, float *b, armpl_int_t *ldb, armpl_int_t *info );
void stpttf_(char *transr, char *uplo, armpl_int_t *n, float *ap, float *arf, armpl_int_t *info );
void stpttr_(char *uplo, armpl_int_t *n, float *ap, float *a, armpl_int_t *lda, armpl_int_t *info );
void strcon_(char *norm, char *uplo, char *diag, armpl_int_t *n, float *a, armpl_int_t *lda, float *rcond, float *work, armpl_int_t *iwork, armpl_int_t *info );
void strevc3_(char *side, char *howmny, armpl_int_t *select, armpl_int_t *n, float *t, armpl_int_t *ldt, float *vl, armpl_int_t *ldvl, float *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, float *work, armpl_int_t *lwork, armpl_int_t *info );
void strevc_(char *side, char *howmny, armpl_int_t *select, armpl_int_t *n, float *t, armpl_int_t *ldt, float *vl, armpl_int_t *ldvl, float *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, float *work, armpl_int_t *info );
void strexc_(char *compq, armpl_int_t *n, float *t, armpl_int_t *ldt, float *q, armpl_int_t *ldq, armpl_int_t *ifst, armpl_int_t *ilst, float *work, armpl_int_t *info );
void strrfs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *x, armpl_int_t *ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork, armpl_int_t *info );
void strsen_(char *job, char *compq, armpl_int_t *select, armpl_int_t *n, float *t, armpl_int_t *ldt, float *q, armpl_int_t *ldq, float *wr, float *wi, armpl_int_t *m, float *s, float *sep, float *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void strsna_(char *job, char *howmny, armpl_int_t *select, armpl_int_t *n, float *t, armpl_int_t *ldt, float *vl, armpl_int_t *ldvl, float *vr, armpl_int_t *ldvr, float *s, float *sep, armpl_int_t *mm, armpl_int_t *m, float *work, armpl_int_t *ldwork, armpl_int_t *iwork, armpl_int_t *info );
void strsyl_(char *trana, char *tranb, armpl_int_t *isgn, armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *c, armpl_int_t *ldc, float *scale, armpl_int_t *info );
void strtri_(char *uplo, char *diag, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *info );
void strtrs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, armpl_int_t *info );
void strttf_(char *transr, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *arf, armpl_int_t *info );
void strttp_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *ap, armpl_int_t *info );
void stzrqf_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *tau, armpl_int_t *info);
void stzrzf_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *lwork, armpl_int_t *info);
void xerbla_array_(char *srname_array, armpl_int_t *srname_len, armpl_int_t *info );
void zbbcsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, armpl_int_t *m, armpl_int_t *p, armpl_int_t *q, double *theta, double *phi, armpl_doublecomplex_t *u1, armpl_int_t *ldu1, armpl_doublecomplex_t *u2, armpl_int_t *ldu2, armpl_doublecomplex_t *v1t, armpl_int_t *ldv1t, armpl_doublecomplex_t *v2t, armpl_int_t *ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e, double *rwork, armpl_int_t *lrwork, armpl_int_t *info );
void zbdsqr_(char *uplo, armpl_int_t *n, armpl_int_t *ncvt, armpl_int_t *nru, armpl_int_t *ncc, double *d, double *e, armpl_doublecomplex_t *vt, armpl_int_t *ldvt, armpl_doublecomplex_t *u, armpl_int_t *ldu, armpl_doublecomplex_t *c, armpl_int_t *ldc, double *rwork, armpl_int_t *info );
void zcgesv_(armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, armpl_doublecomplex_t *work, armpl_singlecomplex_t *swork, armpl_int_t *iter, armpl_int_t *info);
void zcposv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, armpl_doublecomplex_t *work, armpl_singlecomplex_t *swork, double *rwork, armpl_int_t *iter, armpl_int_t *info );
void zgbbrd_(char *vect, armpl_int_t *m, armpl_int_t *n, armpl_int_t *ncc, armpl_int_t *kl, armpl_int_t *ku, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *d, double *e, armpl_doublecomplex_t *q, armpl_int_t *ldq, armpl_doublecomplex_t *pt, armpl_int_t *ldpt, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zgbcon_(char *norm, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *ipiv, double *anorm, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zgbequ_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void zgbequb_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void zgbrfs_(char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zgbrfsx_(char *trans, char *equed, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, double *r, double *c, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zgbsv_(armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info);
void zgbsvx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zgbsvxx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zgbtrf_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void zgbtrs_(char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zgebak_(char *job, char *side, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, armpl_int_t *m, armpl_doublecomplex_t *v, armpl_int_t *ldv, armpl_int_t *info );
void zgebal_(char *job, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, armpl_int_t *info );
void zgebrd_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *d, double *e, armpl_doublecomplex_t *tauq, armpl_doublecomplex_t *taup, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zgecon_(char *norm, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *anorm, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zgeequ_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void zgeequb_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, armpl_int_t *info);
void zgees_(char *jobvs, char *sort, ARMPL_ZGEES_SELECT select, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *sdim, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vs, armpl_int_t *ldvs, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *bwork, armpl_int_t *info );
void zgeesx_(char *jobvs, char *sort, ARMPL_ZGEESX_SELECT select, char *sense, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *sdim, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vs, armpl_int_t *ldvs, double *rconde, double *rcondv, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *bwork, armpl_int_t *info );
void zgeev_(char *jobvl, char *jobvr, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vl, armpl_int_t *ldvl, armpl_doublecomplex_t *vr, armpl_int_t *ldvr, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info );
void zgeevx_(char *balanc, char *jobvl, char *jobvr, char *sense, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vl, armpl_int_t *ldvl, armpl_doublecomplex_t *vr, armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info );
void zgegs_(char *jobvsl, char *jobvsr, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vsl, armpl_int_t *ldvsl, armpl_doublecomplex_t *vsr, armpl_int_t *ldvsr, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info );
void zgegv_(char *jobvl, char *jobvr, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vl, armpl_int_t *ldvl, armpl_doublecomplex_t *vr, armpl_int_t *ldvr, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info );
void zgehrd_(armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zgelqf_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zgelq_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *t, armpl_int_t *tsize, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zgels_(char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zgelsd_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, double *s, double *rcond, armpl_int_t *rank, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *info);
void zgelss_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, double *s, double *rcond, armpl_int_t *rank, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info);
void zgelsx_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *jpvt, double *rcond, armpl_int_t *rank, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info);
void zgelsy_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *jpvt, double *rcond, armpl_int_t *rank, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info);
void zgemlq_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, const armpl_doublecomplex_t *a, armpl_int_t *lda, const armpl_doublecomplex_t *t, armpl_int_t *tsize, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zgemqr_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, const armpl_doublecomplex_t *a, armpl_int_t *lda, const armpl_doublecomplex_t *t, armpl_int_t *tsize, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zgemqrt_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *nb, armpl_doublecomplex_t *v, armpl_int_t *ldv, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *info );
void zgeqlf_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zgeqp3_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *jpvt, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info);
void zgeqpf_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *jpvt, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info);
void zgeqr2p_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgeqrfp_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zgeqrf_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zgeqr_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *t, armpl_int_t *tsize, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zgeqrt2_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_int_t *info);
void zgeqrt3_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_int_t *info);
void zgeqrt_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nb, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgerfs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zgerfsx_(char *trans, char *equed, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, double *r, double *c, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zgerqf_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zgesdd_(char *jobz, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *s, armpl_doublecomplex_t *u, armpl_int_t *ldu, armpl_doublecomplex_t *vt, armpl_int_t *ldvt, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *info );
void zgesvd_(char *jobu, char *jobvt, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *s, armpl_doublecomplex_t *u, armpl_int_t *ldu, armpl_doublecomplex_t *vt, armpl_int_t *ldvt, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info );
void zgesv_(armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info);
void zgesvx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zgesvxx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zgetrf_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void zgetri_(armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zgetrs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zgetsls_(char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zggbak_(char *job, char *side, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, armpl_int_t *m, armpl_doublecomplex_t *v, armpl_int_t *ldv, armpl_int_t *info );
void zggbal_(char *job, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *work, armpl_int_t *info );
void zgges_(char *jobvsl, char *jobvsr, char *sort, ARMPL_ZGGES_DELCTG delctg, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *sdim, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vsl, armpl_int_t *ldvsl, armpl_doublecomplex_t *vsr, armpl_int_t *ldvsr, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *bwork, armpl_int_t *info );
void zggesx_(char *jobvsl, char *jobvsr, char *sort, ARMPL_ZGGESX_DELCTG delctg, char *sense, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *sdim, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vsl, armpl_int_t *ldvsl, armpl_doublecomplex_t *vsr, armpl_int_t *ldvsr, double *rconde, double *rcondv, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *bwork, armpl_int_t *info );
void zggev_(char *jobvl, char *jobvr, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vl, armpl_int_t *ldvl, armpl_doublecomplex_t *vr, armpl_int_t *ldvr, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info );
void zggevx_(char *balanc, char *jobvl, char *jobvr, char *sense, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vl, armpl_int_t *ldvl, armpl_doublecomplex_t *vr, armpl_int_t *ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *bwork, armpl_int_t *info );
void zggglm_(armpl_int_t *n, armpl_int_t *m, armpl_int_t *p, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *d, armpl_doublecomplex_t *x, armpl_doublecomplex_t *y, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zgghrd_(char *compq, char *compz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *q, armpl_int_t *ldq, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_int_t *info );
void zgglse_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *p, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *c, armpl_doublecomplex_t *d, armpl_doublecomplex_t *x, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zggqrf_(armpl_int_t *n, armpl_int_t *m, armpl_int_t *p, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *taua, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *taub, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zggrqf_(armpl_int_t *m, armpl_int_t *p, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *taua, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *taub, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zggsvd_(char *jobu, char *jobv, char *jobq, armpl_int_t *m, armpl_int_t *n, armpl_int_t *p, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, double *alpha, double *beta, armpl_doublecomplex_t *u, armpl_int_t *ldu, armpl_doublecomplex_t *v, armpl_int_t *ldv, armpl_doublecomplex_t *q, armpl_int_t *ldq, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *info );
void zggsvp_(char *jobu, char *jobv, char *jobq, armpl_int_t *m, armpl_int_t *p, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, double *tola, double *tolb, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *u, armpl_int_t *ldu, armpl_doublecomplex_t *v, armpl_int_t *ldv, armpl_doublecomplex_t *q, armpl_int_t *ldq, armpl_int_t *iwork, double *rwork, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info );
void zgtcon_(char *norm, armpl_int_t *n, armpl_doublecomplex_t *dl, armpl_doublecomplex_t *d, armpl_doublecomplex_t *du, armpl_doublecomplex_t *du2, armpl_int_t *ipiv, double *anorm, double *rcond, armpl_doublecomplex_t *work, armpl_int_t *info );
void zgtrfs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *dl, armpl_doublecomplex_t *d, armpl_doublecomplex_t *du, armpl_doublecomplex_t *dlf, armpl_doublecomplex_t *df, armpl_doublecomplex_t *duf, armpl_doublecomplex_t *du2, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zgtsv_(armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *dl, armpl_doublecomplex_t *d, armpl_doublecomplex_t *du, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info);
void zgtsvx_(char *fact, char *trans, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *dl, armpl_doublecomplex_t *d, armpl_doublecomplex_t *du, armpl_doublecomplex_t *dlf, armpl_doublecomplex_t *df, armpl_doublecomplex_t *duf, armpl_doublecomplex_t *du2, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zgttrf_(armpl_int_t *n, armpl_doublecomplex_t *dl, armpl_doublecomplex_t *d, armpl_doublecomplex_t *du, armpl_doublecomplex_t *du2, armpl_int_t *ipiv, armpl_int_t *info);
void zgttrs_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *dl, armpl_doublecomplex_t *d, armpl_doublecomplex_t *du, armpl_doublecomplex_t *du2, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zhbev_2stage_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info );
void zhbev_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zhbevd_2stage_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void zhbevd_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void zhbevx_2stage_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *q, armpl_int_t *ldq, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void zhbevx_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *q, armpl_int_t *ldq, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void zhbgst_(char *vect, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *bb, armpl_int_t *ldbb, armpl_doublecomplex_t *x, armpl_int_t *ldx, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zhbgv_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *bb, armpl_int_t *ldbb, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zhbgvd_(char *jobz, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *bb, armpl_int_t *ldbb, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void zhbgvx_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_int_t *ka, armpl_int_t *kb, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *bb, armpl_int_t *ldbb, armpl_doublecomplex_t *q, armpl_int_t *ldq, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void zhbtrd_(char *vect, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *d, double *e, armpl_doublecomplex_t *q, armpl_int_t *ldq, armpl_doublecomplex_t *work, armpl_int_t *info );
void zhecon_3_(char *uplo, armpl_int_t *n, const armpl_doublecomplex_t *a, armpl_int_t *lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, double *anorm, double *rcond, armpl_doublecomplex_t *work, armpl_int_t *info );
void zhecon_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, double *anorm, double *rcond, armpl_doublecomplex_t *work, armpl_int_t *info );
void zheequb_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *s, double *scond, double *amax, armpl_doublecomplex_t *work, armpl_int_t *info );
void zheev_2stage_(char *jobz, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *w, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info );
void zheev_(char *jobz, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *w, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info );
void zheevd_2stage_(char *jobz, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *w, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void zheevd_(char *jobz, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *w, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void zheevr_2stage_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_int_t *isuppz, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void zheevr_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_int_t *isuppz, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void zheevx_2stage_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void zheevx_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void zhegst_(armpl_int_t *itype, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zhegv_2stage_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, double *w, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info );
void zhegvd_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, double *w, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void zhegv_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, double *w, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info );
void zhegvx_(armpl_int_t *itype, char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void zherfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zherfsx_(char *uplo, char *equed, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, double *s, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zhesv_aa_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zhesv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zhesv_rk_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zhesvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info );
void zhesvxx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zheswapr_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *i1, armpl_int_t *i2 );
void zhetrd_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *d, double *e, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zhetrf_aa_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zhetrf_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zhetrf_rk_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zhetri2_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zhetri2x_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *nb, armpl_int_t *info );
void zhetri_3_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zhetri_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *info );
void zhetrs2_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *info );
void zhetrs_3_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, const armpl_doublecomplex_t *a, armpl_int_t *lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zhetrs_aa_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, const armpl_doublecomplex_t *a, armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zhetrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zhfrk_(char *transr, char *uplo, char *trans, armpl_int_t *n, armpl_int_t *k, double *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, double *beta, armpl_doublecomplex_t *c );
void zhgeqz_(char *job, char *compq, char *compz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *q, armpl_int_t *ldq, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info );
void zhpcon_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, double *anorm, double *rcond, armpl_doublecomplex_t *work, armpl_int_t *info );
void zhpev_(char *jobz, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zhpevd_(char *jobz, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void zhpevx_(char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void zhpgst_(armpl_int_t *itype, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *bp, armpl_int_t *info );
void zhpgv_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *bp, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zhpgvd_(armpl_int_t *itype, char *jobz, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *bp, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void zhpgvx_(armpl_int_t *itype, char *jobz, char *range, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *bp, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info );
void zhprfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *afp, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zhpsv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zhpsvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *afp, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zhptrd_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, double *d, double *e, armpl_doublecomplex_t *tau, armpl_int_t *info );
void zhptrf_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_int_t *info );
void zhptri_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *info );
void zhptrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zhsein_(char *side, char *eigsrc, char *initv, armpl_int_t *select, armpl_int_t *n, armpl_doublecomplex_t *h, armpl_int_t *ldh, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vl, armpl_int_t *ldvl, armpl_doublecomplex_t *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *ifaill, armpl_int_t *ifailr, armpl_int_t *info );
void zhseqr_(char *job, char *compz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_doublecomplex_t *h, armpl_int_t *ldh, armpl_doublecomplex_t *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zla_gbamv_(armpl_int_t *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, double *alpha, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *x, armpl_int_t *incx, double *beta, double *y, armpl_int_t *incy);
double zla_gbrcond_c_(char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, double *c, int *capply, armpl_int_t *info, armpl_doublecomplex_t *work, double *rwork );
double zla_gbrcond_x_(char *trans, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, armpl_doublecomplex_t *x, armpl_int_t *info, armpl_doublecomplex_t *work, double *rwork );
void zla_gbrfsx_extended_(armpl_int_t *prec_type, armpl_int_t *trans_type, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *nrhs, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *afb, armpl_int_t *ldafb, armpl_int_t *ipiv, int *colequ, double *c, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *y, armpl_int_t *ldy, double *berr_out, armpl_int_t *n_norms, double *err_bnds_norm, double *err_bnds_comp, armpl_doublecomplex_t *res, double *ayb, armpl_doublecomplex_t *dy, armpl_doublecomplex_t *y_tail, double *rcond, armpl_int_t *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, armpl_int_t *info);
double zla_gbrpvgrw_(armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_int_t *ncols, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *afb, armpl_int_t *ldafb);
void zla_geamv_(armpl_int_t *trans, armpl_int_t *m, armpl_int_t *n, double *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *x, armpl_int_t *incx, double *beta, double *y, armpl_int_t *incy);
double zla_gercond_c_(char *trans, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, double *c, int *capply, armpl_int_t *info, armpl_doublecomplex_t *work, double *rwork );
double zla_gercond_x_(char *trans, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_doublecomplex_t *x, armpl_int_t *info, armpl_doublecomplex_t *work, double *rwork );
void zla_gerfsx_extended_(armpl_int_t *prec_type, armpl_int_t *trans_type, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, int *colequ, double *c, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *y, armpl_int_t *ldy, double *berr_out, armpl_int_t *n_norms, double *errs_n, double *errs_c, armpl_doublecomplex_t *res, double *ayb, armpl_doublecomplex_t *dy, armpl_doublecomplex_t *y_tail, double *rcond, armpl_int_t *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, armpl_int_t *info);
double zla_gerpvgrw_(armpl_int_t *n, armpl_int_t *ncols, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf);
void zla_heamv_(armpl_int_t *uplo, armpl_int_t *n, double *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *x, armpl_int_t *incx, double *beta, double *y, armpl_int_t *incy);
double zla_hercond_c_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, double *c, int *capply, armpl_int_t *info, armpl_doublecomplex_t *work, double *rwork );
double zla_hercond_x_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_doublecomplex_t *x, armpl_int_t *info, armpl_doublecomplex_t *work, double *rwork );
void zla_herfsx_extended_(armpl_int_t *prec_type, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, int *colequ, double *c, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *y, armpl_int_t *ldy, double *berr_out, armpl_int_t *n_norms, double *err_bnds_norm, double *err_bnds_comp, armpl_doublecomplex_t *res, double *ayb, armpl_doublecomplex_t *dy, armpl_doublecomplex_t *y_tail, double *rcond, armpl_int_t *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, armpl_int_t *info );
double zla_herpvgrw_(char *uplo, armpl_int_t *n, armpl_int_t *info, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, double *work );
void zla_lin_berr_(armpl_int_t *n, armpl_int_t *nz, armpl_int_t *nrhs, armpl_doublecomplex_t *res, double *ayb, double *berr);
double zla_porcond_c_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, double *c, int *capply, armpl_int_t *info, armpl_doublecomplex_t *work, double *rwork );
double zla_porcond_x_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_doublecomplex_t *x, armpl_int_t *info, armpl_doublecomplex_t *work, double *rwork );
void zla_porfsx_extended_(armpl_int_t *prec_type, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, int *colequ, double *c, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *y, armpl_int_t *ldy, double *berr_out, armpl_int_t *n_norms, double *err_bnds_norm, double *err_bnds_comp, armpl_doublecomplex_t *res, double *ayb, armpl_doublecomplex_t *dy, armpl_doublecomplex_t *y_tail, double *rcond, armpl_int_t *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, armpl_int_t *info );
double zla_porpvgrw_(char *uplo, armpl_int_t *ncols, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, double *work );
void zla_syamv_(armpl_int_t *uplo, armpl_int_t *n, double *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *x, armpl_int_t *incx, double *beta, double *y, armpl_int_t *incy);
double zla_syrcond_c_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, double *c, int *capply, armpl_int_t *info, armpl_doublecomplex_t *work, double *rwork );
double zla_syrcond_x_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_doublecomplex_t *x, armpl_int_t *info, armpl_doublecomplex_t *work, double *rwork );
void zla_syrfsx_extended_(armpl_int_t *prec_type, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, int *colequ, double *c, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *y, armpl_int_t *ldy, double *berr_out, armpl_int_t *n_norms, double *err_bnds_norm, double *err_bnds_comp, armpl_doublecomplex_t *res, double *ayb, armpl_doublecomplex_t *dy, armpl_doublecomplex_t *y_tail, double *rcond, armpl_int_t *ithresh, double *rthresh, double *dz_ub, int *ignore_cwise, armpl_int_t *info );
double zla_syrpvgrw_(char *uplo, armpl_int_t *n, armpl_int_t *info, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, double *work );
void zla_wwaddw_(armpl_int_t *n, armpl_doublecomplex_t *x, armpl_doublecomplex_t *y, armpl_doublecomplex_t *w);
double zlanhf_(char *norm, char *transr, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, double *work );
void zlapmr_(int *forwrd, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *ldx, armpl_int_t *k);
void zlarfgp_(armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *tau);
void zlarscl2_(armpl_int_t *m, armpl_int_t *n, double *d, armpl_doublecomplex_t *x, armpl_int_t *ldx);
void zlascl2_(armpl_int_t *m, armpl_int_t *n, double *d, armpl_doublecomplex_t *x, armpl_int_t *ldx);
void zlat2c_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *sa, armpl_int_t *ldsa, armpl_int_t *info );
void zpbcon_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *anorm, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zpbequ_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *s, double *scond, double *amax, armpl_int_t *info );
void zpbrfs_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *afb, armpl_int_t *ldafb, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zpbstf_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *info );
void zpbsv_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zpbsvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *afb, armpl_int_t *ldafb, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zpbtrf_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *info );
void zpbtrs_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zpftrf_(char *transr, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *info );
void zpftri_(char *transr, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *info );
void zpftrs_(char *transr, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zpocon_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *anorm, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zpoequ_(armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *s, double *scond, double *amax, armpl_int_t *info);
void zpoequb_(armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *s, double *scond, double *amax, armpl_int_t *info);
void zporfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zporfsx_(char *uplo, char *equed, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, double *s, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zposv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zposvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zposvxx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zpotrf_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void zpotri_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void zpotrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zppcon_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, double *anorm, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zppequ_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, double *s, double *scond, double *amax, armpl_int_t *info );
void zpprfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *afp, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zppsv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zppsvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *afp, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zpptrf_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_int_t *info );
void zpptri_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_int_t *info );
void zpptrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zpstf2_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, double *tol, double *work, armpl_int_t *info );
void zpstrf_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *piv, armpl_int_t *rank, double *tol, double *work, armpl_int_t *info );
void zptcon_(armpl_int_t *n, double *d, armpl_doublecomplex_t *e, double *anorm, double *rcond, double *rwork, armpl_int_t *info);
void zpteqr_(char *compz, armpl_int_t *n, double *d, double *e, armpl_doublecomplex_t *z, armpl_int_t *ldz, double *work, armpl_int_t *info );
void zptrfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *d, armpl_doublecomplex_t *e, double *df, armpl_doublecomplex_t *ef, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zptsv_(armpl_int_t *n, armpl_int_t *nrhs, double *d, armpl_doublecomplex_t *e, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info);
void zptsvx_(char *fact, armpl_int_t *n, armpl_int_t *nrhs, double *d, armpl_doublecomplex_t *e, double *df, armpl_doublecomplex_t *ef, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zpttrf_(armpl_int_t *n, double *d, armpl_doublecomplex_t *e, armpl_int_t *info);
void zpttrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, double *d, armpl_doublecomplex_t *e, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zspcon_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, double *anorm, double *rcond, armpl_doublecomplex_t *work, armpl_int_t *info );
void zsprfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *afp, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zspsv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zspsvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *afp, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zsptrf_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_int_t *info );
void zsptri_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *info );
void zsptrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zstedc_(char *compz, armpl_int_t *n, double *d, double *e, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void zstegr_(char *jobz, char *range, armpl_int_t *n, double *d, double *e, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_int_t *isuppz, double *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info );
void zstein_(armpl_int_t *n, double *d, double *e, armpl_int_t *m, double *w, armpl_int_t *iblock, armpl_int_t *isplit, armpl_doublecomplex_t *z, armpl_int_t *ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail, armpl_int_t *info);
void zsteqr_(char *compz, armpl_int_t *n, double *d, double *e, armpl_doublecomplex_t *z, armpl_int_t *ldz, double *work, armpl_int_t *info );
void zsycon_3_(char *uplo, armpl_int_t *n, const armpl_doublecomplex_t *a, armpl_int_t *lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, double *anorm, double *rcond, armpl_doublecomplex_t *work, armpl_int_t *info );
void zsycon_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, double *anorm, double *rcond, armpl_doublecomplex_t *work, armpl_int_t *info );
void zsyconv_(char *uplo, char *way, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *info );
void zsyequb_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *s, double *scond, double *amax, armpl_doublecomplex_t *work, armpl_int_t *info );
void zsyrfs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zsyrfsx_(char *uplo, char *equed, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, double *s, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zsysv_aa_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zsysv_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zsysv_rk_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zsysvx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *info );
void zsysvxx_(char *fact, char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *af, armpl_int_t *ldaf, armpl_int_t *ipiv, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t *n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t *nparams, double *params, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void zsyswapr_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *i1, armpl_int_t *i2 );
void zsytrf_aa_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zsytrf_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zsytrf_rk_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zsytri2_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zsytri2x_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *nb, armpl_int_t *info );
void zsytri_3_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zsytri_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t *info );
void zsytrs2_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *info );
void zsytrs_3_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, const armpl_doublecomplex_t *a, armpl_int_t *lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zsytrs_aa_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, const armpl_doublecomplex_t *a, armpl_int_t *lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zsytrs_(char *uplo, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void ztbcon_(char *norm, char *uplo, char *diag, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void ztbrfs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void ztbtrs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *kd, armpl_int_t *nrhs, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void ztfsm_(char *transr, char *side, char *uplo, char *trans, char *diag, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_doublecomplex_t *b, armpl_int_t *ldb );
void ztftri_(char *transr, char *uplo, char *diag, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *info );
void ztfttp_(char *transr, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *arf, armpl_doublecomplex_t *ap, armpl_int_t *info );
void ztfttr_(char *transr, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *arf, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void ztgevc_(char *side, char *howmny, armpl_int_t *select, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *vl, armpl_int_t *ldvl, armpl_doublecomplex_t *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void ztgexc_(armpl_int_t *wantq, armpl_int_t *wantz, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *q, armpl_int_t *ldq, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_int_t *ifst, armpl_int_t *ilst, armpl_int_t *info);
void ztgsen_(armpl_int_t *ijob, armpl_int_t *wantq, armpl_int_t *wantz, armpl_int_t *select, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *q, armpl_int_t *ldq, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_int_t *m, double *pl, double *pr, double *dif, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *liwork, armpl_int_t *info);
void ztgsja_(char *jobu, char *jobv, char *jobq, armpl_int_t *m, armpl_int_t *p, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, double *tola, double *tolb, double *alpha, double *beta, armpl_doublecomplex_t *u, armpl_int_t *ldu, armpl_doublecomplex_t *v, armpl_int_t *ldv, armpl_doublecomplex_t *q, armpl_int_t *ldq, armpl_doublecomplex_t *work, armpl_int_t *ncycle, armpl_int_t *info );
void ztgsna_(char *job, char *howmny, armpl_int_t *select, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *vl, armpl_int_t *ldvl, armpl_doublecomplex_t *vr, armpl_int_t *ldvr, double *s, double *dif, armpl_int_t *mm, armpl_int_t *m, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void ztgsyl_(char *trans, armpl_int_t *ijob, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *d, armpl_int_t *ldd, armpl_doublecomplex_t *e, armpl_int_t *lde, armpl_doublecomplex_t *f, armpl_int_t *ldf, double *scale, double *dif, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *iwork, armpl_int_t *info );
void ztpcon_(char *norm, char *uplo, char *diag, armpl_int_t *n, armpl_doublecomplex_t *ap, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void ztpmqrt_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, armpl_int_t *nb, armpl_doublecomplex_t *v, armpl_int_t *ldv, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *info );
void ztpqrt2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_int_t *info);
void ztpqrt_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, armpl_int_t *nb, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_doublecomplex_t *work, armpl_int_t *info);
void ztprfb_(char *side, char *trans, char *direct, char *storev, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *v, armpl_int_t *ldv, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *work, armpl_int_t *ldwork );
void ztprfs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void ztptri_(char *uplo, char *diag, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_int_t *info );
void ztptrs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void ztpttf_(char *transr, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *arf, armpl_int_t *info );
void ztpttr_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void ztrcon_(char *norm, char *uplo, char *diag, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *rcond, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void ztrevc3_(char *side, char *howmny, armpl_int_t *select, armpl_int_t *n, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_doublecomplex_t *vl, armpl_int_t *ldvl, armpl_doublecomplex_t *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *lrwork, armpl_int_t *info );
void ztrevc_(char *side, char *howmny, armpl_int_t *select, armpl_int_t *n, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_doublecomplex_t *vl, armpl_int_t *ldvl, armpl_doublecomplex_t *vr, armpl_int_t *ldvr, armpl_int_t *mm, armpl_int_t *m, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void ztrexc_(char *compq, armpl_int_t *n, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_doublecomplex_t *q, armpl_int_t *ldq, armpl_int_t *ifst, armpl_int_t *ilst, armpl_int_t *info );
void ztrrfs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *info );
void ztrsen_(char *job, char *compq, armpl_int_t *select, armpl_int_t *n, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_doublecomplex_t *q, armpl_int_t *ldq, armpl_doublecomplex_t *w, armpl_int_t *m, double *s, double *sep, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void ztrsna_(char *job, char *howmny, armpl_int_t *select, armpl_int_t *n, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_doublecomplex_t *vl, armpl_int_t *ldvl, armpl_doublecomplex_t *vr, armpl_int_t *ldvr, double *s, double *sep, armpl_int_t *mm, armpl_int_t *m, armpl_doublecomplex_t *work, armpl_int_t *ldwork, double *rwork, armpl_int_t *info );
void ztrsyl_(char *trana, char *tranb, armpl_int_t *isgn, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *c, armpl_int_t *ldc, double *scale, armpl_int_t *info );
void ztrtri_(char *uplo, char *diag, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void ztrtrs_(char *uplo, char *trans, char *diag, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void ztrttf_(char *transr, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *arf, armpl_int_t *info );
void ztrttp_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *ap, armpl_int_t *info );
void ztzrqf_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_int_t *info);
void ztzrzf_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zunbdb_(char *trans, char *signs, armpl_int_t *m, armpl_int_t *p, armpl_int_t *q, armpl_doublecomplex_t *x11, armpl_int_t *ldx11, armpl_doublecomplex_t *x12, armpl_int_t *ldx12, armpl_doublecomplex_t *x21, armpl_int_t *ldx21, armpl_doublecomplex_t *x22, armpl_int_t *ldx22, double *theta, double *phi, armpl_doublecomplex_t *taup1, armpl_doublecomplex_t *taup2, armpl_doublecomplex_t *tauq1, armpl_doublecomplex_t *tauq2, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zuncsd_(char *jobu1, char *jobu2, char *jobv1t, char *jobv2t, char *trans, char *signs, armpl_int_t *m, armpl_int_t *p, armpl_int_t *q, armpl_doublecomplex_t *x11, armpl_int_t *ldx11, armpl_doublecomplex_t *x12, armpl_int_t *ldx12, armpl_doublecomplex_t *x21, armpl_int_t *ldx21, armpl_doublecomplex_t *x22, armpl_int_t *ldx22, double *theta, armpl_doublecomplex_t *u1, armpl_int_t *ldu1, armpl_doublecomplex_t *u2, armpl_int_t *ldu2, armpl_doublecomplex_t *v1t, armpl_int_t *ldv1t, armpl_doublecomplex_t *v2t, armpl_int_t *ldv2t, armpl_doublecomplex_t *work, armpl_int_t *lwork, double *rwork, armpl_int_t *lrwork, armpl_int_t *iwork, armpl_int_t *info );
void zungbr_(char *vect, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zunghr_(armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zunglq_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zungql_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zungqr_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zungrq_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zungtr_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zunmbr_(char *vect, char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zunmhr_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zunmlq_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zunmql_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zunmqr_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zunmrq_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zunmrz_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zunmtr_(char *side, char *uplo, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info );
void zupgtr_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *q, armpl_int_t *ldq, armpl_doublecomplex_t *work, armpl_int_t *info );
void zupmtr_(char *side, char *uplo, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *info );

/* LAPACK auxiliaries */
void cgbtf2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void cgebd2_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *d, float *e, armpl_singlecomplex_t *tauq, armpl_singlecomplex_t *taup, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgehd2_(armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgelq2_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgeql2_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgeqr2_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgerq2_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cgesc2_(armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *rhs, armpl_int_t *ipiv, armpl_int_t *jpiv, float *scale);
void cgetc2_(armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *jpiv, armpl_int_t *info);
void cgetf2_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void cgtts2_(armpl_int_t *itrans, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *dl, armpl_singlecomplex_t *d, armpl_singlecomplex_t *du, armpl_singlecomplex_t *du2, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t *ldb);
void chegs2_(armpl_int_t *itype, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void chetd2_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *d, float *e, armpl_singlecomplex_t *tau, armpl_int_t *info );
void chetf2_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info );
void clabrd_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nb, armpl_singlecomplex_t *a, armpl_int_t *lda, float *d, float *e, armpl_singlecomplex_t *tauq, armpl_singlecomplex_t *taup, armpl_singlecomplex_t *x, armpl_int_t *ldx, armpl_singlecomplex_t *y, armpl_int_t *ldy);
void clacgv_(armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx);
void clacn2_(armpl_int_t *n, armpl_singlecomplex_t *v, armpl_singlecomplex_t *x, float *est, armpl_int_t *kase, armpl_int_t *isave);
void clacon_(armpl_int_t *n, armpl_singlecomplex_t *v, armpl_singlecomplex_t *x, float *est, armpl_int_t *kase);
void clacp2_(char *uplo, armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb );
void clacpy_(char *uplo, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb );
void clacrm_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, armpl_singlecomplex_t *c, armpl_int_t *ldc, float *rwork);
void clacrt_(armpl_int_t *n, armpl_singlecomplex_t *cx, armpl_int_t *incx, armpl_singlecomplex_t *cy, armpl_int_t *incy, armpl_singlecomplex_t *c, armpl_singlecomplex_t *s);
armpl_singlecomplex_t cladiv_(armpl_singlecomplex_t *ret_val, armpl_singlecomplex_t *x, armpl_singlecomplex_t *y);
void claed0_(armpl_int_t *qsiz, armpl_int_t *n, float *d, float *e, armpl_singlecomplex_t *q, armpl_int_t *ldq, armpl_singlecomplex_t *qstore, armpl_int_t *ldqs, float *rwork, armpl_int_t *iwork, armpl_int_t *info);
void claed7_(armpl_int_t *n, armpl_int_t *cutpnt, armpl_int_t *qsiz, armpl_int_t *tlvls, armpl_int_t *curlvl, armpl_int_t *curpbm, float *d, armpl_singlecomplex_t *q, armpl_int_t *ldq, float *rho, armpl_int_t *indxq, float *qstore, armpl_int_t *qptr, armpl_int_t *prmptr, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, float *givnum, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *info);
void claed8_(armpl_int_t *k, armpl_int_t *n, armpl_int_t *qsiz, armpl_singlecomplex_t *q, armpl_int_t *ldq, float *d, float *rho, armpl_int_t *cutpnt, float *z, float *dlamda, armpl_singlecomplex_t *q2, armpl_int_t *ldq2, float *w, armpl_int_t *indxp, armpl_int_t *indx, armpl_int_t *indxq, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, float *givnum, armpl_int_t *info);
void claein_(armpl_int_t *rightv, armpl_int_t *noinit, armpl_int_t *n, armpl_singlecomplex_t *h, armpl_int_t *ldh, armpl_singlecomplex_t *w, armpl_singlecomplex_t *v, armpl_singlecomplex_t *b, armpl_int_t *ldb, float *rwork, float *eps3, float *smlnum, armpl_int_t *info);
void claesy_(armpl_singlecomplex_t *a, armpl_singlecomplex_t *b, armpl_singlecomplex_t *c, armpl_singlecomplex_t *rt1, armpl_singlecomplex_t *rt2, armpl_singlecomplex_t *evscal, armpl_singlecomplex_t *cs1, armpl_singlecomplex_t *sn1);
void claev2_(armpl_singlecomplex_t *a, armpl_singlecomplex_t *b, armpl_singlecomplex_t *c, float *rt1, float *rt2, float *cs1, armpl_singlecomplex_t *sn1);
void clag2z_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *sa, armpl_int_t *ldsa, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *info);
void clags2_(armpl_int_t *upper, float *a1, armpl_singlecomplex_t *a2, float *a3, float *b1, armpl_singlecomplex_t *b2, float *b3, float *csu, armpl_singlecomplex_t *snu, float *csv, armpl_singlecomplex_t *snv, float *csq, armpl_singlecomplex_t *snq);
void clagtm_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, float *alpha, armpl_singlecomplex_t *dl, armpl_singlecomplex_t *d, armpl_singlecomplex_t *du, armpl_singlecomplex_t *x, armpl_int_t *ldx, float *beta, armpl_singlecomplex_t *b, armpl_int_t *ldb );
void clahef_(char *uplo, armpl_int_t *n, armpl_int_t *nb, armpl_int_t *kb, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *w, armpl_int_t *ldw, armpl_int_t *info );
void clahqr_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_singlecomplex_t *h, armpl_int_t *ldh, armpl_singlecomplex_t *w, armpl_int_t *iloz, armpl_int_t *ihiz, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_int_t *info);
void clahr2_(armpl_int_t *n, armpl_int_t *k, armpl_int_t *nb, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_singlecomplex_t *y, armpl_int_t *ldy);
void clahrd_(armpl_int_t *n, armpl_int_t *k, armpl_int_t *nb, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_singlecomplex_t *y, armpl_int_t *ldy);
void claic1_(armpl_int_t *job, armpl_int_t *j, armpl_singlecomplex_t *x, float *sest, armpl_singlecomplex_t *w, armpl_singlecomplex_t *gamma, float *sestpr, armpl_singlecomplex_t *s, armpl_singlecomplex_t *c);
void clals0_(armpl_int_t *icompq, armpl_int_t *nl, armpl_int_t *nr, armpl_int_t *sqre, armpl_int_t *nrhs, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *bx, armpl_int_t *ldbx, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, armpl_int_t *ldgcol, float *givnum, armpl_int_t *ldgnum, float *poles, float *difl, float *difr, float *z, armpl_int_t *k, float *c, float *s, float *rwork, armpl_int_t *info);
void clalsa_(armpl_int_t *icompq, armpl_int_t *smlsiz, armpl_int_t *n, armpl_int_t *nrhs, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *bx, armpl_int_t *ldbx, float *u, armpl_int_t *ldu, float *vt, armpl_int_t *k, float *difl, float *difr, float *z, float *poles, armpl_int_t *givptr, armpl_int_t *givcol, armpl_int_t *ldgcol, armpl_int_t *perm, float *givnum, float *c, float *s, float *rwork, armpl_int_t *iwork, armpl_int_t *info);
void clalsd_(char *uplo, armpl_int_t *smlsiz, armpl_int_t *n, armpl_int_t *nrhs, float *d, float *e, armpl_singlecomplex_t *b, armpl_int_t *ldb, float *rcond, armpl_int_t *rank, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *info );
float clangb_(char *norm, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *work );
float clange_(char *norm, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *work );
float clangt_(char *norm, armpl_int_t *n, armpl_singlecomplex_t *dl, armpl_singlecomplex_t *d, armpl_singlecomplex_t *du );
float clanhb_(char *norm, char *uplo, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *work );
float clanhe_(char *norm, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *work );
float clanhp_(char *norm, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, float *work );
float clanhs_(char *norm, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *work );
float clanht_(char *norm, armpl_int_t *n, float *d, armpl_singlecomplex_t *e );
float clansb_(char *norm, char *uplo, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *work );
float clansp_(char *norm, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, float *work );
float clansy_(char *norm, char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *work );
float clantb_(char *norm, char *uplo, char *diag, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *work );
float clantp_(char *norm, char *uplo, char *diag, armpl_int_t *n, armpl_singlecomplex_t *ap, float *work );
float clantr_(char *norm, char *uplo, char *diag, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *work );
void clapll_(armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *y, armpl_int_t *incy, float *ssmin);
void clapmt_(armpl_int_t *forwrd, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *ldx, armpl_int_t *k);
void claqgb_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void claqge_(armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void claqhb_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *s, float *scond, float *amax, char *equed );
void claqhe_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *s, float *scond, float *amax, char *equed );
void claqhp_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, float *s, float *scond, float *amax, char *equed );
void claqp2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *offset, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *jpvt, armpl_singlecomplex_t *tau, float *vn1, float *vn2, armpl_singlecomplex_t *work);
void claqps_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *offset, armpl_int_t *nb, armpl_int_t *kb, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *jpvt, armpl_singlecomplex_t *tau, float *vn1, float *vn2, armpl_singlecomplex_t *auxv, armpl_singlecomplex_t *f, armpl_int_t *ldf);
void claqr0_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_singlecomplex_t *h, armpl_int_t *ldh, armpl_singlecomplex_t *w, armpl_int_t *iloz, armpl_int_t *ihiz, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void claqr1_(armpl_int_t *n, armpl_singlecomplex_t *h, armpl_int_t *ldh, armpl_singlecomplex_t *s1, armpl_singlecomplex_t *s2, armpl_singlecomplex_t *v);
void claqr2_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ktop, armpl_int_t *kbot, armpl_int_t *nw, armpl_singlecomplex_t *h, armpl_int_t *ldh, armpl_int_t *iloz, armpl_int_t *ihiz, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, armpl_singlecomplex_t *sh, armpl_singlecomplex_t *v, armpl_int_t *ldv, armpl_int_t *nh, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_int_t *nv, armpl_singlecomplex_t *wv, armpl_int_t *ldwv, armpl_singlecomplex_t *work, armpl_int_t *lwork);
void claqr3_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ktop, armpl_int_t *kbot, armpl_int_t *nw, armpl_singlecomplex_t *h, armpl_int_t *ldh, armpl_int_t *iloz, armpl_int_t *ihiz, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, armpl_singlecomplex_t *sh, armpl_singlecomplex_t *v, armpl_int_t *ldv, armpl_int_t *nh, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_int_t *nv, armpl_singlecomplex_t *wv, armpl_int_t *ldwv, armpl_singlecomplex_t *work, armpl_int_t *lwork);
void claqr4_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_singlecomplex_t *h, armpl_int_t *ldh, armpl_singlecomplex_t *w, armpl_int_t *iloz, armpl_int_t *ihiz, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void claqr5_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *kacc22, armpl_int_t *n, armpl_int_t *ktop, armpl_int_t *kbot, armpl_int_t *nshfts, armpl_singlecomplex_t *s, armpl_singlecomplex_t *h, armpl_int_t *ldh, armpl_int_t *iloz, armpl_int_t *ihiz, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *v, armpl_int_t *ldv, armpl_singlecomplex_t *u, armpl_int_t *ldu, armpl_int_t *nv, armpl_singlecomplex_t *wv, armpl_int_t *ldwv, armpl_int_t *nh, armpl_singlecomplex_t *wh, armpl_int_t *ldwh);
void claqsb_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, float *s, float *scond, float *amax, char *equed );
void claqsp_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *ap, float *s, float *scond, float *amax, char *equed );
void claqsy_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, float *s, float *scond, float *amax, char *equed );
void clar1v_(armpl_int_t *n, armpl_int_t *b1, armpl_int_t *bn, float *lambda, float *d, float *l, float *ld, float *lld, float *pivmin, float *gaptol, armpl_singlecomplex_t *z, armpl_int_t *wantnc, armpl_int_t *negcnt, float *ztz, float *mingma, armpl_int_t *r, armpl_int_t *isuppz, float *nrminv, float *resid, float *rqcorr, float *work);
void clar2v_(armpl_int_t *n, armpl_singlecomplex_t *x, armpl_singlecomplex_t *y, armpl_singlecomplex_t *z, armpl_int_t *incx, float *c, armpl_singlecomplex_t *s, armpl_int_t *incc);
void clarcm_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *c, armpl_int_t *ldc, float *rwork);
void clarfb_(char *side, char *trans, char *direct, char *storev, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *v, armpl_int_t *ldv, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *ldwork );
void clarf_(char *side, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *v, armpl_int_t *incv, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work );
void clarfg_(armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *tau);
void clarft_(char *direct, char *storev, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *v, armpl_int_t *ldv, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *t, armpl_int_t *ldt );
void clarfx_(char *side, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *v, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work );
void clargv_(armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *y, armpl_int_t *incy, float *c, armpl_int_t *incc);
void clarnv_(armpl_int_t *idist, armpl_int_t *iseed, armpl_int_t *n, armpl_singlecomplex_t *x);
void clarrv_(armpl_int_t *n, float *vl, float *vu, float *d, float *l, float *pivmin, armpl_int_t *isplit, armpl_int_t *m, armpl_int_t *dol, armpl_int_t *dou, float *minrgp, float *rtol1, float *rtol2, float *w, float *werr, float *wgap, armpl_int_t *iblock, armpl_int_t *indexw, float *gers, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_int_t *isuppz, float *work, armpl_int_t *iwork, armpl_int_t *info);
void clartg_(armpl_singlecomplex_t *f, armpl_singlecomplex_t *g, float *cs, armpl_singlecomplex_t *sn, armpl_singlecomplex_t *r);
void clartv_(armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *y, armpl_int_t *incy, float *c, armpl_singlecomplex_t *s, armpl_int_t *incc);
void clarzb_(char *side, char *trans, char *direct, char *storev, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *v, armpl_int_t *ldv, armpl_singlecomplex_t *t, armpl_int_t *ldt, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *ldwork );
void clarz_(char *side, armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, armpl_singlecomplex_t *v, armpl_int_t *incv, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work );
void clarzt_(char *direct, char *storev, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *v, armpl_int_t *ldv, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *t, armpl_int_t *ldt );
void clascl_(char *type, armpl_int_t *kl, armpl_int_t *ku, float *cfrom, float *cto, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void claset_(char *uplo, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *a, armpl_int_t *lda );
void clasr_(char *side, char *pivot, char *direct, armpl_int_t *m, armpl_int_t *n, float *c, float *s, armpl_singlecomplex_t *a, armpl_int_t *lda );
void claswp_(armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *k1, armpl_int_t *k2, armpl_int_t *ipiv, armpl_int_t *incx);
void clasyf_(char *uplo, armpl_int_t *n, armpl_int_t *nb, armpl_int_t *kb, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_singlecomplex_t *w, armpl_int_t *ldw, armpl_int_t *info );
void clatbs_(char *uplo, char *trans, char *diag, char *normin, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_singlecomplex_t *x, float *scale, float *cnorm, armpl_int_t *info );
void clatdf_(armpl_int_t *ijob, armpl_int_t *n, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_singlecomplex_t *rhs, float *rdsum, float *rdscal, armpl_int_t *ipiv, armpl_int_t *jpiv);
void clatps_(char *uplo, char *trans, char *diag, char *normin, armpl_int_t *n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *x, float *scale, float *cnorm, armpl_int_t *info );
void clatrd_(char *uplo, armpl_int_t *n, armpl_int_t *nb, armpl_singlecomplex_t *a, armpl_int_t *lda, float *e, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *w, armpl_int_t *ldw );
void clatrs_(char *uplo, char *trans, char *diag, char *normin, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *x, float *scale, float *cnorm, armpl_int_t *info );
void clatrz_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work);
void clatzm_(char *side, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *v, armpl_int_t *incv, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c1, armpl_singlecomplex_t *c2, armpl_int_t *ldc, armpl_singlecomplex_t *work );
void clauu2_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void clauum_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void cpbtf2_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_singlecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *info );
void cpotf2_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void cptts2_(armpl_int_t *iuplo, armpl_int_t *n, armpl_int_t *nrhs, float *d, armpl_singlecomplex_t *e, armpl_singlecomplex_t *b, armpl_int_t *ldb);
void crot_(armpl_int_t *n, armpl_singlecomplex_t *cx, armpl_int_t *incx, armpl_singlecomplex_t *cy, armpl_int_t *incy, float *c, armpl_singlecomplex_t *s);
void cspmv_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, armpl_int_t *incy );
void cspr_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *ap );
void csrscl_(armpl_int_t *n, float *sa, armpl_singlecomplex_t *sx, armpl_int_t *incx);
void csymv_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *y, armpl_int_t *incy );
void csyr_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *a, armpl_int_t *lda );
void csytf2_(char *uplo, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info );
void ctgex2_(armpl_int_t *wantq, armpl_int_t *wantz, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *q, armpl_int_t *ldq, armpl_singlecomplex_t *z, armpl_int_t *ldz, armpl_int_t *j1, armpl_int_t *info);
void ctgsy2_(char *trans, armpl_int_t *ijob, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *b, armpl_int_t *ldb, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *d, armpl_int_t *ldd, armpl_singlecomplex_t *e, armpl_int_t *lde, armpl_singlecomplex_t *f, armpl_int_t *ldf, float *scale, float *rdsum, float *rdscal, armpl_int_t *info );
void ctrti2_(char *uplo, char *diag, armpl_int_t *n, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void cung2l_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cung2r_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cungl2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cungr2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t *info);
void cunm2l_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *info );
void cunm2r_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *info );
void cunml2_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *info );
void cunmr2_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *info );
void cunmr3_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t *ldc, armpl_singlecomplex_t *work, armpl_int_t *info );
void dgbtf2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, double *ab, armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void dgebd2_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *d, double *e, double *tauq, double *taup, double *work, armpl_int_t *info);
void dgehd2_(armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dgelq2_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dgeql2_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dgeqr2_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dgerq2_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dgesc2_(armpl_int_t *n, double *a, armpl_int_t *lda, double *rhs, armpl_int_t *ipiv, armpl_int_t *jpiv, double *scale);
void dgetc2_(armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *jpiv, armpl_int_t *info);
void dgetf2_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void dgtts2_(armpl_int_t *itrans, armpl_int_t *n, armpl_int_t *nrhs, double *dl, double *d, double *du, double *du2, armpl_int_t *ipiv, double *b, armpl_int_t *ldb);
void dlabad_(double *small, double *large);
void dlabrd_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nb, double *a, armpl_int_t *lda, double *d, double *e, double *tauq, double *taup, double *x, armpl_int_t *ldx, double *y, armpl_int_t *ldy);
void dlacn2_(armpl_int_t *n, double *v, double *x, armpl_int_t *isgn, double *est, armpl_int_t *kase, armpl_int_t *isave);
void dlacon_(armpl_int_t *n, double *v, double *x, armpl_int_t *isgn, double *est, armpl_int_t *kase);
void dlacpy_(char *uplo, armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb );
void dladiv_(double *a, double *b, double *c, double *d, double *p, double *q);
void dlae2_(double *a, double *b, double *c, double *rt1, double *rt2);
void dlaebz_(armpl_int_t *ijob, armpl_int_t *nitmax, armpl_int_t *n, armpl_int_t *mmax, armpl_int_t *minp, armpl_int_t *nbmin, double *abstol, double *reltol, double *pivmin, double *d, double *e, double *e2, armpl_int_t *nval, double *ab, double *c, armpl_int_t *mout, armpl_int_t *nab, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlaed0_(armpl_int_t *icompq, armpl_int_t *qsiz, armpl_int_t *n, double *d, double *e, double *q, armpl_int_t *ldq, double *qstore, armpl_int_t *ldqs, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlaed1_(armpl_int_t *n, double *d, double *q, armpl_int_t *ldq, armpl_int_t *indxq, double *rho, armpl_int_t *cutpnt, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlaed2_(armpl_int_t *k, armpl_int_t *n, armpl_int_t *n1, double *d, double *q, armpl_int_t *ldq, armpl_int_t *indxq, double *rho, double *z, double *dlamda, double *w, double *q2, armpl_int_t *indx, armpl_int_t *indxc, armpl_int_t *indxp, armpl_int_t *coltyp, armpl_int_t *info);
void dlaed3_(armpl_int_t *k, armpl_int_t *n, armpl_int_t *n1, double *d, double *q, armpl_int_t *ldq, double *rho, double *dlamda, double *q2, armpl_int_t *indx, armpl_int_t *ctot, double *w, double *s, armpl_int_t *info);
void dlaed4_(armpl_int_t *n, armpl_int_t *i, double *d, double *z, double *delta, double *rho, double *dlam, armpl_int_t *info);
void dlaed5_(armpl_int_t *i, double *d, double *z, double *delta, double *rho, double *dlam);
void dlaed6_(armpl_int_t *kniter, armpl_int_t *orgati, double *rho, double *d, double *z, double *finit, double *tau, armpl_int_t *info);
void dlaed7_(armpl_int_t *icompq, armpl_int_t *n, armpl_int_t *qsiz, armpl_int_t *tlvls, armpl_int_t *curlvl, armpl_int_t *curpbm, double *d, double *q, armpl_int_t *ldq, armpl_int_t *indxq, double *rho, armpl_int_t *cutpnt, double *qstore, armpl_int_t *qptr, armpl_int_t *prmptr, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, double *givnum, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlaed8_(armpl_int_t *icompq, armpl_int_t *k, armpl_int_t *n, armpl_int_t *qsiz, double *d, double *q, armpl_int_t *ldq, armpl_int_t *indxq, double *rho, armpl_int_t *cutpnt, double *z, double *dlamda, double *q2, armpl_int_t *ldq2, double *w, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, double *givnum, armpl_int_t *indxp, armpl_int_t *indx, armpl_int_t *info);
void dlaed9_(armpl_int_t *k, armpl_int_t *kstart, armpl_int_t *kstop, armpl_int_t *n, double *d, double *q, armpl_int_t *ldq, double *rho, double *dlamda, double *w, double *s, armpl_int_t *lds, armpl_int_t *info);
void dlaeda_(armpl_int_t *n, armpl_int_t *tlvls, armpl_int_t *curlvl, armpl_int_t *curpbm, armpl_int_t *prmptr, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, double *givnum, double *q, armpl_int_t *qptr, double *z, double *ztemp, armpl_int_t *info);
void dlaein_(armpl_int_t *rightv, armpl_int_t *noinit, armpl_int_t *n, double *h, armpl_int_t *ldh, double *wr, double *wi, double *vr, double *vi, double *b, armpl_int_t *ldb, double *work, double *eps3, double *smlnum, double *bignum, armpl_int_t *info);
void dlaev2_(double *a, double *b, double *c, double *rt1, double *rt2, double *cs1, double *sn1);
void dlaexc_(armpl_int_t *wantq, armpl_int_t *n, double *t, armpl_int_t *ldt, double *q, armpl_int_t *ldq, armpl_int_t *j1, armpl_int_t *n1, armpl_int_t *n2, double *work, armpl_int_t *info);
void dlag2_(double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *safmin, double *scale1, double *scale2, double *wr1, double *wr2, double *wi);
void dlag2s_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, float *sa, armpl_int_t *ldsa, armpl_int_t *info);
void dlags2_(armpl_int_t *upper, double *a1, double *a2, double *a3, double *b1, double *b2, double *b3, double *csu, double *snu, double *csv, double *snv, double *csq, double *snq);
void dlagtf_(armpl_int_t *n, double *a, double *lambda, double *b, double *c, double *tol, double *d, armpl_int_t *in, armpl_int_t *info);
void dlagtm_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, double *alpha, double *dl, double *d, double *du, double *x, armpl_int_t *ldx, double *beta, double *b, armpl_int_t *ldb );
void dlagts_(armpl_int_t *job, armpl_int_t *n, double *a, double *b, double *c, double *d, armpl_int_t *in, double *y, double *tol, armpl_int_t *info);
void dlagv2_(double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *alphar, double *alphai, double *beta, double *csl, double *snl, double *csr, double *snr);
void dlahqr_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, double *h, armpl_int_t *ldh, double *wr, double *wi, armpl_int_t *iloz, armpl_int_t *ihiz, double *z, armpl_int_t *ldz, armpl_int_t *info);
void dlahr2_(armpl_int_t *n, armpl_int_t *k, armpl_int_t *nb, double *a, armpl_int_t *lda, double *tau, double *t, armpl_int_t *ldt, double *y, armpl_int_t *ldy);
void dlahrd_(armpl_int_t *n, armpl_int_t *k, armpl_int_t *nb, double *a, armpl_int_t *lda, double *tau, double *t, armpl_int_t *ldt, double *y, armpl_int_t *ldy);
void dlaic1_(armpl_int_t *job, armpl_int_t *j, double *x, double *sest, double *w, double *gamma, double *sestpr, double *s, double *c);
armpl_int_t dlaisnan_(double *din1, double *din2);
void dlaln2_(armpl_int_t *ltrans, armpl_int_t *na, armpl_int_t *nw, double *smin, double *ca, double *a, armpl_int_t *lda, double *d1, double *d2, double *b, armpl_int_t *ldb, double *wr, double *wi, double *x, armpl_int_t *ldx, double *scale, double *xnorm, armpl_int_t *info);
void dlals0_(armpl_int_t *icompq, armpl_int_t *nl, armpl_int_t *nr, armpl_int_t *sqre, armpl_int_t *nrhs, double *b, armpl_int_t *ldb, double *bx, armpl_int_t *ldbx, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, armpl_int_t *ldgcol, double *givnum, armpl_int_t *ldgnum, double *poles, double *difl, double *difr, double *z, armpl_int_t *k, double *c, double *s, double *work, armpl_int_t *info);
void dlalsa_(armpl_int_t *icompq, armpl_int_t *smlsiz, armpl_int_t *n, armpl_int_t *nrhs, double *b, armpl_int_t *ldb, double *bx, armpl_int_t *ldbx, double *u, armpl_int_t *ldu, double *vt, armpl_int_t *k, double *difl, double *difr, double *z, double *poles, armpl_int_t *givptr, armpl_int_t *givcol, armpl_int_t *ldgcol, armpl_int_t *perm, double *givnum, double *c, double *s, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlalsd_(char *uplo, armpl_int_t *smlsiz, armpl_int_t *n, armpl_int_t *nrhs, double *d, double *e, double *b, armpl_int_t *ldb, double *rcond, armpl_int_t *rank, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dlamrg_(armpl_int_t *n1, armpl_int_t *n2, double *a, armpl_int_t *dtrd1, armpl_int_t *dtrd2, armpl_int_t *index);
armpl_int_t dlaneg_(armpl_int_t *n, double *d, double *lld, double *sigma, double *pivmin, armpl_int_t *r);
double dlangb_(char *norm, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, double *ab, armpl_int_t *ldab, double *work );
double dlange_(char *norm, armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *work );
double dlangt_(char *norm, armpl_int_t *n, double *dl, double *d, double *du );
double dlanhs_(char *norm, armpl_int_t *n, double *a, armpl_int_t *lda, double *work );
double dlansb_(char *norm, char *uplo, armpl_int_t *n, armpl_int_t *k, double *ab, armpl_int_t *ldab, double *work );
double dlansp_(char *norm, char *uplo, armpl_int_t *n, double *ap, double *work );
double dlanst_(char *norm, armpl_int_t *n, double *d, double *e );
double dlansy_(char *norm, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *work );
double dlantb_(char *norm, char *uplo, char *diag, armpl_int_t *n, armpl_int_t *k, double *ab, armpl_int_t *ldab, double *work );
double dlantp_(char *norm, char *uplo, char *diag, armpl_int_t *n, double *ap, double *work );
double dlantr_(char *norm, char *uplo, char *diag, armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *work );
void dlanv2_(double *a, double *b, double *c, double *d, double *rt1r, double *rt1i, double *rt2r, double *rt2i, double *cs, double *sn);
void dlapll_(armpl_int_t *n, double *x, armpl_int_t *incx, double *y, armpl_int_t *incy, double *ssmin);
void dlapmt_(armpl_int_t *forwrd, armpl_int_t *m, armpl_int_t *n, double *x, armpl_int_t *ldx, armpl_int_t *k);
double dlapy2_(double *x, double *y);
double dlapy3_(double *x, double *y, double *z);
void dlaqgb_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, double *ab, armpl_int_t *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void dlaqge_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void dlaqp2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *offset, double *a, armpl_int_t *lda, armpl_int_t *jpvt, double *tau, double *vn1, double *vn2, double *work);
void dlaqps_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *offset, armpl_int_t *nb, armpl_int_t *kb, double *a, armpl_int_t *lda, armpl_int_t *jpvt, double *tau, double *vn1, double *vn2, double *auxv, double *f, armpl_int_t *ldf);
void dlaqr0_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, double *h, armpl_int_t *ldh, double *wr, double *wi, armpl_int_t *iloz, armpl_int_t *ihiz, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dlaqr1_(armpl_int_t *n, double *h, armpl_int_t *ldh, double *sr1, double *si1, double *sr2, double *si2, double *v);
void dlaqr2_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ktop, armpl_int_t *kbot, armpl_int_t *nw, double *h, armpl_int_t *ldh, armpl_int_t *iloz, armpl_int_t *ihiz, double *z, armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, double *sr, double *si, double *v, armpl_int_t *ldv, armpl_int_t *nh, double *t, armpl_int_t *ldt, armpl_int_t *nv, double *wv, armpl_int_t *ldwv, double *work, armpl_int_t *lwork);
void dlaqr3_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ktop, armpl_int_t *kbot, armpl_int_t *nw, double *h, armpl_int_t * ldh, armpl_int_t *iloz, armpl_int_t *ihiz, double *z, armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, double *sr, double *si, double * v, armpl_int_t *ldv, armpl_int_t *nh, double *t, armpl_int_t *ldt, armpl_int_t * nv, double *wv, armpl_int_t *ldwv, double *work, armpl_int_t *lwork);
void dlaqr4_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, double *h, armpl_int_t *ldh, double *wr, double *wi, armpl_int_t *iloz, armpl_int_t *ihiz, double *z, armpl_int_t *ldz, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dlaqr5_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *kacc22, armpl_int_t *n, armpl_int_t *ktop, armpl_int_t *kbot, armpl_int_t *nshfts, double *sr, double *si, double *h, armpl_int_t *ldh, armpl_int_t *iloz, armpl_int_t *ihiz, double *z, armpl_int_t *ldz, double *v, armpl_int_t *ldv, double *u, armpl_int_t *ldu, armpl_int_t *nv, double *wv, armpl_int_t *ldwv, armpl_int_t *nh, double *wh, armpl_int_t *ldwh);
void dlaqsb_(char *uplo, armpl_int_t *n, armpl_int_t *kd, double *ab, armpl_int_t *ldab, double *s, double *scond, double *amax, char *equed );
void dlaqsp_(char *uplo, armpl_int_t *n, double *ap, double *s, double *scond, double *amax, char *equed );
void dlaqsy_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *s, double *scond, double *amax, char *equed );
void dlaqtr_(armpl_int_t *ltran, armpl_int_t *lfloat, armpl_int_t *n, double *t, armpl_int_t *ldt, double *b, double *w, double *scale, double *x, double *work, armpl_int_t *info);
void dlar1v_(armpl_int_t *n, armpl_int_t *b1, armpl_int_t *bn, double *lambda, double *d, double *l, double *ld, double *lld, double *pivmin, double *gaptol, double *z, armpl_int_t *wantnc, armpl_int_t *negcnt, double *ztz, double *mingma, armpl_int_t *r, armpl_int_t *isuppz, double *nrminv, double *resid, double *rqcorr, double *work);
void dlar2v_(armpl_int_t *n, double *x, double *y, double *z, armpl_int_t *incx, double *c, double *s, armpl_int_t *incc);
void dlarfb_(char *side, char *trans, char *direct, char *storev, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *v, armpl_int_t *ldv, double *t, armpl_int_t *ldt, double *c, armpl_int_t *ldc, double *work, armpl_int_t *ldwork );
void dlarf_(char *side, armpl_int_t *m, armpl_int_t *n, double *v, armpl_int_t *incv, double *tau, double *c, armpl_int_t *ldc, double *work );
void dlarfg_(armpl_int_t *n, double *alpha, double *x, armpl_int_t *incx, double *tau);
void dlarfx_(char *side, armpl_int_t *m, armpl_int_t *n, double *v, double *tau, double *c, armpl_int_t *ldc, double *work );
void dlargv_(armpl_int_t *n, double *x, armpl_int_t *incx, double *y, armpl_int_t *incy, double *c, armpl_int_t *incc);
void dlarnv_(armpl_int_t *idist, armpl_int_t *iseed, armpl_int_t *n, double *x);
void dlarra_(armpl_int_t *n, double *d, double *e, double *e2, double *spltol, double *tnrm, armpl_int_t *nsplit, armpl_int_t *isplit, armpl_int_t *info);
void dlarrb_(armpl_int_t *n, double *d, double *lld, armpl_int_t *ifirst, armpl_int_t *ilast, double *rtol1, double *rtol2, armpl_int_t *offset, double *w, double *wgap, double *werr, double *work, armpl_int_t *iwork, double *pivmin, double *spdiam, armpl_int_t *twist, armpl_int_t *info);
void dlarrc_(char *jobt, armpl_int_t *n, double *vl, double *vu, double *d, double *e, double *pivmin, armpl_int_t *eigcnt, armpl_int_t *lcnt, armpl_int_t *rcnt, armpl_int_t *info );
void dlarrd_(char *range, char *order, armpl_int_t *n, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *gers, double *reltol, double *d, double *e, double *e2, double *pivmin, armpl_int_t *nsplit, armpl_int_t *isplit, armpl_int_t *m, double *w, double *werr, double *wl, double *wu, armpl_int_t *iblock, armpl_int_t *indexw, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dlarre_(char *range, armpl_int_t *n, double *vl, double *vu, armpl_int_t *il, armpl_int_t *iu, double *d, double *e, double *e2, double *rtol1, double *rtol2, double *spltol, armpl_int_t *nsplit, armpl_int_t *isplit, armpl_int_t *m, double *w, double *werr, double *wgap, armpl_int_t *iblock, armpl_int_t *indexw, double *gers, double *pivmin, double *work, armpl_int_t *iwork, armpl_int_t *info );
void dlarrf_(armpl_int_t *n, double *d, double *l, double *ld, armpl_int_t *clstrt, armpl_int_t *clend, double *w, double *wgap, double *werr, double *spdiam, double *clgapl, double *clgapr, double *pivmin, double *sigma, double *dplus, double *lplus, double *work, armpl_int_t *info);
void dlarrj_(armpl_int_t *n, double *d, double *e2, armpl_int_t *ifirst, armpl_int_t *ilast, double *rtol, armpl_int_t *offset, double *w, double *werr, double *work, armpl_int_t *iwork, double *pivmin, double *spdiam, armpl_int_t *info);
void dlarrk_(armpl_int_t *n, armpl_int_t *iw, double *gl, double *gu, double *d, double *e2, double *pivmin, double *reltol, double *w, double *werr, armpl_int_t *info);
void dlarrr_(armpl_int_t *n, double *d, double *e, armpl_int_t *info);
void dlarrv_(armpl_int_t *n, double *vl, double *vu, double *d, double *l, double *pivmin, armpl_int_t *isplit, armpl_int_t *m, armpl_int_t *dol, armpl_int_t *dou, double *minrgp, double *rtol1, double *rtol2, double *w, double *werr, double *wgap, armpl_int_t *iblock, armpl_int_t *indexw, double *gers, double *z, armpl_int_t *ldz, armpl_int_t *isuppz, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlartg_(double *f, double *g, double *cs, double *sn, double *r);
void dlartv_(armpl_int_t *n, double *x, armpl_int_t *incx, double *y, armpl_int_t *incy, double *c, double *s, armpl_int_t *incc);
void dlaruv_(armpl_int_t *iseed, armpl_int_t *n, double *x);
void dlarzb_(char *side, char *trans, char *direct, char *storev, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, double *v, armpl_int_t *ldv, double *t, armpl_int_t *ldt, double *c, armpl_int_t *ldc, double *work, armpl_int_t *ldwork );
void dlarz_(char *side, armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, double *v, armpl_int_t *incv, double *tau, double *c, armpl_int_t *ldc, double *work );
void dlarzt_(char *direct, char *storev, armpl_int_t *n, armpl_int_t *k, double *v, armpl_int_t *ldv, double *tau, double *t, armpl_int_t *ldt );
void dlas2_(double *f, double *g, double *h, double *ssmin, double *ssmax);
void dlascl_(char *type, armpl_int_t *kl, armpl_int_t *ku, double *cfrom, double *cto, armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *info );
void dlasd0_(armpl_int_t *n, armpl_int_t *sqre, double *d, double *e, double *u, armpl_int_t *ldu, double *vt, armpl_int_t *ldvt, armpl_int_t *smlsiz, armpl_int_t *iwork, double *work, armpl_int_t *info);
void dlasd1_(armpl_int_t *nl, armpl_int_t *nr, armpl_int_t *sqre, double *d, double *alpha, double *beta, double *u, armpl_int_t *ldu, double *vt, armpl_int_t *ldvt, armpl_int_t *idxq, armpl_int_t *iwork, double *work, armpl_int_t *info);
void dlasd2_(armpl_int_t *nl, armpl_int_t *nr, armpl_int_t *sqre, armpl_int_t *k, double *d, double *z, double *alpha, double *beta, double *u, armpl_int_t *ldu, double *vt, armpl_int_t *ldvt, double *dsigma, double *u2, armpl_int_t *ldu2, double *vt2, armpl_int_t *ldvt2, armpl_int_t *idxp, armpl_int_t *idx, armpl_int_t *idxc, armpl_int_t *idxq, armpl_int_t *coltyp, armpl_int_t *info);
void dlasd3_(armpl_int_t *nl, armpl_int_t *nr, armpl_int_t *sqre, armpl_int_t *k, double *d, double *q, armpl_int_t *ldq, double *dsigma, double *u, armpl_int_t *ldu, double *u2, armpl_int_t *ldu2, double *vt, armpl_int_t *ldvt, double *vt2, armpl_int_t *ldvt2, armpl_int_t *idxc, armpl_int_t *ctot, double *z, armpl_int_t *info);
void dlasd4_(armpl_int_t *n, armpl_int_t *i, double *d, double *z, double *delta, double *rho, double *sigma, double *work, armpl_int_t *info);
void dlasd5_(armpl_int_t *i, double *d, double *z, double *delta, double *rho, double *dsigma, double *work);
void dlasd6_(armpl_int_t *icompq, armpl_int_t *nl, armpl_int_t *nr, armpl_int_t *sqre, double *d, double *vf, double *vl, double *alpha, double *beta, armpl_int_t *idxq, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, armpl_int_t *ldgcol, double *givnum, armpl_int_t *ldgnum, double *poles, double *difl, double *difr, double *z, armpl_int_t *k, double *c, double *s, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlasd7_(armpl_int_t *icompq, armpl_int_t *nl, armpl_int_t *nr, armpl_int_t *sqre, armpl_int_t *k, double *d, double *z, double *zw, double *vf, double *vfw, double *vl, double *vlw, double *alpha, double *beta, double *dsigma, armpl_int_t *idx, armpl_int_t *idxp, armpl_int_t *idxq, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, armpl_int_t *ldgcol, double *givnum, armpl_int_t *ldgnum, double *c, double *s, armpl_int_t *info);
void dlasd8_(armpl_int_t *icompq, armpl_int_t *k, double *d, double *z, double *vf, double *vl, double *difl, double *difr, armpl_int_t *lddifr, double *dsigma, double *work, armpl_int_t *info);
void dlasda_(armpl_int_t *icompq, armpl_int_t *smlsiz, armpl_int_t *n, armpl_int_t *sqre, double *d, double *e, double *u, armpl_int_t *ldu, double *vt, armpl_int_t *k, double *difl, double *difr, double *z, double *poles, armpl_int_t *givptr, armpl_int_t *givcol, armpl_int_t *ldgcol, armpl_int_t *perm, double *givnum, double *c, double *s, double *work, armpl_int_t *iwork, armpl_int_t *info);
void dlasdq_(char *uplo, armpl_int_t *sqre, armpl_int_t *n, armpl_int_t *ncvt, armpl_int_t *nru, armpl_int_t *ncc, double *d, double *e, double *vt, armpl_int_t *ldvt, double *u, armpl_int_t *ldu, double *c, armpl_int_t *ldc, double *work, armpl_int_t *info );
void dlasdt_(armpl_int_t *n, armpl_int_t *lvl, armpl_int_t *nd, armpl_int_t *inode, armpl_int_t *ndiml, armpl_int_t *ndimr, armpl_int_t *msub);
void dlaset_(char *uplo, armpl_int_t *m, armpl_int_t *n, double *alpha, double *beta, double *a, armpl_int_t *lda );
void dlasq1_(armpl_int_t *n, double *d, double *e, double *work, armpl_int_t *info);
void dlasq2_(armpl_int_t *n, double *z, armpl_int_t *info);
void dlasq3_(armpl_int_t *i0, armpl_int_t *n0, double *z, armpl_int_t *pp, double *dmin, double *sigma, double *desig, double *qmax, armpl_int_t *nfail, armpl_int_t *iter, armpl_int_t *ndiv, armpl_int_t *ieee, armpl_int_t *ttype, double *dmin1, double *dmin2, double *dn, double *dn1, double *dn2, double *g, double *tau);
void dlasq4_(armpl_int_t *i0, armpl_int_t *n0, double *z, armpl_int_t *pp, armpl_int_t *n0in, double *dmin, double *dmin1, double *dmin2, double *dn, double *dn1, double *dn2, double *tau, armpl_int_t *ttype, double *g);
void dlasq5_(armpl_int_t *i0, armpl_int_t *n0, double *z, armpl_int_t *pp, double *tau, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2, armpl_int_t *ieee);
void dlasq6_(armpl_int_t *i0, armpl_int_t *n0, double *z, armpl_int_t *pp, double *dmin, double *dmin1, double *dmin2, double *dn, double *dnm1, double *dnm2);
void dlasr_(char *side, char *pivot, char *direct, armpl_int_t *m, armpl_int_t *n, double *c, double *s, double *a, armpl_int_t *lda );
void dlasv2_(double *f, double *g, double *h, double *ssmin, double *ssmax, double *snr, double *csr, double *snl, double *csl);
void dlaswp_(armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *k1, armpl_int_t *k2, armpl_int_t *ipiv, armpl_int_t *incx);
void dlasy2_(armpl_int_t *ltranl, armpl_int_t *ltranr, armpl_int_t *isgn, armpl_int_t *n1, armpl_int_t *n2, double *tl, armpl_int_t *ldtl, double *tr, armpl_int_t *ldtr, double *b, armpl_int_t *ldb, double *scale, double *x, armpl_int_t *ldx, double *xnorm, armpl_int_t *info);
void dlasyf_(char *uplo, armpl_int_t *n, armpl_int_t *nb, armpl_int_t *kb, double *a, armpl_int_t *lda, armpl_int_t *ipiv, double *w, armpl_int_t *ldw, armpl_int_t *info );
void dlatbs_(char *uplo, char *trans, char *diag, char *normin, armpl_int_t *n, armpl_int_t *kd, double *ab, armpl_int_t *ldab, double *x, double *scale, double *cnorm, armpl_int_t *info );
void dlatdf_(armpl_int_t *ijob, armpl_int_t *n, double *z, armpl_int_t *ldz, double *rhs, double *rdsum, double *rdscal, armpl_int_t *ipiv, armpl_int_t *jpiv);
void dlatps_(char *uplo, char *trans, char *diag, char *normin, armpl_int_t *n, double *ap, double *x, double *scale, double *cnorm, armpl_int_t *info );
void dlatrd_(char *uplo, armpl_int_t *n, armpl_int_t *nb, double *a, armpl_int_t *lda, double *e, double *tau, double *w, armpl_int_t *ldw );
void dlatrs_(char *uplo, char *trans, char *diag, char *normin, armpl_int_t *n, double *a, armpl_int_t *lda, double *x, double *scale, double *cnorm, armpl_int_t *info );
void dlatrz_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, double *a, armpl_int_t *lda, double *tau, double *work);
void dlatzm_(char *side, armpl_int_t *m, armpl_int_t *n, double *v, armpl_int_t *incv, double *tau, double *c1, double *c2, armpl_int_t *ldc, double *work );
void dlauu2_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *info );
void dlauum_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *info );
void dorg2l_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dorg2r_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dorgl2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dorgr2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *work, armpl_int_t *info);
void dorm2l_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *c, armpl_int_t *ldc, double *work, armpl_int_t *info );
void dorm2r_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *c, armpl_int_t *ldc, double *work, armpl_int_t *info );
void dorml2_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *c, armpl_int_t *ldc, double *work, armpl_int_t *info );
void dormr2_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, double *a, armpl_int_t *lda, double *tau, double *c, armpl_int_t *ldc, double *work, armpl_int_t *info );
void dpbtf2_(char *uplo, armpl_int_t *n, armpl_int_t *kd, double *ab, armpl_int_t *ldab, armpl_int_t *info );
void dpotf2_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *info );
void dptts2_(armpl_int_t *n, armpl_int_t *nrhs, double *d, double *e, double *b, armpl_int_t *ldb);
void drscl_(armpl_int_t *n, double *sa, double *sx, armpl_int_t *incx);
void dsygs2_(armpl_int_t *itype, char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, armpl_int_t *info );
void dsytd2_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, double *d, double *e, double *tau, armpl_int_t *info );
void dsytf2_(char *uplo, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info );
void dtgex2_(armpl_int_t *wantq, armpl_int_t *wantz, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *q, armpl_int_t *ldq, double *z, armpl_int_t *ldz, armpl_int_t *j1, armpl_int_t *n1, armpl_int_t *n2, double *work, armpl_int_t *lwork, armpl_int_t *info);
void dtgsy2_(char *trans, armpl_int_t *ijob, armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, double *c, armpl_int_t *ldc, double *d, armpl_int_t *ldd, double *e, armpl_int_t *lde, double *f, armpl_int_t *ldf, double *scale, double *rdsum, double *rdscal, armpl_int_t *iwork, armpl_int_t *pq, armpl_int_t *info );
void dtrti2_(char *uplo, char *diag, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_int_t *info );
double dzsum1_(armpl_int_t *n, armpl_doublecomplex_t *cx, armpl_int_t *incx);
armpl_int_t icmax1_(armpl_int_t *n, armpl_singlecomplex_t *cx, armpl_int_t *incx);
armpl_int_t ieeeck_(armpl_int_t *ispec, float *zero, float *one);
armpl_int_t iparmq_(armpl_int_t *ispec, char *name, char *opts, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_int_t *lwork );
armpl_int_t izmax1_(armpl_int_t *n, armpl_doublecomplex_t *cx, armpl_int_t *incx);
armpl_int_t lsamen_(armpl_int_t *n, char *ca, char *cb );
float scsum1_(armpl_int_t *n, armpl_singlecomplex_t *cx, armpl_int_t *incx);
void sgbtf2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, float *ab, armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void sgebd2_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *d, float *e, float *tauq, float *taup, float *work, armpl_int_t *info);
void sgehd2_(armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sgelq2_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sgeql2_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sgeqr2_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sgerq2_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sgesc2_(armpl_int_t *n, float *a, armpl_int_t *lda, float *rhs, armpl_int_t *ipiv, armpl_int_t *jpiv, float *scale);
void sgetc2_(armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *jpiv, armpl_int_t *info);
void sgetf2_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void sgtts2_(armpl_int_t *itrans, armpl_int_t *n, armpl_int_t *nrhs, float *dl, float *d, float *du, float *du2, armpl_int_t *ipiv, float *b, armpl_int_t *ldb);
void slabad_(float *small, float *large);
void slabrd_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nb, float *a, armpl_int_t *lda, float *d, float *e, float *tauq, float *taup, float *x, armpl_int_t *ldx, float *y, armpl_int_t *ldy);
void slacn2_(armpl_int_t *n, float *v, float *x, armpl_int_t *isgn, float *est, armpl_int_t *kase, armpl_int_t *isave);
void slacon_(armpl_int_t *n, float *v, float *x, armpl_int_t *isgn, float *est, armpl_int_t *kase);
void slacpy_(char *uplo, armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb );
void sladiv_(float *a, float *b, float *c, float *d, float *p, float *q);
void slae2_(float *a, float *b, float *c, float *rt1, float *rt2);
void slaebz_(armpl_int_t *ijob, armpl_int_t *nitmax, armpl_int_t *n, armpl_int_t *mmax, armpl_int_t *minp, armpl_int_t *nbmin, float *abstol, float *reltol, float *pivmin, float *d, float *e, float *e2, armpl_int_t *nval, float *ab, float *c, armpl_int_t *mout, armpl_int_t *nab, float *work, armpl_int_t *iwork, armpl_int_t *info);
void slaed0_(armpl_int_t *icompq, armpl_int_t *qsiz, armpl_int_t *n, float *d, float *e, float *q, armpl_int_t *ldq, float *qstore, armpl_int_t *ldqs, float *work, armpl_int_t *iwork, armpl_int_t *info);
void slaed1_(armpl_int_t *n, float *d, float *q, armpl_int_t *ldq, armpl_int_t *indxq, float *rho, armpl_int_t *cutpnt, float *work, armpl_int_t * iwork, armpl_int_t *info);
void slaed2_(armpl_int_t *k, armpl_int_t *n, armpl_int_t *n1, float *d, float *q, armpl_int_t *ldq, armpl_int_t *indxq, float *rho, float *z, float *dlamda, float *w, float *q2, armpl_int_t *indx, armpl_int_t *indxc, armpl_int_t *indxp, armpl_int_t *coltyp, armpl_int_t *info);
void slaed3_(armpl_int_t *k, armpl_int_t *n, armpl_int_t *n1, float *d, float *q, armpl_int_t *ldq, float *rho, float *dlamda, float *q2, armpl_int_t *indx, armpl_int_t *ctot, float *w, float *s, armpl_int_t *info);
void slaed4_(armpl_int_t *n, armpl_int_t *i, float *d, float *z, float *delta, float *rho, float *dlam, armpl_int_t *info);
void slaed5_(armpl_int_t *i, float *d, float *z, float *delta, float *rho, float *dlam);
void slaed6_(armpl_int_t *kniter, armpl_int_t *orgati, float *rho, float *d, float *z, float *finit, float *tau, armpl_int_t *info);
void slaed7_(armpl_int_t *icompq, armpl_int_t *n, armpl_int_t *qsiz, armpl_int_t *tlvls, armpl_int_t *curlvl, armpl_int_t *curpbm, float *d, float *q, armpl_int_t *ldq, armpl_int_t *indxq, float *rho, armpl_int_t *cutpnt, float *qstore, armpl_int_t *qptr, armpl_int_t *prmptr, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, float *givnum, float *work, armpl_int_t *iwork, armpl_int_t *info);
void slaed8_(armpl_int_t *icompq, armpl_int_t *k, armpl_int_t *n, armpl_int_t *qsiz, float *d, float *q, armpl_int_t *ldq, armpl_int_t *indxq, float *rho, armpl_int_t *cutpnt, float *z, float *dlamda, float *q2, armpl_int_t *ldq2, float *w, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, float *givnum, armpl_int_t *indxp, armpl_int_t *indx, armpl_int_t *info);
void slaed9_(armpl_int_t *k, armpl_int_t *kstart, armpl_int_t *kstop, armpl_int_t *n, float *d, float *q, armpl_int_t *ldq, float *rho, float *dlamda, float *w, float *s, armpl_int_t *lds, armpl_int_t *info);
void slaeda_(armpl_int_t *n, armpl_int_t *tlvls, armpl_int_t *curlvl, armpl_int_t *curpbm, armpl_int_t *prmptr, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, float *givnum, float *q, armpl_int_t *qptr, float *z, float *ztemp, armpl_int_t *info);
void slaein_(armpl_int_t *rightv, armpl_int_t *noinit, armpl_int_t *n, float *h, armpl_int_t *ldh, float *wr, float *wi, float *vr, float *vi, float *b, armpl_int_t *ldb, float *work, float *eps3, float *smlnum, float *bignum, armpl_int_t *info);
void slaev2_(float *a, float *b, float *c, float *rt1, float *rt2, float *cs1, float *sn1);
void slaexc_(armpl_int_t *wantq, armpl_int_t *n, float *t, armpl_int_t *ldt, float *q, armpl_int_t *ldq, armpl_int_t *j1, armpl_int_t *n1, armpl_int_t *n2, float *work, armpl_int_t *info);
void slag2d_(armpl_int_t *m, armpl_int_t *n, float *sa, armpl_int_t *ldsa, double *a, armpl_int_t *lda, armpl_int_t *info);
void slag2_(float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *safmin, float *scale1, float *scale2, float *wr1, float *wr2, float *wi);
void slags2_(armpl_int_t *upper, float *a1, float *a2, float *a3, float *b1, float *b2, float *b3, float *csu, float *snu, float *csv, float *snv, float *csq, float *snq);
void slagtf_(armpl_int_t *n, float *a, float *lambda, float *b, float *c, float *tol, float *d, armpl_int_t *in, armpl_int_t *info);
void slagtm_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, float *alpha, float *dl, float *d, float *du, float *x, armpl_int_t *ldx, float *beta, float *b, armpl_int_t *ldb );
void slagts_(armpl_int_t *job, armpl_int_t *n, float *a, float *b, float *c, float *d, armpl_int_t *in, float *y, float *tol, armpl_int_t *info);
void slagv2_(float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *alphar, float *alphai, float *beta, float *csl, float *snl, float *csr, float *snr);
void slahqr_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, float *h, armpl_int_t *ldh, float *wr, float *wi, armpl_int_t *iloz, armpl_int_t *ihiz, float *z, armpl_int_t *ldz, armpl_int_t *info);
void slahr2_(armpl_int_t *n, armpl_int_t *k, armpl_int_t *nb, float *a, armpl_int_t *lda, float *tau, float *t, armpl_int_t *ldt, float *y, armpl_int_t *ldy);
void slahrd_(armpl_int_t *n, armpl_int_t *k, armpl_int_t *nb, float *a, armpl_int_t *lda, float *tau, float *t, armpl_int_t *ldt, float *y, armpl_int_t *ldy);
void slaic1_(armpl_int_t *job, armpl_int_t *j, float *x, float *sest, float *w, float *gamma, float *sestpr, float *s, float *c);
armpl_int_t slaisnan_(float *sin1, float *sin2);
void slaln2_(armpl_int_t *ltrans, armpl_int_t *na, armpl_int_t *nw, float *smin, float *ca, float *a, armpl_int_t *lda, float *d1, float *d2, float *b, armpl_int_t *ldb, float *wr, float *wi, float *x, armpl_int_t *ldx, float *scale, float *xnorm, armpl_int_t *info);
void slals0_(armpl_int_t *icompq, armpl_int_t *nl, armpl_int_t *nr, armpl_int_t *sqre, armpl_int_t *nrhs, float *b, armpl_int_t *ldb, float *bx, armpl_int_t *ldbx, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, armpl_int_t *ldgcol, float *givnum, armpl_int_t *ldgnum, float *poles, float *difl, float *difr, float *z, armpl_int_t *k, float *c, float *s, float *work, armpl_int_t *info);
void slalsa_(armpl_int_t *icompq, armpl_int_t *smlsiz, armpl_int_t *n, armpl_int_t *nrhs, float *b, armpl_int_t *ldb, float *bx, armpl_int_t *ldbx, float *u, armpl_int_t *ldu, float *vt, armpl_int_t *k, float *difl, float *difr, float *z, float *poles, armpl_int_t *givptr, armpl_int_t *givcol, armpl_int_t *ldgcol, armpl_int_t *perm, float *givnum, float *c, float *s, float *work, armpl_int_t *iwork, armpl_int_t *info);
void slalsd_(char *uplo, armpl_int_t *smlsiz, armpl_int_t *n, armpl_int_t *nrhs, float *d, float *e, float *b, armpl_int_t *ldb, float *rcond, armpl_int_t *rank, float *work, armpl_int_t *iwork, armpl_int_t *info );
void slamrg_(armpl_int_t *n1, armpl_int_t *n2, float *a, armpl_int_t *strd1, armpl_int_t *strd2, armpl_int_t *index);
armpl_int_t slaneg_(armpl_int_t *n, float *d, float *lld, float *sigma, float *pivmin, armpl_int_t *r);
float slangb_(char *norm, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, float *ab, armpl_int_t *ldab, float *work );
float slange_(char *norm, armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *work );
float slangt_(char *norm, armpl_int_t *n, float *dl, float *d, float *du );
float slanhs_(char *norm, armpl_int_t *n, float *a, armpl_int_t *lda, float *work );
float slansb_(char *norm, char *uplo, armpl_int_t *n, armpl_int_t *k, float *ab, armpl_int_t *ldab, float *work );
float slansp_(char *norm, char *uplo, armpl_int_t *n, float *ap, float *work );
float slanst_(char *norm, armpl_int_t *n, float *d, float *e );
float slansy_(char *norm, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *work );
float slantb_(char *norm, char *uplo, char *diag, armpl_int_t *n, armpl_int_t *k, float *ab, armpl_int_t *ldab, float *work );
float slantp_(char *norm, char *uplo, char *diag, armpl_int_t *n, float *ap, float *work );
float slantr_(char *norm, char *uplo, char *diag, armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *work );
void slanv2_(float *a, float *b, float *c, float *d, float *rt1r, float *rt1i, float *rt2r, float *rt2i, float *cs, float *sn);
void slapll_(armpl_int_t *n, float *x, armpl_int_t *incx, float *y, armpl_int_t *incy, float *ssmin);
void slapmt_(armpl_int_t *forwrd, armpl_int_t *m, armpl_int_t *n, float *x, armpl_int_t *ldx, armpl_int_t *k);
float slapy2_(float *x, float *y);
float slapy3_(float *x, float *y, float *z);
void slaqgb_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, float *ab, armpl_int_t *ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void slaqge_(armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax, char *equed );
void slaqp2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *offset, float *a, armpl_int_t *lda, armpl_int_t *jpvt, float *tau, float *vn1, float *vn2, float *work);
void slaqps_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *offset, armpl_int_t *nb, armpl_int_t *kb, float *a, armpl_int_t *lda, armpl_int_t *jpvt, float *tau, float *vn1, float *vn2, float *auxv, float *f, armpl_int_t *ldf);
void slaqr0_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, float *h, armpl_int_t *ldh, float *wr, float *wi, armpl_int_t *iloz, armpl_int_t *ihiz, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *info);
void slaqr1_(armpl_int_t *n, float *h, armpl_int_t *ldh, float *sr1, float *si1, float *sr2, float *si2, float *v);
void slaqr2_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ktop, armpl_int_t *kbot, armpl_int_t *nw, float *h, armpl_int_t *ldh, armpl_int_t *iloz, armpl_int_t *ihiz, float *z, armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, float *sr, float *si, float *v, armpl_int_t *ldv, armpl_int_t *nh, float *t, armpl_int_t *ldt, armpl_int_t *nv, float *wv, armpl_int_t *ldwv, float *work, armpl_int_t *lwork);
void slaqr3_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ktop, armpl_int_t *kbot, armpl_int_t *nw, float *h, armpl_int_t *ldh, armpl_int_t *iloz, armpl_int_t *ihiz, float *z, armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, float *sr, float *si, float *v, armpl_int_t *ldv, armpl_int_t *nh, float *t, armpl_int_t *ldt, armpl_int_t *nv, float *wv, armpl_int_t *ldwv, float * work, armpl_int_t *lwork);
void slaqr4_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, float *h, armpl_int_t *ldh, float *wr, float *wi, armpl_int_t *iloz, armpl_int_t *ihiz, float *z, armpl_int_t *ldz, float *work, armpl_int_t *lwork, armpl_int_t *info);
void slaqr5_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *kacc22, armpl_int_t *n, armpl_int_t *ktop, armpl_int_t *kbot, armpl_int_t *nshfts, float *sr, float *si, float *h, armpl_int_t *ldh, armpl_int_t *iloz, armpl_int_t *ihiz, float *z, armpl_int_t *ldz, float *v, armpl_int_t *ldv, float *u, armpl_int_t *ldu, armpl_int_t *nv, float *wv, armpl_int_t *ldwv, armpl_int_t *nh, float *wh, armpl_int_t *ldwh);
void slaqsb_(char *uplo, armpl_int_t *n, armpl_int_t *kd, float *ab, armpl_int_t *ldab, float *s, float *scond, float *amax, char *equed );
void slaqsp_(char *uplo, armpl_int_t *n, float *ap, float *s, float *scond, float *amax, char *equed );
void slaqsy_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *s, float *scond, float *amax, char *equed );
void slaqtr_(armpl_int_t *ltran, armpl_int_t *lfloat, armpl_int_t *n, float *t, armpl_int_t *ldt, float *b, float *w, float *scale, float *x, float *work, armpl_int_t *info);
void slar1v_(armpl_int_t *n, armpl_int_t *b1, armpl_int_t *bn, float *lambda, float *d, float *l, float *ld, float *lld, float *pivmin, float *gaptol, float *z, armpl_int_t *wantnc, armpl_int_t *negcnt, float *ztz, float *mingma, armpl_int_t *r, armpl_int_t *isuppz, float *nrminv, float *resid, float *rqcorr, float *work);
void slar2v_(armpl_int_t *n, float *x, float *y, float *z, armpl_int_t *incx, float *c, float *s, armpl_int_t *incc);
void slarfb_(char *side, char *trans, char *direct, char *storev, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *v, armpl_int_t *ldv, float *t, armpl_int_t *ldt, float *c, armpl_int_t *ldc, float *work, armpl_int_t *ldwork );
void slarf_(char *side, armpl_int_t *m, armpl_int_t *n, float *v, armpl_int_t *incv, float *tau, float *c, armpl_int_t *ldc, float *work );
void slarfg_(armpl_int_t *n, float *alpha, float *x, armpl_int_t *incx, float *tau);
void slarfx_(char *side, armpl_int_t *m, armpl_int_t *n, float *v, float *tau, float *c, armpl_int_t *ldc, float *work );
void slargv_(armpl_int_t *n, float *x, armpl_int_t *incx, float *y, armpl_int_t *incy, float *c, armpl_int_t *incc);
void slarnv_(armpl_int_t *idist, armpl_int_t *iseed, armpl_int_t *n, float *x);
void slarra_(armpl_int_t *n, float *d, float *e, float *e2, float *spltol, float *tnrm, armpl_int_t *nsplit, armpl_int_t *isplit, armpl_int_t *info);
void slarrb_(armpl_int_t *n, float *d, float *lld, armpl_int_t *ifirst, armpl_int_t *ilast, float *rtol1, float *rtol2, armpl_int_t *offset, float *w, float *wgap, float *werr, float *work, armpl_int_t *iwork, float *pivmin, float *spdiam, armpl_int_t *twist, armpl_int_t *info);
void slarrc_(char *jobt, armpl_int_t *n, float *vl, float *vu, float *d, float *e, float *pivmin, armpl_int_t *eigcnt, armpl_int_t *lcnt, armpl_int_t *rcnt, armpl_int_t *info );
void slarrd_(char *range, char *order, armpl_int_t *n, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *gers, float *reltol, float *d, float *e, float *e2, float *pivmin, armpl_int_t *nsplit, armpl_int_t *isplit, armpl_int_t *m, float *w, float *werr, float *wl, float *wu, armpl_int_t *iblock, armpl_int_t *indexw, float *work, armpl_int_t *iwork, armpl_int_t *info );
void slarre_(char *range, armpl_int_t *n, float *vl, float *vu, armpl_int_t *il, armpl_int_t *iu, float *d, float *e, float *e2, float *rtol1, float *rtol2, float *spltol, armpl_int_t *nsplit, armpl_int_t *isplit, armpl_int_t *m, float *w, float *werr, float *wgap, armpl_int_t *iblock, armpl_int_t *indexw, float *gers, float *pivmin, float *work, armpl_int_t *iwork, armpl_int_t *info );
void slarrf_(armpl_int_t *n, float *d, float *l, float *ld, armpl_int_t *clstrt, armpl_int_t *clend, float *w, float *wgap, float *werr, float *spdiam, float *clgapl, float *clgapr, float *pivmin, float *sigma, float *dplus, float *lplus, float *work, armpl_int_t *info);
void slarrj_(armpl_int_t *n, float *d, float *e2, armpl_int_t *ifirst, armpl_int_t *ilast, float *rtol, armpl_int_t *offset, float *w, float *werr, float *work, armpl_int_t *iwork, float *pivmin, float *spdiam, armpl_int_t *info);
void slarrk_(armpl_int_t *n, armpl_int_t *iw, float *gl, float *gu, float *d, float *e2, float *pivmin, float *reltol, float *w, float *werr, armpl_int_t *info);
void slarrr_(armpl_int_t *n, float *d, float *e, armpl_int_t *info);
void slarrv_(armpl_int_t *n, float *vl, float *vu, float *d, float *l, float *pivmin, armpl_int_t *isplit, armpl_int_t *m, armpl_int_t *dol, armpl_int_t *dou, float *minrgp, float *rtol1, float *rtol2, float *w, float *werr, float *wgap, armpl_int_t *iblock, armpl_int_t *indexw, float *gers, float *z, armpl_int_t *ldz, armpl_int_t *isuppz, float *work, armpl_int_t *iwork, armpl_int_t *info);
void slartg_(float *f, float *g, float *cs, float *sn, float *r);
void slartv_(armpl_int_t *n, float *x, armpl_int_t *incx, float *y, armpl_int_t *incy, float *c, float *s, armpl_int_t *incc);
void slaruv_(armpl_int_t *iseed, armpl_int_t *n, float *x);
void slarzb_(char *side, char *trans, char *direct, char *storev, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, float *v, armpl_int_t *ldv, float *t, armpl_int_t *ldt, float *c, armpl_int_t *ldc, float *work, armpl_int_t *ldwork );
void slarz_(char *side, armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, float *v, armpl_int_t *incv, float *tau, float *c, armpl_int_t *ldc, float *work );
void slarzt_(char *direct, char *storev, armpl_int_t *n, armpl_int_t *k, float *v, armpl_int_t *ldv, float *tau, float *t, armpl_int_t *ldt );
void slas2_(float *f, float *g, float *h, float *ssmin, float *ssmax);
void slascl_(char *type, armpl_int_t *kl, armpl_int_t *ku, float *cfrom, float *cto, armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *info );
void slasd0_(armpl_int_t *n, armpl_int_t *sqre, float *d, float *e, float *u, armpl_int_t *ldu, float *vt, armpl_int_t *ldvt, armpl_int_t *smlsiz, armpl_int_t *iwork, float *work, armpl_int_t *info);
void slasd1_(armpl_int_t *nl, armpl_int_t *nr, armpl_int_t *sqre, float *d, float *alpha, float *beta, float *u, armpl_int_t *ldu, float *vt, armpl_int_t *ldvt, armpl_int_t *idxq, armpl_int_t *iwork, float *work, armpl_int_t *info);
void slasd2_(armpl_int_t *nl, armpl_int_t *nr, armpl_int_t *sqre, armpl_int_t *k, float *d, float *z, float *alpha, float *beta, float *u, armpl_int_t *ldu, float *vt, armpl_int_t *ldvt, float *dsigma, float *u2, armpl_int_t *ldu2, float *vt2, armpl_int_t *ldvt2, armpl_int_t *idxp, armpl_int_t *idx, armpl_int_t *idxc, armpl_int_t *idxq, armpl_int_t *coltyp, armpl_int_t *info);
void slasd3_(armpl_int_t *nl, armpl_int_t *nr, armpl_int_t *sqre, armpl_int_t *k, float *d, float *q, armpl_int_t *ldq, float *dsigma, float *u, armpl_int_t *ldu, float *u2, armpl_int_t *ldu2, float *vt, armpl_int_t *ldvt, float *vt2, armpl_int_t *ldvt2, armpl_int_t *idxc, armpl_int_t *ctot, float *z, armpl_int_t *info);
void slasd4_(armpl_int_t *n, armpl_int_t *i, float *d, float *z, float *delta, float *rho, float *sigma, float *work, armpl_int_t *info);
void slasd5_(armpl_int_t *i, float *d, float *z, float *delta, float *rho, float *dsigma, float *work);
void slasd6_(armpl_int_t *icompq, armpl_int_t *nl, armpl_int_t *nr, armpl_int_t *sqre, float *d, float *vf, float *vl, float *alpha, float *beta, armpl_int_t *idxq, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, armpl_int_t *ldgcol, float *givnum, armpl_int_t *ldgnum, float *poles, float *difl, float *difr, float *z, armpl_int_t *k, float *c, float *s, float *work, armpl_int_t *iwork, armpl_int_t *info);
void slasd7_(armpl_int_t *icompq, armpl_int_t *nl, armpl_int_t *nr, armpl_int_t *sqre, armpl_int_t *k, float *d, float *z, float *zw, float *vf, float *vfw, float *vl, float *vlw, float *alpha, float *beta, float *dsigma, armpl_int_t *idx, armpl_int_t *idxp, armpl_int_t *idxq, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, armpl_int_t *ldgcol, float *givnum, armpl_int_t *ldgnum, float *c, float *s, armpl_int_t *info);
void slasd8_(armpl_int_t *icompq, armpl_int_t *k, float *d, float *z, float *vf, float *vl, float *difl, float *difr, armpl_int_t *lddifr, float *dsigma, float *work, armpl_int_t *info);
void slasda_(armpl_int_t *icompq, armpl_int_t *smlsiz, armpl_int_t *n, armpl_int_t *sqre, float *d, float *e, float *u, armpl_int_t *ldu, float *vt, armpl_int_t *k, float *difl, float *difr, float *z, float *poles, armpl_int_t *givptr, armpl_int_t *givcol, armpl_int_t *ldgcol, armpl_int_t *perm, float *givnum, float *c, float *s, float *work, armpl_int_t *iwork, armpl_int_t *info);
void slasdq_(char *uplo, armpl_int_t *sqre, armpl_int_t *n, armpl_int_t *ncvt, armpl_int_t *nru, armpl_int_t *ncc, float *d, float *e, float *vt, armpl_int_t *ldvt, float *u, armpl_int_t *ldu, float *c, armpl_int_t *ldc, float *work, armpl_int_t *info );
void slasdt_(armpl_int_t *n, armpl_int_t *lvl, armpl_int_t *nd, armpl_int_t *inode, armpl_int_t *ndiml, armpl_int_t *ndimr, armpl_int_t *msub);
void slaset_(char *uplo, armpl_int_t *m, armpl_int_t *n, float *alpha, float *beta, float *a, armpl_int_t *lda );
void slasq1_(armpl_int_t *n, float *d, float *e, float *work, armpl_int_t *info);
void slasq2_(armpl_int_t *n, float *z, armpl_int_t *info);
void slasq3_(armpl_int_t *i0, armpl_int_t *n0, float *z, armpl_int_t *pp, float *dmin, float *sigma, float *desig, float *qmax, armpl_int_t *nfail, armpl_int_t *iter, armpl_int_t *ndiv, armpl_int_t *ieee, armpl_int_t *ttype, float *dmin1, float *dmin2, float *dn, float *dn1, float *dn2, float *g, float *tau);
void slasq4_(armpl_int_t *i0, armpl_int_t *n0, float *z, armpl_int_t *pp, armpl_int_t *n0in, float *dmin, float *dmin1, float *dmin2, float *dn, float *dn1, float *dn2, float *tau, armpl_int_t *ttype, float *g);
void slasq5_(armpl_int_t *i0, armpl_int_t *n0, float *z, armpl_int_t *pp, float *tau, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2, armpl_int_t *ieee);
void slasq6_(armpl_int_t *i0, armpl_int_t *n0, float *z, armpl_int_t *pp, float *dmin, float *dmin1, float *dmin2, float *dn, float *dnm1, float *dnm2);
void slasr_(char *side, char *pivot, char *direct, armpl_int_t *m, armpl_int_t *n, float *c, float *s, float *a, armpl_int_t *lda );
void slasv2_(float *f, float *g, float *h, float *ssmin, float *ssmax, float *snr, float *csr, float *snl, float *csl);
void slaswp_(armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *k1, armpl_int_t *k2, armpl_int_t *ipiv, armpl_int_t *incx);
void slasy2_(armpl_int_t *ltranl, armpl_int_t *ltranr, armpl_int_t *isgn, armpl_int_t *n1, armpl_int_t *n2, float *tl, armpl_int_t *ldtl, float *tr, armpl_int_t *ldtr, float *b, armpl_int_t *ldb, float *scale, float *x, armpl_int_t *ldx, float *xnorm, armpl_int_t *info);
void slasyf_(char *uplo, armpl_int_t *n, armpl_int_t *nb, armpl_int_t *kb, float *a, armpl_int_t *lda, armpl_int_t *ipiv, float *w, armpl_int_t *ldw, armpl_int_t *info );
void slatbs_(char *uplo, char *trans, char *diag, char *normin, armpl_int_t *n, armpl_int_t *kd, float *ab, armpl_int_t *ldab, float *x, float *scale, float *cnorm, armpl_int_t *info );
void slatdf_(armpl_int_t *ijob, armpl_int_t *n, float *z, armpl_int_t *ldz, float *rhs, float *rdsum, float *rdscal, armpl_int_t *ipiv, armpl_int_t *jpiv);
void slatps_(char *uplo, char *trans, char *diag, char *normin, armpl_int_t *n, float *ap, float *x, float *scale, float *cnorm, armpl_int_t *info );
void slatrd_(char *uplo, armpl_int_t *n, armpl_int_t *nb, float *a, armpl_int_t *lda, float *e, float *tau, float *w, armpl_int_t *ldw );
void slatrs_(char *uplo, char *trans, char *diag, char *normin, armpl_int_t *n, float *a, armpl_int_t *lda, float *x, float *scale, float *cnorm, armpl_int_t *info );
void slatrz_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, float *a, armpl_int_t *lda, float *tau, float *work);
void slatzm_(char *side, armpl_int_t *m, armpl_int_t *n, float *v, armpl_int_t *incv, float *tau, float *c1, float *c2, armpl_int_t *ldc, float *work );
void slauu2_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *info );
void slauum_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *info );
void sorg2l_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sorg2r_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sorgl2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sorgr2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *work, armpl_int_t *info);
void sorm2l_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *c, armpl_int_t *ldc, float *work, armpl_int_t *info );
void sorm2r_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *c, armpl_int_t *ldc, float *work, armpl_int_t *info );
void sorml2_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *c, armpl_int_t *ldc, float *work, armpl_int_t *info );
void sormr2_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, float *a, armpl_int_t *lda, float *tau, float *c, armpl_int_t *ldc, float *work, armpl_int_t *info );
void spbtf2_(char *uplo, armpl_int_t *n, armpl_int_t *kd, float *ab, armpl_int_t *ldab, armpl_int_t *info );
void spotf2_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *info );
void sptts2_(armpl_int_t *n, armpl_int_t *nrhs, float *d, float *e, float *b, armpl_int_t *ldb);
void srscl_(armpl_int_t *n, float *sa, float *sx, armpl_int_t *incx);
void ssygs2_(armpl_int_t *itype, char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, armpl_int_t *info );
void ssytd2_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, float *d, float *e, float *tau, armpl_int_t *info );
void ssytf2_(char *uplo, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info );
void stgex2_(armpl_int_t *wantq, armpl_int_t *wantz, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *q, armpl_int_t *ldq, float *z, armpl_int_t *ldz, armpl_int_t *j1, armpl_int_t *n1, armpl_int_t *n2, float *work, armpl_int_t *lwork, armpl_int_t *info);
void stgsy2_(char *trans, armpl_int_t *ijob, armpl_int_t *m, armpl_int_t *n, float *a, armpl_int_t *lda, float *b, armpl_int_t *ldb, float *c, armpl_int_t *ldc, float *d, armpl_int_t *ldd, float *e, armpl_int_t *lde, float *f, armpl_int_t *ldf, float *scale, float *rdsum, float *rdscal, armpl_int_t *iwork, armpl_int_t *pq, armpl_int_t *info );
void strti2_(char *uplo, char *diag, armpl_int_t *n, float *a, armpl_int_t *lda, armpl_int_t *info );
void zdrscl_(armpl_int_t *n, double *sa, armpl_doublecomplex_t *sx, armpl_int_t *incx);
void zgbtf2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *ipiv, armpl_int_t *info);
void zgebd2_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *d, double *e, armpl_doublecomplex_t *tauq, armpl_doublecomplex_t *taup, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgehd2_(armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgelq2_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgeql2_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgeqr2_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgerq2_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zgesc2_(armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *rhs, armpl_int_t *ipiv, armpl_int_t *jpiv, double *scale);
void zgetc2_(armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *jpiv, armpl_int_t *info);
void zgetf2_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info);
void zgtts2_(armpl_int_t *itrans, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *dl, armpl_doublecomplex_t *d, armpl_doublecomplex_t *du, armpl_doublecomplex_t *du2, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t *ldb);
void zhegs2_(armpl_int_t *itype, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_int_t *info );
void zhetd2_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *d, double *e, armpl_doublecomplex_t *tau, armpl_int_t *info );
void zhetf2_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info );
void zlabrd_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *nb, armpl_doublecomplex_t *a, armpl_int_t *lda, double *d, double *e, armpl_doublecomplex_t *tauq, armpl_doublecomplex_t *taup, armpl_doublecomplex_t *x, armpl_int_t *ldx, armpl_doublecomplex_t *y, armpl_int_t *ldy);
void zlacgv_(armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx);
void zlacn2_(armpl_int_t *n, armpl_doublecomplex_t *v, armpl_doublecomplex_t *x, double *est, armpl_int_t *kase, armpl_int_t *isave);
void zlacon_(armpl_int_t *n, armpl_doublecomplex_t *v, armpl_doublecomplex_t *x, double *est, armpl_int_t *kase);
void zlacp2_(char *uplo, armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb );
void zlacpy_(char *uplo, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb );
void zlacrm_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *b, armpl_int_t *ldb, armpl_doublecomplex_t *c, armpl_int_t *ldc, double *rwork);
void zlacrt_(armpl_int_t *n, armpl_doublecomplex_t *cx, armpl_int_t *incx, armpl_doublecomplex_t *cy, armpl_int_t *incy, armpl_doublecomplex_t *c, armpl_doublecomplex_t *s);
armpl_doublecomplex_t zladiv_(armpl_doublecomplex_t *ret_val, armpl_doublecomplex_t *x, armpl_doublecomplex_t *y);

void zlaed0_(armpl_int_t *qsiz, armpl_int_t *n, double *d, double *e, armpl_doublecomplex_t *q, armpl_int_t *ldq, armpl_doublecomplex_t *qstore, armpl_int_t *ldqs, double *rwork, armpl_int_t *iwork, armpl_int_t *info);
void zlaed7_(armpl_int_t *n, armpl_int_t *cutpnt, armpl_int_t *qsiz, armpl_int_t *tlvls, armpl_int_t *curlvl, armpl_int_t *curpbm, double *d, armpl_doublecomplex_t *q, armpl_int_t *ldq, double *rho, armpl_int_t *indxq, double *qstore, armpl_int_t *qptr, armpl_int_t *prmptr, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, double *givnum, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *info);
void zlaed8_(armpl_int_t *k, armpl_int_t *n, armpl_int_t *qsiz, armpl_doublecomplex_t *q, armpl_int_t *ldq, double *d, double *rho, armpl_int_t *cutpnt, double *z, double *dlamda, armpl_doublecomplex_t *q2, armpl_int_t *ldq2, double *w, armpl_int_t *indxp, armpl_int_t *indx, armpl_int_t *indxq, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, double *givnum, armpl_int_t *info);
void zlaein_(armpl_int_t *rightv, armpl_int_t *noinit, armpl_int_t *n, armpl_doublecomplex_t *h, armpl_int_t *ldh, armpl_doublecomplex_t *w, armpl_doublecomplex_t *v, armpl_doublecomplex_t *b, armpl_int_t *ldb, double *rwork, double *eps3, double *smlnum, armpl_int_t *info);
void zlaesy_(armpl_doublecomplex_t *a, armpl_doublecomplex_t *b, armpl_doublecomplex_t *c, armpl_doublecomplex_t *rt1, armpl_doublecomplex_t *rt2, armpl_doublecomplex_t *evscal, armpl_doublecomplex_t *cs1, armpl_doublecomplex_t *sn1);
void zlaev2_(armpl_doublecomplex_t *a, armpl_doublecomplex_t *b, armpl_doublecomplex_t *c, double *rt1, double *rt2, double *cs1, armpl_doublecomplex_t *sn1);
void zlag2c_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_singlecomplex_t *sa, armpl_int_t *ldsa, armpl_int_t *info);
void zlags2_(armpl_int_t *upper, double *a1, armpl_doublecomplex_t * a2, double *a3, double *b1, armpl_doublecomplex_t *b2, double *b3, double *csu, armpl_doublecomplex_t *snu, double *csv, armpl_doublecomplex_t * snv, double *csq, armpl_doublecomplex_t *snq);
void zlagtm_(char *trans, armpl_int_t *n, armpl_int_t *nrhs, double *alpha, armpl_doublecomplex_t *dl, armpl_doublecomplex_t *d, armpl_doublecomplex_t *du, armpl_doublecomplex_t *x, armpl_int_t *ldx, double *beta, armpl_doublecomplex_t *b, armpl_int_t *ldb );
void zlahef_(char *uplo, armpl_int_t *n, armpl_int_t *nb, armpl_int_t *kb, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *w, armpl_int_t *ldw, armpl_int_t *info );
void zlahqr_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_doublecomplex_t *h, armpl_int_t *ldh, armpl_doublecomplex_t *w, armpl_int_t *iloz, armpl_int_t *ihiz, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_int_t *info);
void zlahr2_(armpl_int_t *n, armpl_int_t *k, armpl_int_t *nb, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_doublecomplex_t *y, armpl_int_t *ldy);
void zlahrd_(armpl_int_t *n, armpl_int_t *k, armpl_int_t *nb, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_doublecomplex_t *y, armpl_int_t *ldy);
void zlaic1_(armpl_int_t *job, armpl_int_t *j, armpl_doublecomplex_t *x, double *sest, armpl_doublecomplex_t *w, armpl_doublecomplex_t *gamma, double *sestpr, armpl_doublecomplex_t *s, armpl_doublecomplex_t *c);
void zlals0_(armpl_int_t *icompq, armpl_int_t *nl, armpl_int_t *nr, armpl_int_t *sqre, armpl_int_t *nrhs, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *bx, armpl_int_t *ldbx, armpl_int_t *perm, armpl_int_t *givptr, armpl_int_t *givcol, armpl_int_t *ldgcol, double *givnum, armpl_int_t *ldgnum, double *poles, double *difl, double *difr, double *z, armpl_int_t *k, double *c, double *s, double *rwork, armpl_int_t *info);
void zlalsa_(armpl_int_t *icompq, armpl_int_t *smlsiz, armpl_int_t *n, armpl_int_t *nrhs, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *bx, armpl_int_t *ldbx, double *u, armpl_int_t *ldu, double *vt, armpl_int_t *k, double *difl, double *difr, double *z, double *poles, armpl_int_t *givptr, armpl_int_t *givcol, armpl_int_t *ldgcol, armpl_int_t *perm, double *givnum, double *c, double *s, double *rwork, armpl_int_t *iwork, armpl_int_t *info);
void zlalsd_(char *uplo, armpl_int_t *smlsiz, armpl_int_t *n, armpl_int_t *nrhs, double *d, double *e, armpl_doublecomplex_t *b, armpl_int_t *ldb, double *rcond, armpl_int_t *rank, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *info );
double zlangb_(char *norm, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *work );
double zlange_(char *norm, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *work );
double zlangt_(char *norm, armpl_int_t *n, armpl_doublecomplex_t *dl, armpl_doublecomplex_t *d, armpl_doublecomplex_t *du );
double zlanhb_(char *norm, char *uplo, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *work );
double zlanhe_(char *norm, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *work );
double zlanhp_(char *norm, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, double *work );
double zlanhs_(char *norm, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *work );
double zlanht_(char *norm, armpl_int_t *n, double *d, armpl_doublecomplex_t *e );
double zlansb_(char *norm, char *uplo, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *work );
double zlansp_(char *norm, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, double *work );
double zlansy_(char *norm, char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *work );
double zlantb_(char *norm, char *uplo, char *diag, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *work );
double zlantp_(char *norm, char *uplo, char *diag, armpl_int_t *n, armpl_doublecomplex_t *ap, double *work );
double zlantr_(char *norm, char *uplo, char *diag, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *work );
void zlapll_(armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *y, armpl_int_t *incy, double *ssmin);
void zlapmt_(armpl_int_t *forwrd, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *ldx, armpl_int_t *k);
void zlaqgb_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *kl, armpl_int_t *ku, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void zlaqge_(armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax, char *equed );
void zlaqhb_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *s, double *scond, double *amax, char *equed );
void zlaqhe_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *s, double *scond, double *amax, char *equed );
void zlaqhp_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, double *s, double *scond, double *amax, char *equed );
void zlaqp2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *offset, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *jpvt, armpl_doublecomplex_t *tau, double *vn1, double *vn2, armpl_doublecomplex_t *work);
void zlaqps_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *offset, armpl_int_t *nb, armpl_int_t *kb, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *jpvt, armpl_doublecomplex_t *tau, double *vn1, double *vn2, armpl_doublecomplex_t *auxv, armpl_doublecomplex_t *f, armpl_int_t *ldf);
void zlaqr0_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_doublecomplex_t *h, armpl_int_t *ldh, armpl_doublecomplex_t *w, armpl_int_t *iloz, armpl_int_t *ihiz, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zlaqr1_(armpl_int_t *n, armpl_doublecomplex_t *h, armpl_int_t*ldh, armpl_doublecomplex_t *s1, armpl_doublecomplex_t *s2, armpl_doublecomplex_t *v);
void zlaqr2_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ktop, armpl_int_t *kbot, armpl_int_t *nw, armpl_doublecomplex_t *h, armpl_int_t *ldh, armpl_int_t *iloz, armpl_int_t *ihiz, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, armpl_doublecomplex_t *sh, armpl_doublecomplex_t *v, armpl_int_t *ldv, armpl_int_t *nh, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_int_t *nv, armpl_doublecomplex_t *wv, armpl_int_t *ldwv, armpl_doublecomplex_t *work, armpl_int_t *lwork);
void zlaqr3_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ktop, armpl_int_t *kbot, armpl_int_t *nw, armpl_doublecomplex_t *h, armpl_int_t *ldh, armpl_int_t *iloz, armpl_int_t *ihiz, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_int_t *ns, armpl_int_t *nd, armpl_doublecomplex_t *sh, armpl_doublecomplex_t *v, armpl_int_t *ldv, armpl_int_t *nh, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_int_t *nv, armpl_doublecomplex_t *wv, armpl_int_t *ldwv, armpl_doublecomplex_t *work, armpl_int_t *lwork);
void zlaqr4_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *n, armpl_int_t *ilo, armpl_int_t *ihi, armpl_doublecomplex_t *h, armpl_int_t *ldh, armpl_doublecomplex_t *w, armpl_int_t *iloz, armpl_int_t *ihiz, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *work, armpl_int_t *lwork, armpl_int_t *info);
void zlaqr5_(armpl_int_t *wantt, armpl_int_t *wantz, armpl_int_t *kacc22, armpl_int_t *n, armpl_int_t *ktop, armpl_int_t *kbot, armpl_int_t *nshfts, armpl_doublecomplex_t *s, armpl_doublecomplex_t *h, armpl_int_t *ldh, armpl_int_t *iloz, armpl_int_t *ihiz, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *v, armpl_int_t *ldv, armpl_doublecomplex_t *u, armpl_int_t *ldu, armpl_int_t *nv, armpl_doublecomplex_t *wv, armpl_int_t *ldwv, armpl_int_t *nh, armpl_doublecomplex_t *wh, armpl_int_t *ldwh);
void zlaqsb_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, double *s, double *scond, double *amax, char *equed );
void zlaqsp_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *ap, double *s, double *scond, double *amax, char *equed );
void zlaqsy_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, double *s, double *scond, double *amax, char *equed );
void zlar1v_(armpl_int_t *n, armpl_int_t *b1, armpl_int_t *bn, double *lambda, double *d, double *l, double *ld, double *lld, double *pivmin, double *gaptol, armpl_doublecomplex_t *z, armpl_int_t *wantnc, armpl_int_t *negcnt, double *ztz, double *mingma, armpl_int_t *r, armpl_int_t *isuppz, double *nrminv, double *resid, double *rqcorr, double *work);
void zlar2v_(armpl_int_t *n, armpl_doublecomplex_t *x, armpl_doublecomplex_t *y, armpl_doublecomplex_t *z, armpl_int_t *incx, double *c, armpl_doublecomplex_t *s, armpl_int_t *incc);
void zlarcm_(armpl_int_t *m, armpl_int_t *n, double *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *c, armpl_int_t *ldc, double *rwork);
void zlarfb_(char *side, char *trans, char *direct, char *storev, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *v, armpl_int_t *ldv, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *ldwork );
void zlarf_(char *side, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *v, armpl_int_t *incv, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work );
void zlarfg_(armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *tau);
void zlarft_(char *direct, char *storev, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *v, armpl_int_t *ldv, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *t, armpl_int_t *ldt );
void zlarfx_(char *side, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *v, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work );
void zlargv_(armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *y, armpl_int_t *incy, double *c, armpl_int_t *incc);
void zlarnv_(armpl_int_t *idist, armpl_int_t *iseed, armpl_int_t *n, armpl_doublecomplex_t *x);
void zlarrv_(armpl_int_t *n, double *vl, double *vu, double *d, double *l, double *pivmin, armpl_int_t *isplit, armpl_int_t *m, armpl_int_t *dol, armpl_int_t *dou, double *minrgp, double *rtol1, double *rtol2, double *w, double *werr, double *wgap, armpl_int_t *iblock, armpl_int_t *indexw, double *gers, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_int_t *isuppz, double *work, armpl_int_t *iwork, armpl_int_t *info);
void zlartg_(armpl_doublecomplex_t *f, armpl_doublecomplex_t *g, double *cs, armpl_doublecomplex_t *sn, armpl_doublecomplex_t *r);
void zlartv_(armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *y, armpl_int_t *incy, double *c, armpl_doublecomplex_t *s, armpl_int_t *incc);
void zlarzb_(char *side, char *trans, char *direct, char *storev, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *v, armpl_int_t *ldv, armpl_doublecomplex_t *t, armpl_int_t *ldt, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *ldwork );
void zlarz_(char *side, armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, armpl_doublecomplex_t *v, armpl_int_t *incv, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work );
void zlarzt_(char *direct, char *storev, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *v, armpl_int_t *ldv, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *t, armpl_int_t *ldt );
void zlascl_(char *type, armpl_int_t *kl, armpl_int_t *ku, double *cfrom, double *cto, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void zlaset_(char *uplo, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *a, armpl_int_t *lda );
void zlasr_(char *side, char *pivot, char *direct, armpl_int_t *m, armpl_int_t *n, double *c, double *s, armpl_doublecomplex_t *a, armpl_int_t *lda );
void zlaswp_(armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *k1, armpl_int_t *k2, armpl_int_t *ipiv, armpl_int_t *incx);
void zlasyf_(char *uplo, armpl_int_t *n, armpl_int_t *nb, armpl_int_t *kb, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_doublecomplex_t *w, armpl_int_t *ldw, armpl_int_t *info );
void zlatbs_(char *uplo, char *trans, char *diag, char *normin, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_doublecomplex_t *x, double *scale, double *cnorm, armpl_int_t *info );
void zlatdf_(armpl_int_t *ijob, armpl_int_t *n, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_doublecomplex_t *rhs, double *rdsum, double *rdscal, armpl_int_t *ipiv, armpl_int_t *jpiv);
void zlatps_(char *uplo, char *trans, char *diag, char *normin, armpl_int_t *n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *x, double *scale, double *cnorm, armpl_int_t *info );
void zlatrd_(char *uplo, armpl_int_t *n, armpl_int_t *nb, armpl_doublecomplex_t *a, armpl_int_t *lda, double *e, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *w, armpl_int_t *ldw );
void zlatrs_(char *uplo, char *trans, char *diag, char *normin, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *x, double *scale, double *cnorm, armpl_int_t *info );
void zlatrz_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *l, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work);
void zlatzm_(char *side, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *v, armpl_int_t *incv, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c1, armpl_doublecomplex_t *c2, armpl_int_t *ldc, armpl_doublecomplex_t *work );
void zlauu2_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void zlauum_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void zpbtf2_(char *uplo, armpl_int_t *n, armpl_int_t *kd, armpl_doublecomplex_t *ab, armpl_int_t *ldab, armpl_int_t *info );
void zpotf2_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void zptts2_(armpl_int_t *iuplo, armpl_int_t *n, armpl_int_t *nrhs, double *d, armpl_doublecomplex_t *e, armpl_doublecomplex_t *b, armpl_int_t *ldb);
void zrot_(armpl_int_t *n, armpl_doublecomplex_t *cx, armpl_int_t *incx, armpl_doublecomplex_t *cy, armpl_int_t *incy, double *c, armpl_doublecomplex_t *s);
void zspmv_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, armpl_int_t *incy );
void zspr_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *ap );
void zsymv_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *y, armpl_int_t *incy );
void zsyr_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *a, armpl_int_t *lda );
void zsytf2_(char *uplo, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *ipiv, armpl_int_t *info );
void ztgex2_(armpl_int_t *wantq, armpl_int_t *wantz, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *q, armpl_int_t *ldq, armpl_doublecomplex_t *z, armpl_int_t *ldz, armpl_int_t *j1, armpl_int_t *info);
void ztgsy2_(char *trans, armpl_int_t *ijob, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *b, armpl_int_t *ldb, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *d, armpl_int_t *ldd, armpl_doublecomplex_t *e, armpl_int_t *lde, armpl_doublecomplex_t *f, armpl_int_t *ldf, double *scale, double *rdsum, double *rdscal, armpl_int_t *info );
void ztrti2_(char *uplo, char *diag, armpl_int_t *n, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_int_t *info );
void zung2l_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zung2r_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zungl2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zungr2_(armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t *info);
void zunm2l_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *info );
void zunm2r_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *info );
void zunml2_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *info );
void zunmr2_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *info );
void zunmr3_(char *side, char *trans, armpl_int_t *m, armpl_int_t *n, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *a, armpl_int_t *lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t *ldc, armpl_doublecomplex_t *work, armpl_int_t *info );

/* ARMPL version information */
void armplversion_(armpl_int_t *major, armpl_int_t *minor, armpl_int_t *patch, char *tag);
void armplinfo_(void);

/* OMP interfaces */
armpl_int_t armpl_get_max_threads_(void);
armpl_int_t armpl_get_num_threads_(void);
void armpl_set_num_threads_(armpl_int_t *numthreads);
armpl_int_t armpl_get_num_procs_(void);
armpl_int_t armpl_get_thread_num_(armpl_int_t *np, armpl_int_t *me);

/* Putenv and getenv utilities */
void armplputenv_(char *name, char *value, armpl_strlen_t name_len, armpl_strlen_t value_len);
void armplgetenv_(char *name, char *value, armpl_strlen_t name_len, armpl_strlen_t value_len);
void armpllocation_(char *message, void *arg, armpl_strlen_t message_len);
void armpllocationstring_(char *message, void *arg, char *string, armpl_strlen_t message_len, armpl_strlen_t string_len);

/* ------------------------------------------------------------------ */

/* CBLAS interfaces */
enum CBLAS_ORDER {CblasRowMajor=101, CblasColMajor=102};
enum CBLAS_TRANSPOSE {CblasNoTrans=111, CblasTrans=112, CblasConjTrans=113};
enum CBLAS_UPLO {CblasUpper=121, CblasLower=122};
enum CBLAS_DIAG {CblasNonUnit=131, CblasUnit=132};
enum CBLAS_SIDE {CblasLeft=141, CblasRight=142};
void cblas_caxpby(armpl_int_t N, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *Y, armpl_int_t incY);
void cblas_caxpy(armpl_int_t N, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *Y, armpl_int_t incY);
void cblas_ccopy(armpl_int_t N, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *Y, armpl_int_t incY);
void cblas_cdotc_sub(armpl_int_t N, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *Y, armpl_int_t incY, armpl_singlecomplex_t *dotc);
void cblas_cdotu_sub(armpl_int_t N, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *Y, armpl_int_t incY, armpl_singlecomplex_t *dotu);
void cblas_cgbmv(enum CBLAS_ORDER order, enum CBLAS_TRANSPOSE TransA, armpl_int_t M, armpl_int_t N, armpl_int_t KL, armpl_int_t KU, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *Y, armpl_int_t incY);
void cblas_cgemm(enum CBLAS_ORDER Order, enum CBLAS_TRANSPOSE TransA, enum CBLAS_TRANSPOSE TransB, armpl_int_t M, armpl_int_t N, armpl_int_t K, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *B, armpl_int_t ldb, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *C, armpl_int_t ldc);
void cblas_cgemm3m(enum CBLAS_ORDER Order, enum CBLAS_TRANSPOSE TransA, enum CBLAS_TRANSPOSE TransB, armpl_int_t M, armpl_int_t N, armpl_int_t K, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *B, armpl_int_t ldb, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *C, armpl_int_t ldc);
void cblas_cgemm_batch(enum CBLAS_ORDER order, const enum CBLAS_TRANSPOSE* transA, const enum CBLAS_TRANSPOSE* transB, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_singlecomplex_t *alpha, const armpl_singlecomplex_t **A, const armpl_int_t *lda, const armpl_singlecomplex_t **B, const armpl_int_t *ldb, const armpl_singlecomplex_t *beta, armpl_singlecomplex_t **C, const armpl_int_t *ldc, armpl_int_t group_count, const armpl_int_t *group_size);
void cblas_cgemv(enum CBLAS_ORDER order, enum CBLAS_TRANSPOSE TransA, armpl_int_t M, armpl_int_t N, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *Y, armpl_int_t incY);
void cblas_cgerc(enum CBLAS_ORDER order, armpl_int_t M, armpl_int_t N, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *Y, armpl_int_t incY, armpl_singlecomplex_t *A, armpl_int_t lda);
void cblas_cgeru(enum CBLAS_ORDER order, armpl_int_t M, armpl_int_t N, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *Y, armpl_int_t incY, armpl_singlecomplex_t *A, armpl_int_t lda);
void cblas_chbmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, armpl_int_t K, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *Y, armpl_int_t incY);
void cblas_chemm(enum CBLAS_ORDER Order, enum CBLAS_SIDE Side, enum CBLAS_UPLO Uplo, armpl_int_t M, armpl_int_t N, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *B, armpl_int_t ldb, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *C, armpl_int_t ldc);
void cblas_chemv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *Y, armpl_int_t incY);
void cblas_cher(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, float alpha, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *A, armpl_int_t lda);
void cblas_cher2(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *Y, armpl_int_t incY, armpl_singlecomplex_t *A, armpl_int_t lda);
void cblas_cher2k(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE Trans, armpl_int_t N, armpl_int_t K, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *B, armpl_int_t ldb, float beta, armpl_singlecomplex_t *C, armpl_int_t ldc);
void cblas_cherk(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE Trans, armpl_int_t N, armpl_int_t K, float alpha, armpl_singlecomplex_t *A, armpl_int_t lda, float beta, armpl_singlecomplex_t *C, armpl_int_t ldc);
void cblas_chpmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *Ap, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *Y, armpl_int_t incY);
void cblas_chpr(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, float alpha, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *A);
void cblas_chpr2(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *Y, armpl_int_t incY, armpl_singlecomplex_t *Ap);
void cblas_cscal(armpl_int_t N, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *X, armpl_int_t incX);
void cblas_csscal(armpl_int_t N, float alpha, armpl_singlecomplex_t *X, armpl_int_t incX);
void cblas_cswap(armpl_int_t N, armpl_singlecomplex_t *X, armpl_int_t incX, armpl_singlecomplex_t *Y, armpl_int_t incY);
void cblas_csymm(enum CBLAS_ORDER Order, enum CBLAS_SIDE Side, enum CBLAS_UPLO Uplo, armpl_int_t M, armpl_int_t N, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *B, armpl_int_t ldb, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *C, armpl_int_t ldc);
void cblas_csyr2k(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE Trans, armpl_int_t N, armpl_int_t K, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *B, armpl_int_t ldb, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *C, armpl_int_t ldc);
void cblas_csyrk(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE Trans, armpl_int_t N, armpl_int_t K, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *C, armpl_int_t ldc);
void cblas_ctbmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_int_t K, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *X, armpl_int_t incX);
void cblas_ctbsv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_int_t K, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *X, armpl_int_t incX);
void cblas_ctpmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_singlecomplex_t *Ap, armpl_singlecomplex_t *X, armpl_int_t incX);
void cblas_ctpsv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_singlecomplex_t *Ap, armpl_singlecomplex_t *X, armpl_int_t incX);
void cblas_ctrmm(enum CBLAS_ORDER Order, enum CBLAS_SIDE Side, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t M, armpl_int_t N, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *B, armpl_int_t ldb);
void cblas_ctrmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *X, armpl_int_t incX);
void cblas_ctrsm(enum CBLAS_ORDER Order, enum CBLAS_SIDE Side, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t M, armpl_int_t N, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *B, armpl_int_t ldb);
void cblas_ctrsv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_singlecomplex_t *A, armpl_int_t lda, armpl_singlecomplex_t *X, armpl_int_t incX);
double cblas_dasum(armpl_int_t N, double *X, armpl_int_t incX);
void cblas_daxpby(armpl_int_t N, double alpha, double *X, armpl_int_t incX, double beta, double *Y, armpl_int_t incY);
void cblas_daxpy(armpl_int_t N, double alpha, double *X, armpl_int_t incX, double *Y, armpl_int_t incY);
void cblas_dcopy(armpl_int_t N, double *X, armpl_int_t incX, double *Y, armpl_int_t incY);
double cblas_ddot(armpl_int_t N, double *X, armpl_int_t incX, double *Y, armpl_int_t incY);
void cblas_dgbmv(enum CBLAS_ORDER order, enum CBLAS_TRANSPOSE TransA, armpl_int_t M, armpl_int_t N, armpl_int_t KL, armpl_int_t KU, double alpha, double *A, armpl_int_t lda, double *X, armpl_int_t incX, double beta, double *Y, armpl_int_t incY);
void cblas_dgemm(enum CBLAS_ORDER Order, enum CBLAS_TRANSPOSE TransA, enum CBLAS_TRANSPOSE TransB, armpl_int_t M, armpl_int_t N, armpl_int_t K, double alpha, double *A, armpl_int_t lda, double *B, armpl_int_t ldb, double beta, double *C, armpl_int_t ldc);
void cblas_dgemm_batch(enum CBLAS_ORDER order, const enum CBLAS_TRANSPOSE* transA, const enum CBLAS_TRANSPOSE* transB, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const double *alpha, const double **A, const armpl_int_t *lda, const double **B, const armpl_int_t *ldb, const double *beta, double **C, const armpl_int_t *ldc, armpl_int_t group_count, const armpl_int_t *group_size);
void cblas_dgemv(enum CBLAS_ORDER order, enum CBLAS_TRANSPOSE TransA, armpl_int_t M, armpl_int_t N, double alpha, double *A, armpl_int_t lda, double *X, armpl_int_t incX, double beta, double *Y, armpl_int_t incY);
void cblas_dger(enum CBLAS_ORDER order, armpl_int_t M, armpl_int_t N, double alpha, double *X, armpl_int_t incX, double *Y, armpl_int_t incY, double *A, armpl_int_t lda);
double cblas_dnrm2(armpl_int_t N, double *X, armpl_int_t incX);
void cblas_drot(armpl_int_t N, double *X, armpl_int_t incX, double *Y, armpl_int_t incY, double c, double s);
void cblas_drotg(double *a, double *b, double *c, double *s);
void cblas_drotm(armpl_int_t N, double *X, armpl_int_t incX, double *Y, armpl_int_t incY, double *P);
void cblas_drotmg(double *d1, double *d2, double *b1, double b2, double *P);
void cblas_dsbmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, armpl_int_t K, double alpha, double *A, armpl_int_t lda, double *X, armpl_int_t incX, double beta, double *Y, armpl_int_t incY);
void cblas_dscal(armpl_int_t N, double alpha, double *X, armpl_int_t incX);
double cblas_dsdot(armpl_int_t N, float *X, armpl_int_t incX, float *Y, armpl_int_t incY);
void cblas_dspmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, double alpha, double *Ap, double *X, armpl_int_t incX, double beta, double *Y, armpl_int_t incY);
void cblas_dspr(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, double alpha, double *X, armpl_int_t incX, double *Ap);
void cblas_dspr2(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, double alpha, double *X, armpl_int_t incX, double *Y, armpl_int_t incY, double *A);
void cblas_dswap(armpl_int_t N, double *X, armpl_int_t incX, double *Y, armpl_int_t incY);
void cblas_dsymm(enum CBLAS_ORDER Order, enum CBLAS_SIDE Side, enum CBLAS_UPLO Uplo, armpl_int_t M, armpl_int_t N, double alpha, double *A, armpl_int_t lda, double *B, armpl_int_t ldb, double beta, double *C, armpl_int_t ldc);
void cblas_dsymv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, double alpha, double *A, armpl_int_t lda, double *X, armpl_int_t incX, double beta, double *Y, armpl_int_t incY);
void cblas_dsyr(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, double alpha, double *X, armpl_int_t incX, double *A, armpl_int_t lda);
void cblas_dsyr2(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, double alpha, double *X, armpl_int_t incX, double *Y, armpl_int_t incY, double *A, armpl_int_t lda);
void cblas_dsyr2k(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE Trans, armpl_int_t N, armpl_int_t K, double alpha, double *A, armpl_int_t lda, double *B, armpl_int_t ldb, double beta, double *C, armpl_int_t ldc);
void cblas_dsyrk(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE Trans, armpl_int_t N, armpl_int_t K, double alpha, double *A, armpl_int_t lda, double beta, double *C, armpl_int_t ldc);
void cblas_dtbmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_int_t K, double *A, armpl_int_t lda, double *X, armpl_int_t incX);
void cblas_dtbsv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_int_t K, double *A, armpl_int_t lda, double *X, armpl_int_t incX);
void cblas_dtpmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, double *Ap, double *X, armpl_int_t incX);
void cblas_dtpsv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, double *Ap, double *X, armpl_int_t incX);
void cblas_dtrmm(enum CBLAS_ORDER Order, enum CBLAS_SIDE Side, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t M, armpl_int_t N, double alpha, double *A, armpl_int_t lda, double *B, armpl_int_t ldb);
void cblas_dtrmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, double *A, armpl_int_t lda, double *X, armpl_int_t incX);
void cblas_dtrsm(enum CBLAS_ORDER Order, enum CBLAS_SIDE Side, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t M, armpl_int_t N, double alpha, double *A, armpl_int_t lda, double *B, armpl_int_t ldb);
void cblas_dtrsv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, double *A, armpl_int_t lda, double *X, armpl_int_t incX);
double cblas_dzasum(armpl_int_t N, armpl_doublecomplex_t *X, armpl_int_t incX);
double cblas_dznrm2(armpl_int_t N, armpl_doublecomplex_t *X, armpl_int_t incX);
armpl_int_t cblas_icamax(armpl_int_t N, armpl_singlecomplex_t *X, armpl_int_t incX);
armpl_int_t cblas_idamax(armpl_int_t N, double *X, armpl_int_t incX);
armpl_int_t cblas_isamax(armpl_int_t N, float *X, armpl_int_t incX);
armpl_int_t cblas_izamax(armpl_int_t N, armpl_doublecomplex_t *X, armpl_int_t incX);
float cblas_sasum(armpl_int_t N, float *X, armpl_int_t incX);
void cblas_saxpby(armpl_int_t N, float alpha, float *X, armpl_int_t incX, float beta, float *Y, armpl_int_t incY);
void cblas_saxpy(armpl_int_t N, float alpha, float *X, armpl_int_t incX, float *Y, armpl_int_t incY);
float cblas_scasum(armpl_int_t N, armpl_singlecomplex_t *X, armpl_int_t incX);
float cblas_scnrm2(armpl_int_t N, armpl_singlecomplex_t *X, armpl_int_t incX);
void cblas_scopy(armpl_int_t N, float *X, armpl_int_t incX, float *Y, armpl_int_t incY);
float cblas_sdot(armpl_int_t N, float *X, armpl_int_t incX, float *Y, armpl_int_t incY);
float cblas_sdsdot(armpl_int_t N, float alpha, float *X, armpl_int_t incX, float *Y, armpl_int_t incY);
void cblas_sgbmv(enum CBLAS_ORDER order, enum CBLAS_TRANSPOSE TransA, armpl_int_t M, armpl_int_t N, armpl_int_t KL, armpl_int_t KU, float alpha, float *A, armpl_int_t lda, float *X, armpl_int_t incX, float beta, float *Y, armpl_int_t incY);
void cblas_sgemm(enum CBLAS_ORDER Order, enum CBLAS_TRANSPOSE TransA, enum CBLAS_TRANSPOSE TransB, armpl_int_t M, armpl_int_t N, armpl_int_t K, float alpha, float *A, armpl_int_t lda, float *B, armpl_int_t ldb, float beta, float *C, armpl_int_t ldc);
void cblas_sgemm_batch(enum CBLAS_ORDER order, const enum CBLAS_TRANSPOSE* transA, const enum CBLAS_TRANSPOSE* transB, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const float *alpha, const float **A, const armpl_int_t *lda, const float **B, const armpl_int_t *ldb, const float *beta, float **C, const armpl_int_t *ldc, armpl_int_t group_count, const armpl_int_t *group_size);
void cblas_sgemv(enum CBLAS_ORDER order, enum CBLAS_TRANSPOSE TransA, armpl_int_t M, armpl_int_t N, float alpha, float *A, armpl_int_t lda, float *X, armpl_int_t incX, float beta, float *Y, armpl_int_t incY);
void cblas_sger(enum CBLAS_ORDER order, armpl_int_t M, armpl_int_t N, float alpha, float *X, armpl_int_t incX, float *Y, armpl_int_t incY, float *A, armpl_int_t lda);
float cblas_snrm2(armpl_int_t N, float *X, armpl_int_t incX);
void cblas_srot(armpl_int_t N, float *X, armpl_int_t incX, float *Y, armpl_int_t incY, float c, float s);
void cblas_srotg(float *a, float *b, float *c, float *s);
void cblas_srotm(armpl_int_t N, float *X, armpl_int_t incX, float *Y, armpl_int_t incY, float *P);
void cblas_srotmg(float *d1, float *d2, float *b1, float b2, float *P);
void cblas_ssbmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, armpl_int_t K, float alpha, float *A, armpl_int_t lda, float *X, armpl_int_t incX, float beta, float *Y, armpl_int_t incY);
void cblas_sscal(armpl_int_t N, float alpha, float *X, armpl_int_t incX);
void cblas_sspmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, float alpha, float *Ap, float *X, armpl_int_t incX, float beta, float *Y, armpl_int_t incY);
void cblas_sspr(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, float alpha, float *X, armpl_int_t incX, float *Ap);
void cblas_sspr2(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, float alpha, float *X, armpl_int_t incX, float *Y, armpl_int_t incY, float *A);
void cblas_sswap(armpl_int_t N, float *X, armpl_int_t incX, float *Y, armpl_int_t incY);
void cblas_ssymm(enum CBLAS_ORDER Order, enum CBLAS_SIDE Side, enum CBLAS_UPLO Uplo, armpl_int_t M, armpl_int_t N, float alpha, float *A, armpl_int_t lda, float *B, armpl_int_t ldb, float beta, float *C, armpl_int_t ldc);
void cblas_ssymv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, float alpha, float *A, armpl_int_t lda, float *X, armpl_int_t incX, float beta, float *Y, armpl_int_t incY);
void cblas_ssyr(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, float alpha, float *X, armpl_int_t incX, float *A, armpl_int_t lda);
void cblas_ssyr2(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, float alpha, float *X, armpl_int_t incX, float *Y, armpl_int_t incY, float *A, armpl_int_t lda);
void cblas_ssyr2k(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE Trans, armpl_int_t N, armpl_int_t K, float alpha, float *A, armpl_int_t lda, float *B, armpl_int_t ldb, float beta, float *C, armpl_int_t ldc);
void cblas_ssyrk(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE Trans, armpl_int_t N, armpl_int_t K, float alpha, float *A, armpl_int_t lda, float beta, float *C, armpl_int_t ldc);
void cblas_stbmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_int_t K, float *A, armpl_int_t lda, float *X, armpl_int_t incX);
void cblas_stbsv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_int_t K, float *A, armpl_int_t lda, float *X, armpl_int_t incX);
void cblas_stpmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, float *Ap, float *X, armpl_int_t incX);
void cblas_stpsv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, float *Ap, float *X, armpl_int_t incX);
void cblas_strmm(enum CBLAS_ORDER Order, enum CBLAS_SIDE Side, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t M, armpl_int_t N, float alpha, float *A, armpl_int_t lda, float *B, armpl_int_t ldb);
void cblas_strmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, float *A, armpl_int_t lda, float *X, armpl_int_t incX);
void cblas_strsm(enum CBLAS_ORDER Order, enum CBLAS_SIDE Side, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t M, armpl_int_t N, float alpha, float *A, armpl_int_t lda, float *B, armpl_int_t ldb);
void cblas_strsv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, float *A, armpl_int_t lda, float *X, armpl_int_t incX);
void cblas_xerbla(armpl_int_t RowMajorStrg, armpl_int_t CBLAS_CallFromC, armpl_int_t info, const char *rout, const char *form, int enumval);
void cblas_zaxpby(armpl_int_t N, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *Y, armpl_int_t incY);
void cblas_zaxpy(armpl_int_t N, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *Y, armpl_int_t incY);
void cblas_zcopy(armpl_int_t N, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *Y, armpl_int_t incY);
void cblas_zdotc_sub(armpl_int_t N, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *Y, armpl_int_t incY, armpl_doublecomplex_t *dotc);
void cblas_zdotu_sub(armpl_int_t N, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *Y, armpl_int_t incY, armpl_doublecomplex_t *dotu);
void cblas_zdscal(armpl_int_t N, double alpha, armpl_doublecomplex_t *X, armpl_int_t incX);
void cblas_zgbmv(enum CBLAS_ORDER order, enum CBLAS_TRANSPOSE TransA, armpl_int_t M, armpl_int_t N, armpl_int_t KL, armpl_int_t KU, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *Y, armpl_int_t incY);
void cblas_zgemm(enum CBLAS_ORDER Order, enum CBLAS_TRANSPOSE TransA, enum CBLAS_TRANSPOSE TransB, armpl_int_t M, armpl_int_t N, armpl_int_t K, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *B, armpl_int_t ldb, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *C, armpl_int_t ldc);
void cblas_zgemm3m(enum CBLAS_ORDER Order, enum CBLAS_TRANSPOSE TransA, enum CBLAS_TRANSPOSE TransB, armpl_int_t M, armpl_int_t N, armpl_int_t K, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *B, armpl_int_t ldb, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *C, armpl_int_t ldc);
void cblas_zgemm_batch(enum CBLAS_ORDER order, const enum CBLAS_TRANSPOSE* transA, const enum CBLAS_TRANSPOSE* transB, const armpl_int_t *m, const armpl_int_t *n, const armpl_int_t *k, const armpl_doublecomplex_t *alpha, const armpl_doublecomplex_t **A, const armpl_int_t *lda, const armpl_doublecomplex_t **B, const armpl_int_t *ldb, const armpl_doublecomplex_t *beta, armpl_doublecomplex_t **C, const armpl_int_t *ldc, armpl_int_t group_count, const armpl_int_t *group_size);
void cblas_zgemv(enum CBLAS_ORDER order, enum CBLAS_TRANSPOSE TransA, armpl_int_t M, armpl_int_t N, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *Y, armpl_int_t incY);
void cblas_zgerc(enum CBLAS_ORDER order, armpl_int_t M, armpl_int_t N, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *Y, armpl_int_t incY, armpl_doublecomplex_t *A, armpl_int_t lda);
void cblas_zgeru(enum CBLAS_ORDER order, armpl_int_t M, armpl_int_t N, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *Y, armpl_int_t incY, armpl_doublecomplex_t *A, armpl_int_t lda);
void cblas_zhbmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, armpl_int_t K, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *Y, armpl_int_t incY);
void cblas_zhemm(enum CBLAS_ORDER Order, enum CBLAS_SIDE Side, enum CBLAS_UPLO Uplo, armpl_int_t M, armpl_int_t N, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *B, armpl_int_t ldb, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *C, armpl_int_t ldc);
void cblas_zhemv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *Y, armpl_int_t incY);
void cblas_zher(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, double alpha, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *A, armpl_int_t lda);
void cblas_zher2(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *Y, armpl_int_t incY, armpl_doublecomplex_t *A, armpl_int_t lda);
void cblas_zher2k(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE Trans, armpl_int_t N, armpl_int_t K, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *B, armpl_int_t ldb, double beta, armpl_doublecomplex_t *C, armpl_int_t ldc);
void cblas_zherk(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE Trans, armpl_int_t N, armpl_int_t K, double alpha, armpl_doublecomplex_t *A, armpl_int_t lda, double beta, armpl_doublecomplex_t *C, armpl_int_t ldc);
void cblas_zhpmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *Ap, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *Y, armpl_int_t incY);
void cblas_zhpr(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, double alpha, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *A);
void cblas_zhpr2(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, armpl_int_t N, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *Y, armpl_int_t incY, armpl_doublecomplex_t *Ap);
void cblas_zscal(armpl_int_t N, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *X, armpl_int_t incX);
void cblas_zswap(armpl_int_t N, armpl_doublecomplex_t *X, armpl_int_t incX, armpl_doublecomplex_t *Y, armpl_int_t incY);
void cblas_zsymm(enum CBLAS_ORDER Order, enum CBLAS_SIDE Side, enum CBLAS_UPLO Uplo, armpl_int_t M, armpl_int_t N, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *B, armpl_int_t ldb, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *C, armpl_int_t ldc);
void cblas_zsyr2k(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE Trans, armpl_int_t N, armpl_int_t K, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *B, armpl_int_t ldb, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *C, armpl_int_t ldc);
void cblas_zsyrk(enum CBLAS_ORDER Order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE Trans, armpl_int_t N, armpl_int_t K, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *C, armpl_int_t ldc);
void cblas_ztbmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_int_t K, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *X, armpl_int_t incX);
void cblas_ztbsv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_int_t K, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *X, armpl_int_t incX);
void cblas_ztpmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_doublecomplex_t *Ap, armpl_doublecomplex_t *X, armpl_int_t incX);
void cblas_ztpsv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_doublecomplex_t *Ap, armpl_doublecomplex_t *X, armpl_int_t incX);
void cblas_ztrmm(enum CBLAS_ORDER Order, enum CBLAS_SIDE Side, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t M, armpl_int_t N, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *B, armpl_int_t ldb);
void cblas_ztrmv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *X, armpl_int_t incX);
void cblas_ztrsm(enum CBLAS_ORDER Order, enum CBLAS_SIDE Side, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t M, armpl_int_t N, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *B, armpl_int_t ldb);
void cblas_ztrsv(enum CBLAS_ORDER order, enum CBLAS_UPLO Uplo, enum CBLAS_TRANSPOSE TransA, enum CBLAS_DIAG Diag, armpl_int_t N, armpl_doublecomplex_t *A, armpl_int_t lda, armpl_doublecomplex_t *X, armpl_int_t incX);

/* lapacke (C interfaces to LAPACK) */
/* lapacke functions typically return the value of info
   via the function name instead of through the argument list */

/* Values for the matrix_order argument to lapacke functions */
#define LAPACK_ROW_MAJOR               101
#define LAPACK_COL_MAJOR               102

/* lapacke function return values signifying memory problems */
#define LAPACK_WORK_MEMORY_ERROR       -1010
#define LAPACK_TRANSPOSE_MEMORY_ERROR  -1011

/* Callback logical functions of one, two, or three arguments are used
*  to select eigenvalues to sort to the top left of the Schur form.
*  The value is selected if function returns TRUE (non-zero). */

typedef armpl_int_t (*LAPACK_S_SELECT2) (const float *, const float *);
typedef armpl_int_t (*LAPACK_S_SELECT3) (const float *, const float *, const float *);
typedef armpl_int_t (*LAPACK_D_SELECT2) (const double *, const double *);
typedef armpl_int_t (*LAPACK_D_SELECT3) (const double *, const double *, const double *);
typedef armpl_int_t (*LAPACK_C_SELECT1) (const armpl_singlecomplex_t *);
typedef armpl_int_t (*LAPACK_C_SELECT2) (const armpl_singlecomplex_t *, const armpl_singlecomplex_t *);
typedef armpl_int_t (*LAPACK_Z_SELECT1) (const armpl_doublecomplex_t *);
typedef armpl_int_t (*LAPACK_Z_SELECT2) (const armpl_doublecomplex_t *, const armpl_doublecomplex_t *);

/* C-LAPACK function prototypes */

armpl_int_t LAPACKE_cbbcsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *theta, float *phi, armpl_singlecomplex_t *u1, armpl_int_t ldu1, armpl_singlecomplex_t *u2, armpl_int_t ldu2, armpl_singlecomplex_t *v1t, armpl_int_t ldv1t, armpl_singlecomplex_t *v2t, armpl_int_t ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e);
armpl_int_t LAPACKE_cbbcsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *theta, float *phi, armpl_singlecomplex_t *u1, armpl_int_t ldu1, armpl_singlecomplex_t *u2, armpl_int_t ldu2, armpl_singlecomplex_t *v1t, armpl_int_t ldv1t, armpl_singlecomplex_t *v2t, armpl_int_t ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e, float *rwork, armpl_int_t lrwork);
armpl_int_t LAPACKE_cbdsqr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, float *d, float *e, armpl_singlecomplex_t *vt, armpl_int_t ldvt, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cbdsqr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, float *d, float *e, armpl_singlecomplex_t *vt, armpl_int_t ldvt, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_cgbbrd(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, armpl_singlecomplex_t *ab, armpl_int_t ldab, float *d, float *e, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *pt, armpl_int_t ldpt, armpl_singlecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cgbbrd_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, armpl_singlecomplex_t *ab, armpl_int_t ldab, float *d, float *e, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *pt, armpl_int_t ldpt, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cgbcon(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const armpl_singlecomplex_t *ab, armpl_int_t ldab, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_cgbcon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const armpl_singlecomplex_t *ab, armpl_int_t ldab, const armpl_int_t *ipiv, float anorm, float *rcond, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cgbequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const armpl_singlecomplex_t *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgbequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const armpl_singlecomplex_t *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgbequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const armpl_singlecomplex_t *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgbequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const armpl_singlecomplex_t *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgbrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const armpl_singlecomplex_t *ab, armpl_int_t ldab, const armpl_singlecomplex_t *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cgbrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const armpl_singlecomplex_t *ab, armpl_int_t ldab, const armpl_singlecomplex_t *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cgbrfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const armpl_singlecomplex_t *ab, armpl_int_t ldab, const armpl_singlecomplex_t *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const float *r, const float *c, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_cgbrfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const armpl_singlecomplex_t *ab, armpl_int_t ldab, const armpl_singlecomplex_t *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const float *r, const float *c, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cgbsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgbsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgbsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *rpivot);
armpl_int_t LAPACKE_cgbsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cgbsvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_cgbsvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cgbtrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgbtrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgbtrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const armpl_singlecomplex_t *ab, armpl_int_t ldab, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgbtrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const armpl_singlecomplex_t *ab, armpl_int_t ldab, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgebak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *scale, armpl_int_t m, armpl_singlecomplex_t *v, armpl_int_t ldv);
armpl_int_t LAPACKE_cgebak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *scale, armpl_int_t m, armpl_singlecomplex_t *v, armpl_int_t ldv);
armpl_int_t LAPACKE_cgebal(armpl_int_t matrix_layout, char job, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, float *scale);
armpl_int_t LAPACKE_cgebal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, float *scale);
armpl_int_t LAPACKE_cgebrd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *d, float *e, armpl_singlecomplex_t *tauq, armpl_singlecomplex_t *taup);
armpl_int_t LAPACKE_cgebrd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *d, float *e, armpl_singlecomplex_t *tauq, armpl_singlecomplex_t *taup, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgecon(armpl_int_t matrix_layout, char norm, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float anorm, float *rcond);
armpl_int_t LAPACKE_cgecon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float anorm, float *rcond, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cgeequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgeequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgeequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgeequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_cgees(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_C_SELECT1 select, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *sdim, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vs, armpl_int_t ldvs);
armpl_int_t LAPACKE_cgees_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_C_SELECT1 select, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *sdim, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vs, armpl_int_t ldvs, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_cgeesx(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_C_SELECT1 select, char sense, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *sdim, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vs, armpl_int_t ldvs, float *rconde, float *rcondv);
armpl_int_t LAPACKE_cgeesx_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_C_SELECT1 select, char sense, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *sdim, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vs, armpl_int_t ldvs, float *rconde, float *rcondv, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_cgeev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_cgeev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cgeevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, float *abnrm, float *rconde, float *rcondv);
armpl_int_t LAPACKE_cgeevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cgehrd(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cgehrd_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgejsv(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *sva, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *v, armpl_int_t ldv, float *stat, armpl_int_t *istat);
armpl_int_t LAPACKE_cgejsv_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *sva, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *v, armpl_int_t ldv, armpl_singlecomplex_t *cwork, armpl_int_t lwork, float *work, armpl_int_t lrwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_cgelq2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cgelq2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_cgelqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cgelqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgelq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *t, armpl_int_t tsize);
armpl_int_t LAPACKE_cgelq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *t, armpl_int_t tsize, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgelsd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_cgelsd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_cgels(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgelss(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_cgelss_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cgels_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgelsy(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_int_t *jpvt, float rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_cgelsy_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_int_t *jpvt, float rcond, armpl_int_t *rank, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cgemlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *t, armpl_int_t tsize, armpl_singlecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cgemlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *t, armpl_int_t tsize, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgemqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *t, armpl_int_t tsize, armpl_singlecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cgemqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const armpl_singlecomplex_t *v, armpl_int_t ldv, const armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cgemqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const armpl_singlecomplex_t *v, armpl_int_t ldv, const armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_cgemqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *t, armpl_int_t tsize, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgeqlf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cgeqlf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgeqp3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *jpvt, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cgeqp3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *jpvt, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cgeqpf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *jpvt, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cgeqpf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *jpvt, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cgeqr2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cgeqr2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_cgeqrfp(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cgeqrfp_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgeqrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cgeqrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgeqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *t, armpl_int_t tsize);
armpl_int_t LAPACKE_cgeqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_cgeqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_cgeqrt3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_cgeqrt3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_cgeqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_cgeqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_cgeqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *t, armpl_int_t tsize, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgerfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cgerfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cgerfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *r, const float *c, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_cgerfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *r, const float *c, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cgerqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cgerqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgesdd(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *s, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *vt, armpl_int_t ldvt);
armpl_int_t LAPACKE_cgesdd_work(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *s, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *vt, armpl_int_t ldvt, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_cgesvd(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *s, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *vt, armpl_int_t ldvt, float *superb);
armpl_int_t LAPACKE_cgesvd_work(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *s, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *vt, armpl_int_t ldvt, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cgesvdx(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, float *s, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *vt, armpl_int_t ldvt, armpl_int_t *superb);
armpl_int_t LAPACKE_cgesvdx_work(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, float *s, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *vt, armpl_int_t ldvt, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_cgesvj(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *sva, armpl_int_t mv, armpl_singlecomplex_t *v, armpl_int_t ldv, float *stat);
armpl_int_t LAPACKE_cgesvj_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *sva, armpl_int_t mv, armpl_singlecomplex_t *v, armpl_int_t ldv, armpl_singlecomplex_t *cwork, armpl_int_t lwork, float *rwork, armpl_int_t lrwork);
armpl_int_t LAPACKE_cgesv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgesv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgesvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *rpivot);
armpl_int_t LAPACKE_cgesvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cgesvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_cgesvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cgetf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgetf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgetrf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgetrf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgetrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgetrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgetri(armpl_int_t matrix_layout, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgetri_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgetrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgetrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgetsls(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgetsls_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cggbak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *lscale, const float *rscale, armpl_int_t m, armpl_singlecomplex_t *v, armpl_int_t ldv);
armpl_int_t LAPACKE_cggbak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *lscale, const float *rscale, armpl_int_t m, armpl_singlecomplex_t *v, armpl_int_t ldv);
armpl_int_t LAPACKE_cggbal(armpl_int_t matrix_layout, char job, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale);
armpl_int_t LAPACKE_cggbal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *work);
armpl_int_t LAPACKE_cgges3(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_int_t *sdim, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vsl, armpl_int_t ldvsl, armpl_singlecomplex_t *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_cgges3_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_int_t *sdim, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vsl, armpl_int_t ldvsl, armpl_singlecomplex_t *vsr, armpl_int_t ldvsr, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_cgges(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_int_t *sdim, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vsl, armpl_int_t ldvsl, armpl_singlecomplex_t *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_cgges_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_int_t *sdim, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vsl, armpl_int_t ldvsl, armpl_singlecomplex_t *vsr, armpl_int_t ldvsr, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_cggesx(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, char sense, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_int_t *sdim, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vsl, armpl_int_t ldvsl, armpl_singlecomplex_t *vsr, armpl_int_t ldvsr, float *rconde, float *rcondv);
armpl_int_t LAPACKE_cggesx_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_C_SELECT2 selctg, char sense, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_int_t *sdim, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vsl, armpl_int_t ldvsl, armpl_singlecomplex_t *vsr, armpl_int_t ldvsr, float *rconde, float *rcondv, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork, armpl_int_t liwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_cggev3(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_cggev3_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cggev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_cggev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cggevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv);
armpl_int_t LAPACKE_cggevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_cggglm(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *d, armpl_singlecomplex_t *x, armpl_singlecomplex_t *y);
armpl_int_t LAPACKE_cggglm_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *d, armpl_singlecomplex_t *x, armpl_singlecomplex_t *y, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgghd3(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_cgghd3_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cgghrd(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_cgghrd_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_cgglse(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *c, armpl_singlecomplex_t *d, armpl_singlecomplex_t *x);
armpl_int_t LAPACKE_cgglse_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *c, armpl_singlecomplex_t *d, armpl_singlecomplex_t *x, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cggqrf(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *taua, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *taub);
armpl_int_t LAPACKE_cggqrf_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *taua, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *taub, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cggrqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *taua, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *taub);
armpl_int_t LAPACKE_cggrqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *taua, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *taub, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cggsvd3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float *alpha, float *beta, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *v, armpl_int_t ldv, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_int_t *iwork);
armpl_int_t LAPACKE_cggsvd3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float *alpha, float *beta, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *v, armpl_int_t ldv, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_cggsvd(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float *alpha, float *beta, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *v, armpl_int_t ldv, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_int_t *iwork);
armpl_int_t LAPACKE_cggsvd_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float *alpha, float *beta, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *v, armpl_int_t ldv, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_cggsvp3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float tola, float tolb, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *v, armpl_int_t ldv, armpl_singlecomplex_t *q, armpl_int_t ldq);
armpl_int_t LAPACKE_cggsvp3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float tola, float tolb, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *v, armpl_int_t ldv, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_int_t *iwork, float *rwork, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cggsvp(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float tola, float tolb, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *v, armpl_int_t ldv, armpl_singlecomplex_t *q, armpl_int_t ldq);
armpl_int_t LAPACKE_cggsvp_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float tola, float tolb, armpl_int_t *k, armpl_int_t *l, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *v, armpl_int_t ldv, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_int_t *iwork, float *rwork, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_cgtcon(char norm, armpl_int_t n, const armpl_singlecomplex_t *dl, const armpl_singlecomplex_t *d, const armpl_singlecomplex_t *du, const armpl_singlecomplex_t *du2, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_cgtcon_work(char norm, armpl_int_t n, const armpl_singlecomplex_t *dl, const armpl_singlecomplex_t *d, const armpl_singlecomplex_t *du, const armpl_singlecomplex_t *du2, const armpl_int_t *ipiv, float anorm, float *rcond, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_cgtrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *dl, const armpl_singlecomplex_t *d, const armpl_singlecomplex_t *du, const armpl_singlecomplex_t *dlf, const armpl_singlecomplex_t *df, const armpl_singlecomplex_t *duf, const armpl_singlecomplex_t *du2, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cgtrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *dl, const armpl_singlecomplex_t *d, const armpl_singlecomplex_t *du, const armpl_singlecomplex_t *dlf, const armpl_singlecomplex_t *df, const armpl_singlecomplex_t *duf, const armpl_singlecomplex_t *du2, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cgtsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *dl, armpl_singlecomplex_t *d, armpl_singlecomplex_t *du, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgtsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *dl, armpl_singlecomplex_t *d, armpl_singlecomplex_t *du, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgtsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *dl, const armpl_singlecomplex_t *d, const armpl_singlecomplex_t *du, armpl_singlecomplex_t *dlf, armpl_singlecomplex_t *df, armpl_singlecomplex_t *duf, armpl_singlecomplex_t *du2, armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_cgtsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *dl, const armpl_singlecomplex_t *d, const armpl_singlecomplex_t *du, armpl_singlecomplex_t *dlf, armpl_singlecomplex_t *df, armpl_singlecomplex_t *duf, armpl_singlecomplex_t *du2, armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cgttrf(armpl_int_t n, armpl_singlecomplex_t *dl, armpl_singlecomplex_t *d, armpl_singlecomplex_t *du, armpl_singlecomplex_t *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgttrf_work(armpl_int_t n, armpl_singlecomplex_t *dl, armpl_singlecomplex_t *d, armpl_singlecomplex_t *du, armpl_singlecomplex_t *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_cgttrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *dl, const armpl_singlecomplex_t *d, const armpl_singlecomplex_t *du, const armpl_singlecomplex_t *du2, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cgttrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *dl, const armpl_singlecomplex_t *d, const armpl_singlecomplex_t *du, const armpl_singlecomplex_t *du2, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chbev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chbev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_chbevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chbevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_chbevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chbevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_chbev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chbev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_chbevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_chbevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_chbevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_chbevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_chbgst(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_singlecomplex_t *ab, armpl_int_t ldab, const armpl_singlecomplex_t *bb, armpl_int_t ldbb, armpl_singlecomplex_t *x, armpl_int_t ldx);
armpl_int_t LAPACKE_chbgst_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_singlecomplex_t *ab, armpl_int_t ldab, const armpl_singlecomplex_t *bb, armpl_int_t ldbb, armpl_singlecomplex_t *x, armpl_int_t ldx, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_chbgvd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *bb, armpl_int_t ldbb, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chbgvd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *bb, armpl_int_t ldbb, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_chbgv(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *bb, armpl_int_t ldbb, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chbgv_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *bb, armpl_int_t ldbb, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_chbgvx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *bb, armpl_int_t ldbb, armpl_singlecomplex_t *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_chbgvx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *bb, armpl_int_t ldbb, armpl_singlecomplex_t *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_chbtrd(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab, float *d, float *e, armpl_singlecomplex_t *q, armpl_int_t ldq);
armpl_int_t LAPACKE_chbtrd_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab, float *d, float *e, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_checon_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_checon_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, float anorm, float *rcond, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_checon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_checon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, float anorm, float *rcond, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_cheequb(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cheequb_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *s, float *scond, float *amax, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_cheev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_cheev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *w, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cheevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_cheevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *w, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_cheevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_cheevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *w, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_cheevr_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_cheevr_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *isuppz, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_cheev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_cheevr(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_cheevr_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *isuppz, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_cheev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *w, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_cheevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_cheevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_cheevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_cheevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_chegst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chegst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chegv_2stage(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float *w);
armpl_int_t LAPACKE_chegv_2stage_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float *w, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_chegvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float *w);
armpl_int_t LAPACKE_chegvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float *w, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_chegv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float *w);
armpl_int_t LAPACKE_chegv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float *w, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_chegvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_chegvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_cherfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cherfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cherfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *s, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_cherfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *s, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_chesv_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chesv_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chesv_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chesv_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chesv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chesv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chesvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_chesvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_chesvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_chesvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cheswapr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_cheswapr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_chetrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *d, float *e, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_chetrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, float *d, float *e, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetrf_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_chetrf_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetrf_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv);
armpl_int_t LAPACKE_chetrf_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_chetrf_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_chetrf_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetri2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_chetri2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetri2x(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_int_t nb);
armpl_int_t LAPACKE_chetri2x_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t nb);
armpl_int_t LAPACKE_chetri_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_chetri_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_chetri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_chetrs2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_chetrs_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_chetrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chetrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chfrk(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, float alpha, const armpl_singlecomplex_t *a, armpl_int_t lda, float beta, armpl_singlecomplex_t *c);
armpl_int_t LAPACKE_chfrk_work(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, float alpha, const armpl_singlecomplex_t *a, armpl_int_t lda, float beta, armpl_singlecomplex_t *c);
armpl_int_t LAPACKE_chgeqz(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_singlecomplex_t *h, armpl_int_t ldh, armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chgeqz_work(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_singlecomplex_t *h, armpl_int_t ldh, armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_chpcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_chpcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, float anorm, float *rcond, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_chpevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chpevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_chpev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chpev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_chpevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_chpevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_chpgst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *bp);
armpl_int_t LAPACKE_chpgst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *bp);
armpl_int_t LAPACKE_chpgvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *bp, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chpgvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *bp, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_chpgv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *bp, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chpgv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *bp, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_chpgvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *bp, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_chpgvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *bp, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_chprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *afp, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_chprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *afp, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_chpsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chpsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chpsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *afp, armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_chpsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *afp, armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_chptrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, float *d, float *e, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_chptrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, float *d, float *e, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_chptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_chptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_chptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_chptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_chptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_chsein(armpl_int_t matrix_layout, char job, char eigsrc, char initv, const armpl_int_t *select, armpl_int_t n, const armpl_singlecomplex_t *h, armpl_int_t ldh, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_chsein_work(armpl_int_t matrix_layout, char job, char eigsrc, char initv, const armpl_int_t *select, armpl_int_t n, const armpl_singlecomplex_t *h, armpl_int_t ldh, armpl_singlecomplex_t *w, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, armpl_singlecomplex_t *work, float *rwork, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_chseqr(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_singlecomplex_t *h, armpl_int_t ldh, armpl_singlecomplex_t *w, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_chseqr_work(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_singlecomplex_t *h, armpl_int_t ldh, armpl_singlecomplex_t *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_clacgv(armpl_int_t n, armpl_singlecomplex_t *x, armpl_int_t incx);
armpl_int_t LAPACKE_clacgv_work(armpl_int_t n, armpl_singlecomplex_t *x, armpl_int_t incx);
armpl_int_t LAPACKE_clacn2(armpl_int_t n, armpl_singlecomplex_t *v, armpl_singlecomplex_t *x, float *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_clacn2_work(armpl_int_t n, armpl_singlecomplex_t *v, armpl_singlecomplex_t *x, float *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_clacp2(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_clacp2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_clacpy(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_clacpy_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_clag2z(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *sa, armpl_int_t ldsa, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_clag2z_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *sa, armpl_int_t ldsa, armpl_doublecomplex_t *a, armpl_int_t lda);
float LAPACKE_clange(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda);
float LAPACKE_clange_work(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *work);
float LAPACKE_clanhe(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda);
float LAPACKE_clanhe_work(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *work);
float LAPACKE_clansy(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda);
float LAPACKE_clansy_work(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *work);
float LAPACKE_clantr(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda);
float LAPACKE_clantr_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *work);
armpl_int_t LAPACKE_clapmr(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_clapmr_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_clapmt(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_clapmt_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_clarfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *v, armpl_int_t ldv, const armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_clarfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *v, armpl_int_t ldv, const armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_clarfg(armpl_int_t n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, armpl_int_t incx, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_clarfg_work(armpl_int_t n, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *x, armpl_int_t incx, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_clarft(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *v, armpl_int_t ldv, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_clarft_work(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *v, armpl_int_t ldv, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_clarfx(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *v, armpl_singlecomplex_t tau, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_clarfx_work(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *v, armpl_singlecomplex_t tau, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_clarnv(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, armpl_singlecomplex_t *x);
armpl_int_t LAPACKE_clarnv_work(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, armpl_singlecomplex_t *x);
armpl_int_t LAPACKE_clascl(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, float cfrom, float cto, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_clascl_work(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, float cfrom, float cto, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_claset(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t alpha, armpl_singlecomplex_t beta, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_claset_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t alpha, armpl_singlecomplex_t beta, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_classq(armpl_int_t n, armpl_singlecomplex_t *x, armpl_int_t incx, float *scale, float *sumsq);
armpl_int_t LAPACKE_classq_work(armpl_int_t n, armpl_singlecomplex_t *x, armpl_int_t incx, float *scale, float *sumsq);
armpl_int_t LAPACKE_claswp(armpl_int_t matrix_layout, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_claswp_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_clauum(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_clauum_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_cpbcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const armpl_singlecomplex_t *ab, armpl_int_t ldab, float anorm, float *rcond);
armpl_int_t LAPACKE_cpbcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const armpl_singlecomplex_t *ab, armpl_int_t ldab, float anorm, float *rcond, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cpbequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const armpl_singlecomplex_t *ab, armpl_int_t ldab, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cpbequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const armpl_singlecomplex_t *ab, armpl_int_t ldab, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cpbrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_singlecomplex_t *ab, armpl_int_t ldab, const armpl_singlecomplex_t *afb, armpl_int_t ldafb, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cpbrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_singlecomplex_t *ab, armpl_int_t ldab, const armpl_singlecomplex_t *afb, armpl_int_t ldafb, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cpbstf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, armpl_singlecomplex_t *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_cpbstf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, armpl_singlecomplex_t *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_cpbsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpbsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpbsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *afb, armpl_int_t ldafb, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_cpbsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *afb, armpl_int_t ldafb, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cpbtrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_cpbtrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_singlecomplex_t *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_cpbtrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpbtrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpftrf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_singlecomplex_t *a);
armpl_int_t LAPACKE_cpftrf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_singlecomplex_t *a);
armpl_int_t LAPACKE_cpftri(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_singlecomplex_t *a);
armpl_int_t LAPACKE_cpftri_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_singlecomplex_t *a);
armpl_int_t LAPACKE_cpftrs(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpftrs_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpocon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float anorm, float *rcond);
armpl_int_t LAPACKE_cpocon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float anorm, float *rcond, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cpoequb(armpl_int_t matrix_layout, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cpoequb_work(armpl_int_t matrix_layout, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cpoequ(armpl_int_t matrix_layout, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cpoequ_work(armpl_int_t matrix_layout, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cporfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cporfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cporfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const float *s, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_cporfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const float *s, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cposv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cposv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cposvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_cposvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cposvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_cposvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cpotrf2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_cpotrf2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_cpotrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_cpotrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_cpotri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_cpotri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_cpotrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpotrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cppcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *ap, float anorm, float *rcond);
armpl_int_t LAPACKE_cppcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *ap, float anorm, float *rcond, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cppequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *ap, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cppequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *ap, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_cpprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *afp, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cpprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *afp, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cppsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cppsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cppsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *afp, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_cppsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *ap, armpl_singlecomplex_t *afp, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cpptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap);
armpl_int_t LAPACKE_cpptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap);
armpl_int_t LAPACKE_cpptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap);
armpl_int_t LAPACKE_cpptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap);
armpl_int_t LAPACKE_cpptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpstrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, float tol);
armpl_int_t LAPACKE_cpstrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, float tol, float *work);
armpl_int_t LAPACKE_cptcon(armpl_int_t n, const float *d, const armpl_singlecomplex_t *e, float anorm, float *rcond);
armpl_int_t LAPACKE_cptcon_work(armpl_int_t n, const float *d, const armpl_singlecomplex_t *e, float anorm, float *rcond, float *work);
armpl_int_t LAPACKE_cpteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_cpteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, armpl_singlecomplex_t *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_cptrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *d, const armpl_singlecomplex_t *e, const float *df, const armpl_singlecomplex_t *ef, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_cptrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *d, const armpl_singlecomplex_t *e, const float *df, const armpl_singlecomplex_t *ef, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cptsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *d, armpl_singlecomplex_t *e, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cptsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *d, armpl_singlecomplex_t *e, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cptsvx(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const float *d, const armpl_singlecomplex_t *e, float *df, armpl_singlecomplex_t *ef, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_cptsvx_work(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const float *d, const armpl_singlecomplex_t *e, float *df, armpl_singlecomplex_t *ef, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cpttrf(armpl_int_t n, float *d, armpl_singlecomplex_t *e);
armpl_int_t LAPACKE_cpttrf_work(armpl_int_t n, float *d, armpl_singlecomplex_t *e);
armpl_int_t LAPACKE_cpttrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *d, const armpl_singlecomplex_t *e, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cpttrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *d, const armpl_singlecomplex_t *e, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cspcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_cspcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, float anorm, float *rcond, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_csprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *afp, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_csprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *afp, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_cspsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cspsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *ap, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cspsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *afp, armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_cspsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *afp, armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_csptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_csptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_csptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_csptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_csptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_cstedc(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_cstedc_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_cstegr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_cstegr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *isuppz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_cstein(armpl_int_t matrix_layout, armpl_int_t n, const float *d, const float *e, armpl_int_t m, const float *w, const armpl_int_t *iblock, const armpl_int_t *isplit, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifailv);
armpl_int_t LAPACKE_cstein_work(armpl_int_t matrix_layout, armpl_int_t n, const float *d, const float *e, armpl_int_t m, const float *w, const armpl_int_t *iblock, const armpl_int_t *isplit, armpl_singlecomplex_t *z, armpl_int_t ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifailv);
armpl_int_t LAPACKE_cstemr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac);
armpl_int_t LAPACKE_cstemr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, float *w, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_csteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, armpl_singlecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_csteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, armpl_singlecomplex_t *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_csycon_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_csycon_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, float anorm, float *rcond, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_csycon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_csyconv(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *e);
armpl_int_t LAPACKE_csyconv_work(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *e);
armpl_int_t LAPACKE_csycon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, float anorm, float *rcond, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_csyequb(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_csyequb_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *s, float *scond, float *amax, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_csyrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_csyrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_csyrfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *s, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_csyrfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *s, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_csyr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t alpha, const armpl_singlecomplex_t *x, armpl_int_t incx, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_csyr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t alpha, const armpl_singlecomplex_t *x, armpl_int_t incx, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_csysv_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csysv_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csysv_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csysv_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csysv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csysv_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csysv_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csysv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csysvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_csysvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork);
armpl_int_t LAPACKE_csysvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_csysvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *s, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_csyswapr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_csyswapr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_csytrf_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_csytrf_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csytrf_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv);
armpl_int_t LAPACKE_csytrf_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *e, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csytrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_csytrf_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_csytrf_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csytrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csytri2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_csytri2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csytri2x(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_int_t nb);
armpl_int_t LAPACKE_csytri2x_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t nb);
armpl_int_t LAPACKE_csytri_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_csytri_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csytri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_csytri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_csytrs2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_csytrs_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *e, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_csytrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_csytrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctbcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const armpl_singlecomplex_t *ab, armpl_int_t ldab, float *rcond);
armpl_int_t LAPACKE_ctbcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const armpl_singlecomplex_t *ab, armpl_int_t ldab, float *rcond, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_ctbrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_singlecomplex_t *ab, armpl_int_t ldab, const armpl_singlecomplex_t *b, armpl_int_t ldb, const armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_ctbrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_singlecomplex_t *ab, armpl_int_t ldab, const armpl_singlecomplex_t *b, armpl_int_t ldb, const armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_ctbtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctbtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_singlecomplex_t *ab, armpl_int_t ldab, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctfsm(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t alpha, const armpl_singlecomplex_t *a, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctfsm_work(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t alpha, const armpl_singlecomplex_t *a, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctftri(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, armpl_singlecomplex_t *a);
armpl_int_t LAPACKE_ctftri_work(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, armpl_singlecomplex_t *a);
armpl_int_t LAPACKE_ctfttp(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_singlecomplex_t *arf, armpl_singlecomplex_t *ap);
armpl_int_t LAPACKE_ctfttp_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_singlecomplex_t *arf, armpl_singlecomplex_t *ap);
armpl_int_t LAPACKE_ctfttr(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_singlecomplex_t *arf, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_ctfttr_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_singlecomplex_t *arf, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_ctgevc(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const armpl_singlecomplex_t *s, armpl_int_t lds, const armpl_singlecomplex_t *p, armpl_int_t ldp, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ctgevc_work(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const armpl_singlecomplex_t *s, armpl_int_t lds, const armpl_singlecomplex_t *p, armpl_int_t ldp, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_ctgexc(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ctgexc_work(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ctgsen(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *m, float *pl, float *pr, float *dif);
armpl_int_t LAPACKE_ctgsen_work(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *alpha, armpl_singlecomplex_t *beta, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *z, armpl_int_t ldz, armpl_int_t *m, float *pl, float *pr, float *dif, armpl_singlecomplex_t *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ctgsja(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float tola, float tolb, float *alpha, float *beta, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *v, armpl_int_t ldv, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_int_t *ncycle);
armpl_int_t LAPACKE_ctgsja_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, float tola, float tolb, float *alpha, float *beta, armpl_singlecomplex_t *u, armpl_int_t ldu, armpl_singlecomplex_t *v, armpl_int_t ldv, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *work, armpl_int_t *ncycle);
armpl_int_t LAPACKE_ctgsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *b, armpl_int_t ldb, const armpl_singlecomplex_t *vl, armpl_int_t ldvl, const armpl_singlecomplex_t *vr, armpl_int_t ldvr, float *s, float *dif, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ctgsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *b, armpl_int_t ldb, const armpl_singlecomplex_t *vl, armpl_int_t ldvl, const armpl_singlecomplex_t *vr, armpl_int_t ldvr, float *s, float *dif, armpl_int_t mm, armpl_int_t *m, armpl_singlecomplex_t *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_ctgsyl(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *c, armpl_int_t ldc, const armpl_singlecomplex_t *d, armpl_int_t ldd, const armpl_singlecomplex_t *e, armpl_int_t lde, armpl_singlecomplex_t *f, armpl_int_t ldf, float *scale, float *dif);
armpl_int_t LAPACKE_ctgsyl_work(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *c, armpl_int_t ldc, const armpl_singlecomplex_t *d, armpl_int_t ldd, const armpl_singlecomplex_t *e, armpl_int_t lde, armpl_singlecomplex_t *f, armpl_int_t ldf, float *scale, float *dif, armpl_singlecomplex_t *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_ctpcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const armpl_singlecomplex_t *ap, float *rcond);
armpl_int_t LAPACKE_ctpcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const armpl_singlecomplex_t *ap, float *rcond, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_ctpmqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const armpl_singlecomplex_t *v, armpl_int_t ldv, const armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctpmqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const armpl_singlecomplex_t *v, armpl_int_t ldv, const armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_ctpqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_ctpqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_ctpqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_ctpqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_ctprfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const armpl_singlecomplex_t *v, armpl_int_t ldv, const armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctprfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const armpl_singlecomplex_t *v, armpl_int_t ldv, const armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_ctprfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *b, armpl_int_t ldb, const armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_ctprfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *b, armpl_int_t ldb, const armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_ctptri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_singlecomplex_t *ap);
armpl_int_t LAPACKE_ctptri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_singlecomplex_t *ap);
armpl_int_t LAPACKE_ctptrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctptrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctpttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *arf);
armpl_int_t LAPACKE_ctpttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *arf);
armpl_int_t LAPACKE_ctpttr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_ctpttr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *ap, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_ctrcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *rcond);
armpl_int_t LAPACKE_ctrcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, float *rcond, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_ctrevc(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ctrevc_work(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *vl, armpl_int_t ldvl, armpl_singlecomplex_t *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_ctrexc(armpl_int_t matrix_layout, char compq, armpl_int_t n, armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ctrexc_work(armpl_int_t matrix_layout, char compq, armpl_int_t n, armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ctrrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *b, armpl_int_t ldb, const armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_ctrrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *b, armpl_int_t ldb, const armpl_singlecomplex_t *x, armpl_int_t ldx, float *ferr, float *berr, armpl_singlecomplex_t *work, float *rwork);
armpl_int_t LAPACKE_ctrsen(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *w, armpl_int_t *m, float *s, float *sep);
armpl_int_t LAPACKE_ctrsen_work(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, armpl_singlecomplex_t *t, armpl_int_t ldt, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *w, armpl_int_t *m, float *s, float *sep, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ctrsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const armpl_singlecomplex_t *t, armpl_int_t ldt, const armpl_singlecomplex_t *vl, armpl_int_t ldvl, const armpl_singlecomplex_t *vr, armpl_int_t ldvr, float *s, float *sep, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ctrsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const armpl_singlecomplex_t *t, armpl_int_t ldt, const armpl_singlecomplex_t *vl, armpl_int_t ldvl, const armpl_singlecomplex_t *vr, armpl_int_t ldvr, float *s, float *sep, armpl_int_t mm, armpl_int_t *m, armpl_singlecomplex_t *work, armpl_int_t ldwork, float *rwork);
armpl_int_t LAPACKE_ctrsyl(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *c, armpl_int_t ldc, float *scale);
armpl_int_t LAPACKE_ctrsyl_work(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *b, armpl_int_t ldb, armpl_singlecomplex_t *c, armpl_int_t ldc, float *scale);
armpl_int_t LAPACKE_ctrtri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_ctrtri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_ctrtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctrtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ctrttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *arf);
armpl_int_t LAPACKE_ctrttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *arf);
armpl_int_t LAPACKE_ctrttp(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *ap);
armpl_int_t LAPACKE_ctrttp_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *ap);
armpl_int_t LAPACKE_ctzrzf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_ctzrzf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunbdb(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, armpl_singlecomplex_t *x11, armpl_int_t ldx11, armpl_singlecomplex_t *x12, armpl_int_t ldx12, armpl_singlecomplex_t *x21, armpl_int_t ldx21, armpl_singlecomplex_t *x22, armpl_int_t ldx22, float *theta, float *phi, armpl_singlecomplex_t *taup1, armpl_singlecomplex_t *taup2, armpl_singlecomplex_t *tauq1, armpl_singlecomplex_t *tauq2);
armpl_int_t LAPACKE_cunbdb_work(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, armpl_singlecomplex_t *x11, armpl_int_t ldx11, armpl_singlecomplex_t *x12, armpl_int_t ldx12, armpl_singlecomplex_t *x21, armpl_int_t ldx21, armpl_singlecomplex_t *x22, armpl_int_t ldx22, float *theta, float *phi, armpl_singlecomplex_t *taup1, armpl_singlecomplex_t *taup2, armpl_singlecomplex_t *tauq1, armpl_singlecomplex_t *tauq2, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cuncsd2by1(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, armpl_singlecomplex_t *x11, armpl_int_t ldx11, armpl_singlecomplex_t *x21, armpl_int_t ldx21, float *theta, armpl_singlecomplex_t *u1, armpl_int_t ldu1, armpl_singlecomplex_t *u2, armpl_int_t ldu2, armpl_singlecomplex_t *v1t, armpl_int_t ldv1t);
armpl_int_t LAPACKE_cuncsd2by1_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, armpl_singlecomplex_t *x11, armpl_int_t ldx11, armpl_singlecomplex_t *x21, armpl_int_t ldx21, float *theta, armpl_singlecomplex_t *u1, armpl_int_t ldu1, armpl_singlecomplex_t *u2, armpl_int_t ldu2, armpl_singlecomplex_t *v1t, armpl_int_t ldv1t, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_cuncsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, armpl_singlecomplex_t *x11, armpl_int_t ldx11, armpl_singlecomplex_t *x12, armpl_int_t ldx12, armpl_singlecomplex_t *x21, armpl_int_t ldx21, armpl_singlecomplex_t *x22, armpl_int_t ldx22, float *theta, armpl_singlecomplex_t *u1, armpl_int_t ldu1, armpl_singlecomplex_t *u2, armpl_int_t ldu2, armpl_singlecomplex_t *v1t, armpl_int_t ldv1t, armpl_singlecomplex_t *v2t, armpl_int_t ldv2t);
armpl_int_t LAPACKE_cuncsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, armpl_singlecomplex_t *x11, armpl_int_t ldx11, armpl_singlecomplex_t *x12, armpl_int_t ldx12, armpl_singlecomplex_t *x21, armpl_int_t ldx21, armpl_singlecomplex_t *x22, armpl_int_t ldx22, float *theta, armpl_singlecomplex_t *u1, armpl_int_t ldu1, armpl_singlecomplex_t *u2, armpl_int_t ldu2, armpl_singlecomplex_t *v1t, armpl_int_t ldv1t, armpl_singlecomplex_t *v2t, armpl_int_t ldv2t, armpl_singlecomplex_t *work, armpl_int_t lwork, float *rwork, armpl_int_t lrwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_cungbr(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cungbr_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunghr(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cunghr_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunglq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cunglq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cungql(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cungql_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cungqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cungqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cungrq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cungrq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cungtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau);
armpl_int_t LAPACKE_cungtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmbr(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmbr_work(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmhr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmhr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmql(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmql_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmrq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmrq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmrz(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmrz_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cunmtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cunmtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *a, armpl_int_t lda, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_cupgtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *q, armpl_int_t ldq);
armpl_int_t LAPACKE_cupgtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *q, armpl_int_t ldq, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_cupmtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_cupmtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const armpl_singlecomplex_t *ap, const armpl_singlecomplex_t *tau, armpl_singlecomplex_t *c, armpl_int_t ldc, armpl_singlecomplex_t *work);
armpl_int_t LAPACKE_dbbcsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *theta, double *phi, double *u1, armpl_int_t ldu1, double *u2, armpl_int_t ldu2, double *v1t, armpl_int_t ldv1t, double *v2t, armpl_int_t ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e);
armpl_int_t LAPACKE_dbbcsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *theta, double *phi, double *u1, armpl_int_t ldu1, double *u2, armpl_int_t ldu2, double *v1t, armpl_int_t ldv1t, double *v2t, armpl_int_t ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dbdsdc(armpl_int_t matrix_layout, char uplo, char compq, armpl_int_t n, double *d, double *e, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt, double *q, armpl_int_t *iq);
armpl_int_t LAPACKE_dbdsdc_work(armpl_int_t matrix_layout, char uplo, char compq, armpl_int_t n, double *d, double *e, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt, double *q, armpl_int_t *iq, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dbdsqr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, double *d, double *e, double *vt, armpl_int_t ldvt, double *u, armpl_int_t ldu, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dbdsqr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, double *d, double *e, double *vt, armpl_int_t ldvt, double *u, armpl_int_t ldu, double *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_dbdsvdx(armpl_int_t matrix_layout, char uplo, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, double *s, double *z, armpl_int_t ldz, armpl_int_t *superb);
armpl_int_t LAPACKE_dbdsvdx_work(armpl_int_t matrix_layout, char uplo, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, double *s, double *z, armpl_int_t ldz, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_ddisna(char job, armpl_int_t m, armpl_int_t n, const double *d, double *sep);
armpl_int_t LAPACKE_ddisna_work(char job, armpl_int_t m, armpl_int_t n, const double *d, double *sep);
armpl_int_t LAPACKE_dgbbrd(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, double *ab, armpl_int_t ldab, double *d, double *e, double *q, armpl_int_t ldq, double *pt, armpl_int_t ldpt, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dgbbrd_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, double *ab, armpl_int_t ldab, double *d, double *e, double *q, armpl_int_t ldq, double *pt, armpl_int_t ldpt, double *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_dgbcon(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double *ab, armpl_int_t ldab, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_dgbcon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double *ab, armpl_int_t ldab, const armpl_int_t *ipiv, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgbequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgbequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgbequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgbequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const double *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgbrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dgbrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgbrfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const double *r, const double *c, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dgbrfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const double *r, const double *c, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgbsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, double *ab, armpl_int_t ldab, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgbsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, double *ab, armpl_int_t ldab, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgbsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *rpivot);
armpl_int_t LAPACKE_dgbsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgbsvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dgbsvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgbtrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, double *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgbtrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, double *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgbtrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgbtrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgebak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *scale, armpl_int_t m, double *v, armpl_int_t ldv);
armpl_int_t LAPACKE_dgebak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *scale, armpl_int_t m, double *v, armpl_int_t ldv);
armpl_int_t LAPACKE_dgebal(armpl_int_t matrix_layout, char job, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, double *scale);
armpl_int_t LAPACKE_dgebal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, double *scale);
armpl_int_t LAPACKE_dgebrd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *d, double *e, double *tauq, double *taup);
armpl_int_t LAPACKE_dgebrd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *d, double *e, double *tauq, double *taup, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgecon(armpl_int_t matrix_layout, char norm, armpl_int_t n, const double *a, armpl_int_t lda, double anorm, double *rcond);
armpl_int_t LAPACKE_dgecon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, const double *a, armpl_int_t lda, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgeequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgeequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgeequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgeequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_dgees(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_D_SELECT2 select, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *sdim, double *wr, double *wi, double *vs, armpl_int_t ldvs);
armpl_int_t LAPACKE_dgees_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_D_SELECT2 select, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *sdim, double *wr, double *wi, double *vs, armpl_int_t ldvs, double *work, armpl_int_t lwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_dgeesx(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_D_SELECT2 select, char sense, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *sdim, double *wr, double *wi, double *vs, armpl_int_t ldvs, double *rconde, double *rcondv);
armpl_int_t LAPACKE_dgeesx_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_D_SELECT2 select, char sense, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *sdim, double *wr, double *wi, double *vs, armpl_int_t ldvs, double *rconde, double *rcondv, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_dgeev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, double *a, armpl_int_t lda, double *wr, double *wi, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_dgeev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, double *a, armpl_int_t lda, double *wr, double *wi, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgeevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, double *a, armpl_int_t lda, double *wr, double *wi, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, double *abnrm, double *rconde, double *rcondv);
armpl_int_t LAPACKE_dgeevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, double *a, armpl_int_t lda, double *wr, double *wi, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgehrd(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgehrd_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgejsv(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *sva, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *stat, armpl_int_t *istat);
armpl_int_t LAPACKE_dgejsv_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *sva, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgelq2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgelq2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work);
armpl_int_t LAPACKE_dgelqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgelqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgelq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t tsize);
armpl_int_t LAPACKE_dgelq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t tsize, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgelsd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_dgelsd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgels(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgelss(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_dgelss_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgels_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgelsy(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *jpvt, double rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_dgelsy_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *jpvt, double rcond, armpl_int_t *rank, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgemlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *t, armpl_int_t tsize, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dgemlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *t, armpl_int_t tsize, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgemqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *t, armpl_int_t tsize, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dgemqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dgemqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_dgemqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *t, armpl_int_t tsize, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgeqlf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgeqlf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgeqp3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *jpvt, double *tau);
armpl_int_t LAPACKE_dgeqp3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *jpvt, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgeqpf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *jpvt, double *tau);
armpl_int_t LAPACKE_dgeqpf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *jpvt, double *tau, double *work);
armpl_int_t LAPACKE_dgeqr2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgeqr2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work);
armpl_int_t LAPACKE_dgeqrfp(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgeqrfp_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgeqrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgeqrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgeqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t tsize);
armpl_int_t LAPACKE_dgeqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dgeqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dgeqrt3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dgeqrt3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dgeqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, double *a, armpl_int_t lda, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dgeqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, double *a, armpl_int_t lda, double *t, armpl_int_t ldt, double *work);
armpl_int_t LAPACKE_dgeqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *t, armpl_int_t tsize, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgerfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dgerfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgerfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *r, const double *c, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dgerfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *r, const double *c, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgerqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dgerqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgesdd(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *s, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt);
armpl_int_t LAPACKE_dgesdd_work(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *s, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgesvd(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *s, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt, double *superb);
armpl_int_t LAPACKE_dgesvd_work(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *s, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgesvdx(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, double *s, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt, armpl_int_t *superb);
armpl_int_t LAPACKE_dgesvdx_work(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, double *s, double *u, armpl_int_t ldu, double *vt, armpl_int_t ldvt, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgesvj(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *sva, armpl_int_t mv, double *v, armpl_int_t ldv, double *stat);
armpl_int_t LAPACKE_dgesvj_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *sva, armpl_int_t mv, double *v, armpl_int_t ldv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgesv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgesv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgesvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *rpivot);
armpl_int_t LAPACKE_dgesvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgesvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dgesvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgetf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgetf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgetrf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgetrf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgetrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgetrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgetri(armpl_int_t matrix_layout, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgetri_work(armpl_int_t matrix_layout, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgetrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgetrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgetsls(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgetsls_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dggbak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *lscale, const double *rscale, armpl_int_t m, double *v, armpl_int_t ldv);
armpl_int_t LAPACKE_dggbak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *lscale, const double *rscale, armpl_int_t m, double *v, armpl_int_t ldv);
armpl_int_t LAPACKE_dggbal(armpl_int_t matrix_layout, char job, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale);
armpl_int_t LAPACKE_dggbal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *work);
armpl_int_t LAPACKE_dgges3(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, armpl_int_t ldvsl, double *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_dgges3_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, armpl_int_t ldvsl, double *vsr, armpl_int_t ldvsr, double *work, armpl_int_t lwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_dgges(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, armpl_int_t ldvsl, double *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_dgges_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, armpl_int_t ldvsl, double *vsr, armpl_int_t ldvsr, double *work, armpl_int_t lwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_dggesx(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, char sense, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, armpl_int_t ldvsl, double *vsr, armpl_int_t ldvsr, double *rconde, double *rcondv);
armpl_int_t LAPACKE_dggesx_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_D_SELECT3 selctg, char sense, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, armpl_int_t *sdim, double *alphar, double *alphai, double *beta, double *vsl, armpl_int_t ldvsl, double *vsr, armpl_int_t ldvsr, double *rconde, double *rcondv, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_dggev3(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_dggev3_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dggev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_dggev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dggevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv);
armpl_int_t LAPACKE_dggevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_dggglm(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *d, double *x, double *y);
armpl_int_t LAPACKE_dggglm_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *d, double *x, double *y, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgghd3(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dgghd3_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dgghrd(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dgghrd_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dgglse(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *c, double *d, double *x);
armpl_int_t LAPACKE_dgglse_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *c, double *d, double *x, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dggqrf(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, double *a, armpl_int_t lda, double *taua, double *b, armpl_int_t ldb, double *taub);
armpl_int_t LAPACKE_dggqrf_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, double *a, armpl_int_t lda, double *taua, double *b, armpl_int_t ldb, double *taub, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dggrqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, double *a, armpl_int_t lda, double *taua, double *b, armpl_int_t ldb, double *taub);
armpl_int_t LAPACKE_dggrqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, double *a, armpl_int_t lda, double *taua, double *b, armpl_int_t ldb, double *taub, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dggsvd3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alpha, double *beta, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq, armpl_int_t *iwork);
armpl_int_t LAPACKE_dggsvd3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alpha, double *beta, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dggsvd(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alpha, double *beta, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq, armpl_int_t *iwork);
armpl_int_t LAPACKE_dggsvd_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alpha, double *beta, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dggsvp3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double tola, double tolb, armpl_int_t *k, armpl_int_t *l, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq);
armpl_int_t LAPACKE_dggsvp3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double tola, double tolb, armpl_int_t *k, armpl_int_t *l, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq, armpl_int_t *iwork, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dggsvp(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double tola, double tolb, armpl_int_t *k, armpl_int_t *l, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq);
armpl_int_t LAPACKE_dggsvp_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double tola, double tolb, armpl_int_t *k, armpl_int_t *l, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq, armpl_int_t *iwork, double *tau, double *work);
armpl_int_t LAPACKE_dgtcon(char norm, armpl_int_t n, const double *dl, const double *d, const double *du, const double *du2, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_dgtcon_work(char norm, armpl_int_t n, const double *dl, const double *d, const double *du, const double *du2, const armpl_int_t *ipiv, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgtrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *dl, const double *d, const double *du, const double *dlf, const double *df, const double *duf, const double *du2, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dgtrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *dl, const double *d, const double *du, const double *dlf, const double *df, const double *duf, const double *du2, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgtsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *dl, double *d, double *du, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgtsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *dl, double *d, double *du, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgtsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const double *dl, const double *d, const double *du, double *dlf, double *df, double *duf, double *du2, armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_dgtsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const double *dl, const double *d, const double *du, double *dlf, double *df, double *duf, double *du2, armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dgttrf(armpl_int_t n, double *dl, double *d, double *du, double *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgttrf_work(armpl_int_t n, double *dl, double *d, double *du, double *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dgttrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *dl, const double *d, const double *du, const double *du2, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dgttrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const double *dl, const double *d, const double *du, const double *du2, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dhgeqz(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *h, armpl_int_t ldh, double *t, armpl_int_t ldt, double *alphar, double *alphai, double *beta, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dhgeqz_work(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *h, armpl_int_t ldh, double *t, armpl_int_t ldt, double *alphar, double *alphai, double *beta, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dhsein(armpl_int_t matrix_layout, char job, char eigsrc, char initv, armpl_int_t *select, armpl_int_t n, const double *h, armpl_int_t ldh, double *wr, const double *wi, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_dhsein_work(armpl_int_t matrix_layout, char job, char eigsrc, char initv, armpl_int_t *select, armpl_int_t n, const double *h, armpl_int_t ldh, double *wr, const double *wi, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, double *work, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_dhseqr(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *h, armpl_int_t ldh, double *wr, double *wi, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dhseqr_work(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *h, armpl_int_t ldh, double *wr, double *wi, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dlacn2(armpl_int_t n, double *v, double *x, armpl_int_t *isgn, double *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_dlacn2_work(armpl_int_t n, double *v, double *x, armpl_int_t *isgn, double *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_dlacpy(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dlacpy_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dlag2s(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, float *sa, armpl_int_t ldsa);
armpl_int_t LAPACKE_dlag2s_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, float *sa, armpl_int_t ldsa);
double LAPACKE_dlamch(char cmach);
double LAPACKE_dlamch_work(char cmach);
double LAPACKE_dlange(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda);
double LAPACKE_dlange_work(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *work);
double LAPACKE_dlansy(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const double *a, armpl_int_t lda);
double LAPACKE_dlansy_work(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double *work);
double LAPACKE_dlantr(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda);
double LAPACKE_dlantr_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, double *work);
armpl_int_t LAPACKE_dlapmr(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, double *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_dlapmr_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, double *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_dlapmt(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, double *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_dlapmt_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, double *x, armpl_int_t ldx, armpl_int_t *k);
double LAPACKE_dlapy2(double x, double y);
double LAPACKE_dlapy2_work(double x, double y);
double LAPACKE_dlapy3(double x, double y, double z);
double LAPACKE_dlapy3_work(double x, double y, double z);
armpl_int_t LAPACKE_dlarfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dlarfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *c, armpl_int_t ldc, double *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_dlarfg(armpl_int_t n, double *alpha, double *x, armpl_int_t incx, double *tau);
armpl_int_t LAPACKE_dlarfg_work(armpl_int_t n, double *alpha, double *x, armpl_int_t incx, double *tau);
armpl_int_t LAPACKE_dlarft(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const double *v, armpl_int_t ldv, const double *tau, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dlarft_work(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const double *v, armpl_int_t ldv, const double *tau, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dlarfx(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const double *v, double tau, double *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_dlarfx_work(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const double *v, double tau, double *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_dlarnv(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, double *x);
armpl_int_t LAPACKE_dlarnv_work(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, double *x);
armpl_int_t LAPACKE_dlartgp(double f, double g, double *cs, double *sn, double *r);
armpl_int_t LAPACKE_dlartgp_work(double f, double g, double *cs, double *sn, double *r);
armpl_int_t LAPACKE_dlartgs(double x, double y, double sigma, double *cs, double *sn);
armpl_int_t LAPACKE_dlartgs_work(double x, double y, double sigma, double *cs, double *sn);
armpl_int_t LAPACKE_dlascl(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, double cfrom, double cto, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dlascl_work(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, double cfrom, double cto, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dlaset(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, double alpha, double beta, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dlaset_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, double alpha, double beta, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dlasrt(char id, armpl_int_t n, double *d);
armpl_int_t LAPACKE_dlasrt_work(char id, armpl_int_t n, double *d);
armpl_int_t LAPACKE_dlassq(armpl_int_t n, double *x, armpl_int_t incx, double *scale, double *sumsq);
armpl_int_t LAPACKE_dlassq_work(armpl_int_t n, double *x, armpl_int_t incx, double *scale, double *sumsq);
armpl_int_t LAPACKE_dlaswp(armpl_int_t matrix_layout, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_dlaswp_work(armpl_int_t matrix_layout, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_dlauum(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dlauum_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dopgtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, const double *tau, double *q, armpl_int_t ldq);
armpl_int_t LAPACKE_dopgtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, const double *tau, double *q, armpl_int_t ldq, double *work);
armpl_int_t LAPACKE_dopmtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const double *ap, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dopmtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const double *ap, const double *tau, double *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_dorbdb(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *x11, armpl_int_t ldx11, double *x12, armpl_int_t ldx12, double *x21, armpl_int_t ldx21, double *x22, armpl_int_t ldx22, double *theta, double *phi, double *taup1, double *taup2, double *tauq1, double *tauq2);
armpl_int_t LAPACKE_dorbdb_work(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *x11, armpl_int_t ldx11, double *x12, armpl_int_t ldx12, double *x21, armpl_int_t ldx21, double *x22, armpl_int_t ldx22, double *theta, double *phi, double *taup1, double *taup2, double *tauq1, double *tauq2, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dorcsd2by1(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *x11, armpl_int_t ldx11, double *x21, armpl_int_t ldx21, double *theta, double *u1, armpl_int_t ldu1, double *u2, armpl_int_t ldu2, double *v1t, armpl_int_t ldv1t);
armpl_int_t LAPACKE_dorcsd2by1_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *x11, armpl_int_t ldx11, double *x21, armpl_int_t ldx21, double *theta, double *u1, armpl_int_t ldu1, double *u2, armpl_int_t ldu2, double *v1t, armpl_int_t ldv1t, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dorcsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *x11, armpl_int_t ldx11, double *x12, armpl_int_t ldx12, double *x21, armpl_int_t ldx21, double *x22, armpl_int_t ldx22, double *theta, double *u1, armpl_int_t ldu1, double *u2, armpl_int_t ldu2, double *v1t, armpl_int_t ldv1t, double *v2t, armpl_int_t ldv2t);
armpl_int_t LAPACKE_dorcsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *x11, armpl_int_t ldx11, double *x12, armpl_int_t ldx12, double *x21, armpl_int_t ldx21, double *x22, armpl_int_t ldx22, double *theta, double *u1, armpl_int_t ldu1, double *u2, armpl_int_t ldu2, double *v1t, armpl_int_t ldv1t, double *v2t, armpl_int_t ldv2t, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dorgbr(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau);
armpl_int_t LAPACKE_dorgbr_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dorghr(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, const double *tau);
armpl_int_t LAPACKE_dorghr_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, double *a, armpl_int_t lda, const double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dorglq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau);
armpl_int_t LAPACKE_dorglq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dorgql(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau);
armpl_int_t LAPACKE_dorgql_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dorgqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau);
armpl_int_t LAPACKE_dorgqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dorgrq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau);
armpl_int_t LAPACKE_dorgrq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, double *a, armpl_int_t lda, const double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dorgtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const double *tau);
armpl_int_t LAPACKE_dorgtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormbr(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormbr_work(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormhr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormhr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormql(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormql_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormrq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormrq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormrz(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormrz_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dormtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc);
armpl_int_t LAPACKE_dormtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, const double *tau, double *c, armpl_int_t ldc, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dpbcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const double *ab, armpl_int_t ldab, double anorm, double *rcond);
armpl_int_t LAPACKE_dpbcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const double *ab, armpl_int_t ldab, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dpbequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const double *ab, armpl_int_t ldab, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dpbequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const double *ab, armpl_int_t ldab, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dpbrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *afb, armpl_int_t ldafb, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dpbrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *afb, armpl_int_t ldafb, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dpbstf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, double *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_dpbstf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, double *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_dpbsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpbsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpbsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *afb, armpl_int_t ldafb, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_dpbsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, double *ab, armpl_int_t ldab, double *afb, armpl_int_t ldafb, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dpbtrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_dpbtrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_dpbtrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpbtrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpftrf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, double *a);
armpl_int_t LAPACKE_dpftrf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, double *a);
armpl_int_t LAPACKE_dpftri(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, double *a);
armpl_int_t LAPACKE_dpftri_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, double *a);
armpl_int_t LAPACKE_dpftrs(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpftrs_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpocon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double anorm, double *rcond);
armpl_int_t LAPACKE_dpocon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dpoequb(armpl_int_t matrix_layout, armpl_int_t n, const double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dpoequb_work(armpl_int_t matrix_layout, armpl_int_t n, const double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dpoequ(armpl_int_t matrix_layout, armpl_int_t n, const double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dpoequ_work(armpl_int_t matrix_layout, armpl_int_t n, const double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dporfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dporfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dporfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const double *s, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dporfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const double *s, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dposv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dposv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dposvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_dposvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dposvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dposvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dpotrf2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dpotrf2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dpotrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dpotrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dpotri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dpotri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dpotrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpotrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dppcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, double anorm, double *rcond);
armpl_int_t LAPACKE_dppcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dppequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dppequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dpprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, const double *afp, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dpprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, const double *afp, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dppsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *ap, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dppsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *ap, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dppsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *ap, double *afp, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_dppsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *ap, double *afp, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dpptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap);
armpl_int_t LAPACKE_dpptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap);
armpl_int_t LAPACKE_dpptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap);
armpl_int_t LAPACKE_dpptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap);
armpl_int_t LAPACKE_dpptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpstrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, double tol);
armpl_int_t LAPACKE_dpstrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, double tol, double *work);
armpl_int_t LAPACKE_dptcon(armpl_int_t n, const double *d, const double *e, double anorm, double *rcond);
armpl_int_t LAPACKE_dptcon_work(armpl_int_t n, const double *d, const double *e, double anorm, double *rcond, double *work);
armpl_int_t LAPACKE_dpteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dpteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_dptrfs(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const double *d, const double *e, const double *df, const double *ef, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dptrfs_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const double *d, const double *e, const double *df, const double *ef, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work);
armpl_int_t LAPACKE_dptsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *d, double *e, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dptsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *d, double *e, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dptsvx(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const double *d, const double *e, double *df, double *ef, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_dptsvx_work(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const double *d, const double *e, double *df, double *ef, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work);
armpl_int_t LAPACKE_dpttrf(armpl_int_t n, double *d, double *e);
armpl_int_t LAPACKE_dpttrf_work(armpl_int_t n, double *d, double *e);
armpl_int_t LAPACKE_dpttrs(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const double *d, const double *e, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dpttrs_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const double *d, const double *e, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsbev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dsbev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsbevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dsbevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsbevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dsbevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsbev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dsbev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *w, double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_dsbevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsbevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsbevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsbevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsbgst(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, const double *bb, armpl_int_t ldbb, double *x, armpl_int_t ldx);
armpl_int_t LAPACKE_dsbgst_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, const double *bb, armpl_int_t ldbb, double *x, armpl_int_t ldx, double *work);
armpl_int_t LAPACKE_dsbgvd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, double *bb, armpl_int_t ldbb, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dsbgvd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, double *bb, armpl_int_t ldbb, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsbgv(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, double *bb, armpl_int_t ldbb, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dsbgv_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, double *bb, armpl_int_t ldbb, double *w, double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_dsbgvx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, double *bb, armpl_int_t ldbb, double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsbgvx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, double *ab, armpl_int_t ldab, double *bb, armpl_int_t ldbb, double *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsbtrd(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *d, double *e, double *q, armpl_int_t ldq);
armpl_int_t LAPACKE_dsbtrd_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, double *ab, armpl_int_t ldab, double *d, double *e, double *q, armpl_int_t ldq, double *work);
armpl_int_t LAPACKE_dsfrk(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, double alpha, const double *a, armpl_int_t lda, double beta, double *c);
armpl_int_t LAPACKE_dsfrk_work(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, double alpha, const double *a, armpl_int_t lda, double beta, double *c);
armpl_int_t LAPACKE_dsgesv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, armpl_int_t *iter);
armpl_int_t LAPACKE_dsgesv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *work, float *swork, armpl_int_t *iter);
armpl_int_t LAPACKE_dspcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_dspcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, const armpl_int_t *ipiv, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dspevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *ap, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dspevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *ap, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dspev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *ap, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dspev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *ap, double *w, double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_dspevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *ap, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dspevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *ap, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dspgst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, double *ap, const double *bp);
armpl_int_t LAPACKE_dspgst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, double *ap, const double *bp);
armpl_int_t LAPACKE_dspgvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *ap, double *bp, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dspgvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *ap, double *bp, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dspgv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *ap, double *bp, double *w, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dspgv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *ap, double *bp, double *w, double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_dspgvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, double *ap, double *bp, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dspgvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, double *ap, double *bp, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsposv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, armpl_int_t *iter);
armpl_int_t LAPACKE_dsposv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *work, float *swork, armpl_int_t *iter);
armpl_int_t LAPACKE_dsprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, const double *afp, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dsprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, const double *afp, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dspsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *ap, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dspsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *ap, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dspsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, double *afp, armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_dspsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, double *afp, armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dsptrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap, double *d, double *e, double *tau);
armpl_int_t LAPACKE_dsptrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap, double *d, double *e, double *tau);
armpl_int_t LAPACKE_dsptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *ap, const armpl_int_t *ipiv, double *work);
armpl_int_t LAPACKE_dsptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *ap, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dstebz(char range, char order, armpl_int_t n, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, const double *d, const double *e, armpl_int_t *m, armpl_int_t *nsplit, double *w, armpl_int_t *iblock, armpl_int_t *isplit);
armpl_int_t LAPACKE_dstebz_work(char range, char order, armpl_int_t n, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, const double *d, const double *e, armpl_int_t *m, armpl_int_t *nsplit, double *w, armpl_int_t *iblock, armpl_int_t *isplit, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dstedc(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dstedc_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dstegr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_dstegr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dstein(armpl_int_t matrix_layout, armpl_int_t n, const double *d, const double *e, armpl_int_t m, const double *w, const armpl_int_t *iblock, const armpl_int_t *isplit, double *z, armpl_int_t ldz, armpl_int_t *ifailv);
armpl_int_t LAPACKE_dstein_work(armpl_int_t matrix_layout, armpl_int_t n, const double *d, const double *e, armpl_int_t m, const double *w, const armpl_int_t *iblock, const armpl_int_t *isplit, double *z, armpl_int_t ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifailv);
armpl_int_t LAPACKE_dstemr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac);
armpl_int_t LAPACKE_dstemr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dsteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_dsterf(armpl_int_t n, double *d, double *e);
armpl_int_t LAPACKE_dsterf_work(armpl_int_t n, double *d, double *e);
armpl_int_t LAPACKE_dstevd(armpl_int_t matrix_layout, char jobz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dstevd_work(armpl_int_t matrix_layout, char jobz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dstev(armpl_int_t matrix_layout, char jobz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz);
armpl_int_t LAPACKE_dstevr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_dstevr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dstev_work(armpl_int_t matrix_layout, char jobz, armpl_int_t n, double *d, double *e, double *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_dstevx(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dstevx_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsycon_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, const double *e, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_dsycon_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, const double *e, const armpl_int_t *ipiv, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dsycon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_dsyconv(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *e);
armpl_int_t LAPACKE_dsyconv_work(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *e);
armpl_int_t LAPACKE_dsycon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double anorm, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dsyequb(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_dsyequb_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double *s, double *scond, double *amax, double *work);
armpl_int_t LAPACKE_dsyev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_dsyev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsyevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_dsyevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsyevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_dsyevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsyevr_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_dsyevr_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsyev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_dsyevr(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_dsyevr_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *isuppz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsyev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *w, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsyevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsyevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsyevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsyevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsygst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsygst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsygv_2stage(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *w);
armpl_int_t LAPACKE_dsygv_2stage_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *w, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsygvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *w);
armpl_int_t LAPACKE_dsygvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *w, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dsygv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *w);
armpl_int_t LAPACKE_dsygv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *w, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsygvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsygvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, double *z, armpl_int_t ldz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_dsyrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dsyrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dsyrfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *s, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dsyrfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *s, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dsysv_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsysv_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsysv_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *e, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsysv_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *e, armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsysv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsysv_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsysv_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsysv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsysvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_dsysvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, const double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dsysvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_dsysvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, double *a, armpl_int_t lda, double *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *s, double *b, armpl_int_t ldb, double *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dsyswapr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_dsyswapr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_dsytrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *d, double *e, double *tau);
armpl_int_t LAPACKE_dsytrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *d, double *e, double *tau, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytrf_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsytrf_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytrf_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *e, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsytrf_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, double *e, armpl_int_t *ipiv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsytrf_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsytrf_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, armpl_int_t *ipiv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytri2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsytri2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytri2x(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_int_t nb);
armpl_int_t LAPACKE_dsytri2x_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *work, armpl_int_t nb);
armpl_int_t LAPACKE_dsytri_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const double *e, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsytri_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const double *e, const armpl_int_t *ipiv, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_dsytri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *work);
armpl_int_t LAPACKE_dsytrs2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *work);
armpl_int_t LAPACKE_dsytrs_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *e, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *e, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dsytrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dsytrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const armpl_int_t *ipiv, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtbcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const double *ab, armpl_int_t ldab, double *rcond);
armpl_int_t LAPACKE_dtbcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const double *ab, armpl_int_t ldab, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtbrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *b, armpl_int_t ldb, const double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dtbrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, const double *b, armpl_int_t ldb, const double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtbtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtbtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const double *ab, armpl_int_t ldab, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtfsm(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, double alpha, const double *a, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtfsm_work(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, double alpha, const double *a, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtftri(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, double *a);
armpl_int_t LAPACKE_dtftri_work(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, double *a);
armpl_int_t LAPACKE_dtfttp(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *arf, double *ap);
armpl_int_t LAPACKE_dtfttp_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *arf, double *ap);
armpl_int_t LAPACKE_dtfttr(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *arf, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dtfttr_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *arf, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dtgevc(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const double *s, armpl_int_t lds, const double *p, armpl_int_t ldp, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_dtgevc_work(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const double *s, armpl_int_t lds, const double *p, armpl_int_t ldp, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, double *work);
armpl_int_t LAPACKE_dtgexc(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz, armpl_int_t *ifst, armpl_int_t *ilst);
armpl_int_t LAPACKE_dtgexc_work(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz, armpl_int_t *ifst, armpl_int_t *ilst, double *work, armpl_int_t lwork);
armpl_int_t LAPACKE_dtgsen(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz, armpl_int_t *m, double *pl, double *pr, double *dif);
armpl_int_t LAPACKE_dtgsen_work(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *alphar, double *alphai, double *beta, double *q, armpl_int_t ldq, double *z, armpl_int_t ldz, armpl_int_t *m, double *pl, double *pr, double *dif, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dtgsja(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double tola, double tolb, double *alpha, double *beta, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq, armpl_int_t *ncycle);
armpl_int_t LAPACKE_dtgsja_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double tola, double tolb, double *alpha, double *beta, double *u, armpl_int_t ldu, double *v, armpl_int_t ldv, double *q, armpl_int_t ldq, double *work, armpl_int_t *ncycle);
armpl_int_t LAPACKE_dtgsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, const double *vl, armpl_int_t ldvl, const double *vr, armpl_int_t ldvr, double *s, double *dif, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_dtgsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, const double *vl, armpl_int_t ldvl, const double *vr, armpl_int_t ldvr, double *s, double *dif, armpl_int_t mm, armpl_int_t *m, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtgsyl(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, double *c, armpl_int_t ldc, const double *d, armpl_int_t ldd, const double *e, armpl_int_t lde, double *f, armpl_int_t ldf, double *scale, double *dif);
armpl_int_t LAPACKE_dtgsyl_work(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, double *c, armpl_int_t ldc, const double *d, armpl_int_t ldd, const double *e, armpl_int_t lde, double *f, armpl_int_t ldf, double *scale, double *dif, double *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtpcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const double *ap, double *rcond);
armpl_int_t LAPACKE_dtpcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const double *ap, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtpmqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtpmqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *work);
armpl_int_t LAPACKE_dtpqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dtpqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dtpqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *t, armpl_int_t ldt);
armpl_int_t LAPACKE_dtpqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *t, armpl_int_t ldt, double *work);
armpl_int_t LAPACKE_dtprfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtprfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const double *v, armpl_int_t ldv, const double *t, armpl_int_t ldt, double *a, armpl_int_t lda, double *b, armpl_int_t ldb, double *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_dtprfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *ap, const double *b, armpl_int_t ldb, const double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dtprfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *ap, const double *b, armpl_int_t ldb, const double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtptri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, double *ap);
armpl_int_t LAPACKE_dtptri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, double *ap);
armpl_int_t LAPACKE_dtptrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *ap, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtptrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *ap, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtpttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *ap, double *arf);
armpl_int_t LAPACKE_dtpttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *ap, double *arf);
armpl_int_t LAPACKE_dtpttr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dtpttr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *ap, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dtrcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const double *a, armpl_int_t lda, double *rcond);
armpl_int_t LAPACKE_dtrcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const double *a, armpl_int_t lda, double *rcond, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtrevc(armpl_int_t matrix_layout, char side, char howmny, armpl_int_t *select, armpl_int_t n, const double *t, armpl_int_t ldt, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_dtrevc_work(armpl_int_t matrix_layout, char side, char howmny, armpl_int_t *select, armpl_int_t n, const double *t, armpl_int_t ldt, double *vl, armpl_int_t ldvl, double *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, double *work);
armpl_int_t LAPACKE_dtrexc(armpl_int_t matrix_layout, char compq, armpl_int_t n, double *t, armpl_int_t ldt, double *q, armpl_int_t ldq, armpl_int_t *ifst, armpl_int_t *ilst);
armpl_int_t LAPACKE_dtrexc_work(armpl_int_t matrix_layout, char compq, armpl_int_t n, double *t, armpl_int_t ldt, double *q, armpl_int_t ldq, armpl_int_t *ifst, armpl_int_t *ilst, double *work);
armpl_int_t LAPACKE_dtrrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, const double *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_dtrrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, const double *x, armpl_int_t ldx, double *ferr, double *berr, double *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtrsen(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, double *t, armpl_int_t ldt, double *q, armpl_int_t ldq, double *wr, double *wi, armpl_int_t *m, double *s, double *sep);
armpl_int_t LAPACKE_dtrsen_work(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, double *t, armpl_int_t ldt, double *q, armpl_int_t ldq, double *wr, double *wi, armpl_int_t *m, double *s, double *sep, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_dtrsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const double *t, armpl_int_t ldt, const double *vl, armpl_int_t ldvl, const double *vr, armpl_int_t ldvr, double *s, double *sep, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_dtrsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const double *t, armpl_int_t ldt, const double *vl, armpl_int_t ldvl, const double *vr, armpl_int_t ldvr, double *s, double *sep, armpl_int_t mm, armpl_int_t *m, double *work, armpl_int_t ldwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_dtrsyl(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, double *c, armpl_int_t ldc, double *scale);
armpl_int_t LAPACKE_dtrsyl_work(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, const double *b, armpl_int_t ldb, double *c, armpl_int_t ldc, double *scale);
armpl_int_t LAPACKE_dtrtri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dtrtri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_dtrtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtrtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const double *a, armpl_int_t lda, double *b, armpl_int_t ldb);
armpl_int_t LAPACKE_dtrttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double *arf);
armpl_int_t LAPACKE_dtrttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double *arf);
armpl_int_t LAPACKE_dtrttp(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double *ap);
armpl_int_t LAPACKE_dtrttp_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const double *a, armpl_int_t lda, double *ap);
armpl_int_t LAPACKE_dtzrzf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau);
armpl_int_t LAPACKE_dtzrzf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, double *a, armpl_int_t lda, double *tau, double *work, armpl_int_t lwork);
void LAPACKE_ilaver(armpl_int_t *vers_major, armpl_int_t *vers_minor, armpl_int_t *vers_patch);
armpl_int_t LAPACKE_sbbcsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *theta, float *phi, float *u1, armpl_int_t ldu1, float *u2, armpl_int_t ldu2, float *v1t, armpl_int_t ldv1t, float *v2t, armpl_int_t ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e);
armpl_int_t LAPACKE_sbbcsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *theta, float *phi, float *u1, armpl_int_t ldu1, float *u2, armpl_int_t ldu2, float *v1t, armpl_int_t ldv1t, float *v2t, armpl_int_t ldv2t, float *b11d, float *b11e, float *b12d, float *b12e, float *b21d, float *b21e, float *b22d, float *b22e, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sbdsdc(armpl_int_t matrix_layout, char uplo, char compq, armpl_int_t n, float *d, float *e, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt, float *q, armpl_int_t *iq);
armpl_int_t LAPACKE_sbdsdc_work(armpl_int_t matrix_layout, char uplo, char compq, armpl_int_t n, float *d, float *e, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt, float *q, armpl_int_t *iq, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sbdsqr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, float *d, float *e, float *vt, armpl_int_t ldvt, float *u, armpl_int_t ldu, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sbdsqr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, float *d, float *e, float *vt, armpl_int_t ldvt, float *u, armpl_int_t ldu, float *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_sbdsvdx(armpl_int_t matrix_layout, char uplo, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, float *s, float *z, armpl_int_t ldz, armpl_int_t *superb);
armpl_int_t LAPACKE_sbdsvdx_work(armpl_int_t matrix_layout, char uplo, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, float *s, float *z, armpl_int_t ldz, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sdisna(char job, armpl_int_t m, armpl_int_t n, const float *d, float *sep);
armpl_int_t LAPACKE_sdisna_work(char job, armpl_int_t m, armpl_int_t n, const float *d, float *sep);
armpl_int_t LAPACKE_sgbbrd(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, float *ab, armpl_int_t ldab, float *d, float *e, float *q, armpl_int_t ldq, float *pt, armpl_int_t ldpt, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sgbbrd_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, float *ab, armpl_int_t ldab, float *d, float *e, float *q, armpl_int_t ldq, float *pt, armpl_int_t ldpt, float *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_sgbcon(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float *ab, armpl_int_t ldab, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_sgbcon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float *ab, armpl_int_t ldab, const armpl_int_t *ipiv, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgbequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgbequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgbequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgbequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const float *ab, armpl_int_t ldab, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgbrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_sgbrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgbrfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const float *r, const float *c, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_sgbrfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const float *r, const float *c, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgbsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, float *ab, armpl_int_t ldab, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgbsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, float *ab, armpl_int_t ldab, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgbsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *rpivot);
armpl_int_t LAPACKE_sgbsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgbsvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_sgbsvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgbtrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, float *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgbtrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, float *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgbtrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgbtrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgebak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *scale, armpl_int_t m, float *v, armpl_int_t ldv);
armpl_int_t LAPACKE_sgebak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *scale, armpl_int_t m, float *v, armpl_int_t ldv);
armpl_int_t LAPACKE_sgebal(armpl_int_t matrix_layout, char job, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, float *scale);
armpl_int_t LAPACKE_sgebal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, float *scale);
armpl_int_t LAPACKE_sgebrd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *d, float *e, float *tauq, float *taup);
armpl_int_t LAPACKE_sgebrd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *d, float *e, float *tauq, float *taup, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgecon(armpl_int_t matrix_layout, char norm, armpl_int_t n, const float *a, armpl_int_t lda, float anorm, float *rcond);
armpl_int_t LAPACKE_sgecon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, const float *a, armpl_int_t lda, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgeequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgeequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgeequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgeequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *r, float *c, float *rowcnd, float *colcnd, float *amax);
armpl_int_t LAPACKE_sgees(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_S_SELECT2 select, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *sdim, float *wr, float *wi, float *vs, armpl_int_t ldvs);
armpl_int_t LAPACKE_sgees_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_S_SELECT2 select, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *sdim, float *wr, float *wi, float *vs, armpl_int_t ldvs, float *work, armpl_int_t lwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_sgeesx(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_S_SELECT2 select, char sense, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *sdim, float *wr, float *wi, float *vs, armpl_int_t ldvs, float *rconde, float *rcondv);
armpl_int_t LAPACKE_sgeesx_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_S_SELECT2 select, char sense, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *sdim, float *wr, float *wi, float *vs, armpl_int_t ldvs, float *rconde, float *rcondv, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_sgeev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, float *a, armpl_int_t lda, float *wr, float *wi, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_sgeev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, float *a, armpl_int_t lda, float *wr, float *wi, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgeevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, float *a, armpl_int_t lda, float *wr, float *wi, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, float *abnrm, float *rconde, float *rcondv);
armpl_int_t LAPACKE_sgeevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, float *a, armpl_int_t lda, float *wr, float *wi, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *scale, float *abnrm, float *rconde, float *rcondv, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgehrd(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgehrd_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgejsv(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *sva, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *stat, armpl_int_t *istat);
armpl_int_t LAPACKE_sgejsv_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *sva, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgelq2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgelq2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work);
armpl_int_t LAPACKE_sgelqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgelqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgelq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t tsize);
armpl_int_t LAPACKE_sgelq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t tsize, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgelsd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_sgelsd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgels(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgelss(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_sgelss_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *s, float rcond, armpl_int_t *rank, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgels_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgelsy(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *jpvt, float rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_sgelsy_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *jpvt, float rcond, armpl_int_t *rank, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgemlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *t, armpl_int_t tsize, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sgemlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *t, armpl_int_t tsize, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgemqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *t, armpl_int_t tsize, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sgemqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sgemqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_sgemqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *t, armpl_int_t tsize, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgeqlf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgeqlf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgeqp3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *jpvt, float *tau);
armpl_int_t LAPACKE_sgeqp3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *jpvt, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgeqpf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *jpvt, float *tau);
armpl_int_t LAPACKE_sgeqpf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *jpvt, float *tau, float *work);
armpl_int_t LAPACKE_sgeqr2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgeqr2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work);
armpl_int_t LAPACKE_sgeqrfp(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgeqrfp_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgeqrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgeqrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgeqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t tsize);
armpl_int_t LAPACKE_sgeqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_sgeqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_sgeqrt3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_sgeqrt3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_sgeqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, float *a, armpl_int_t lda, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_sgeqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, float *a, armpl_int_t lda, float *t, armpl_int_t ldt, float *work);
armpl_int_t LAPACKE_sgeqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *t, armpl_int_t tsize, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgerfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_sgerfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgerfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *r, const float *c, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_sgerfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *r, const float *c, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgerqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_sgerqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgesdd(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *s, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt);
armpl_int_t LAPACKE_sgesdd_work(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *s, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgesvd(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *s, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt, float *superb);
armpl_int_t LAPACKE_sgesvd_work(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *s, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgesvdx(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, float *s, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt, armpl_int_t *superb);
armpl_int_t LAPACKE_sgesvdx_work(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, float *s, float *u, armpl_int_t ldu, float *vt, armpl_int_t ldvt, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgesvj(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *sva, armpl_int_t mv, float *v, armpl_int_t ldv, float *stat);
armpl_int_t LAPACKE_sgesvj_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *sva, armpl_int_t mv, float *v, armpl_int_t ldv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgesv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgesv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgesvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *rpivot);
armpl_int_t LAPACKE_sgesvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgesvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_sgesvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *r, float *c, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgetf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgetf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgetrf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgetrf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgetrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgetrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgetri(armpl_int_t matrix_layout, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgetri_work(armpl_int_t matrix_layout, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgetrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgetrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgetsls(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgetsls_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sggbak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *lscale, const float *rscale, armpl_int_t m, float *v, armpl_int_t ldv);
armpl_int_t LAPACKE_sggbak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *lscale, const float *rscale, armpl_int_t m, float *v, armpl_int_t ldv);
armpl_int_t LAPACKE_sggbal(armpl_int_t matrix_layout, char job, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale);
armpl_int_t LAPACKE_sggbal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *work);
armpl_int_t LAPACKE_sgges3(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, armpl_int_t ldvsl, float *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_sgges3_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, armpl_int_t ldvsl, float *vsr, armpl_int_t ldvsr, float *work, armpl_int_t lwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_sgges(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, armpl_int_t ldvsl, float *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_sgges_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, armpl_int_t ldvsl, float *vsr, armpl_int_t ldvsr, float *work, armpl_int_t lwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_sggesx(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, char sense, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, armpl_int_t ldvsl, float *vsr, armpl_int_t ldvsr, float *rconde, float *rcondv);
armpl_int_t LAPACKE_sggesx_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_S_SELECT3 selctg, char sense, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, armpl_int_t *sdim, float *alphar, float *alphai, float *beta, float *vsl, armpl_int_t ldvsl, float *vsr, armpl_int_t ldvsr, float *rconde, float *rcondv, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_sggev3(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_sggev3_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sggev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_sggev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sggevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv);
armpl_int_t LAPACKE_sggevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, float *lscale, float *rscale, float *abnrm, float *bbnrm, float *rconde, float *rcondv, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_sggglm(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *d, float *x, float *y);
armpl_int_t LAPACKE_sggglm_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *d, float *x, float *y, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgghd3(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sgghd3_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sgghrd(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sgghrd_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sgglse(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *c, float *d, float *x);
armpl_int_t LAPACKE_sgglse_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *c, float *d, float *x, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sggqrf(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, float *a, armpl_int_t lda, float *taua, float *b, armpl_int_t ldb, float *taub);
armpl_int_t LAPACKE_sggqrf_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, float *a, armpl_int_t lda, float *taua, float *b, armpl_int_t ldb, float *taub, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sggrqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, float *a, armpl_int_t lda, float *taua, float *b, armpl_int_t ldb, float *taub);
armpl_int_t LAPACKE_sggrqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, float *a, armpl_int_t lda, float *taua, float *b, armpl_int_t ldb, float *taub, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sggsvd3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alpha, float *beta, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq, armpl_int_t *iwork);
armpl_int_t LAPACKE_sggsvd3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alpha, float *beta, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sggsvd(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alpha, float *beta, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq, armpl_int_t *iwork);
armpl_int_t LAPACKE_sggsvd_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alpha, float *beta, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sggsvp3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float tola, float tolb, armpl_int_t *k, armpl_int_t *l, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq);
armpl_int_t LAPACKE_sggsvp3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float tola, float tolb, armpl_int_t *k, armpl_int_t *l, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq, armpl_int_t *iwork, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sggsvp(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float tola, float tolb, armpl_int_t *k, armpl_int_t *l, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq);
armpl_int_t LAPACKE_sggsvp_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float tola, float tolb, armpl_int_t *k, armpl_int_t *l, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq, armpl_int_t *iwork, float *tau, float *work);
armpl_int_t LAPACKE_sgtcon(char norm, armpl_int_t n, const float *dl, const float *d, const float *du, const float *du2, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_sgtcon_work(char norm, armpl_int_t n, const float *dl, const float *d, const float *du, const float *du2, const armpl_int_t *ipiv, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgtrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *dl, const float *d, const float *du, const float *dlf, const float *df, const float *duf, const float *du2, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_sgtrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *dl, const float *d, const float *du, const float *dlf, const float *df, const float *duf, const float *du2, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgtsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *dl, float *d, float *du, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgtsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *dl, float *d, float *du, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgtsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const float *dl, const float *d, const float *du, float *dlf, float *df, float *duf, float *du2, armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_sgtsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const float *dl, const float *d, const float *du, float *dlf, float *df, float *duf, float *du2, armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sgttrf(armpl_int_t n, float *dl, float *d, float *du, float *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgttrf_work(armpl_int_t n, float *dl, float *d, float *du, float *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_sgttrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *dl, const float *d, const float *du, const float *du2, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sgttrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const float *dl, const float *d, const float *du, const float *du2, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_shgeqz(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *h, armpl_int_t ldh, float *t, armpl_int_t ldt, float *alphar, float *alphai, float *beta, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_shgeqz_work(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *h, armpl_int_t ldh, float *t, armpl_int_t ldt, float *alphar, float *alphai, float *beta, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_shsein(armpl_int_t matrix_layout, char job, char eigsrc, char initv, armpl_int_t *select, armpl_int_t n, const float *h, armpl_int_t ldh, float *wr, const float *wi, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_shsein_work(armpl_int_t matrix_layout, char job, char eigsrc, char initv, armpl_int_t *select, armpl_int_t n, const float *h, armpl_int_t ldh, float *wr, const float *wi, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, float *work, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_shseqr(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *h, armpl_int_t ldh, float *wr, float *wi, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_shseqr_work(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *h, armpl_int_t ldh, float *wr, float *wi, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_slacn2(armpl_int_t n, float *v, float *x, armpl_int_t *isgn, float *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_slacn2_work(armpl_int_t n, float *v, float *x, armpl_int_t *isgn, float *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_slacpy(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_slacpy_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_slag2d(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *sa, armpl_int_t ldsa, double *a, armpl_int_t lda);
armpl_int_t LAPACKE_slag2d_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const float *sa, armpl_int_t ldsa, double *a, armpl_int_t lda);
float LAPACKE_slamch(char cmach);
float LAPACKE_slamch_work(char cmach);
float LAPACKE_slange(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda);
float LAPACKE_slange_work(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *work);
float LAPACKE_slansy(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const float *a, armpl_int_t lda);
float LAPACKE_slansy_work(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float *work);
float LAPACKE_slantr(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda);
float LAPACKE_slantr_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, float *work);
armpl_int_t LAPACKE_slapmr(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, float *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_slapmr_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, float *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_slapmt(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, float *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_slapmt_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, float *x, armpl_int_t ldx, armpl_int_t *k);
float LAPACKE_slapy2(float x, float y);
float LAPACKE_slapy2_work(float x, float y);
float LAPACKE_slapy3(float x, float y, float z);
float LAPACKE_slapy3_work(float x, float y, float z);
armpl_int_t LAPACKE_slarfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_slarfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *c, armpl_int_t ldc, float *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_slarfg(armpl_int_t n, float *alpha, float *x, armpl_int_t incx, float *tau);
armpl_int_t LAPACKE_slarfg_work(armpl_int_t n, float *alpha, float *x, armpl_int_t incx, float *tau);
armpl_int_t LAPACKE_slarft(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const float *v, armpl_int_t ldv, const float *tau, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_slarft_work(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const float *v, armpl_int_t ldv, const float *tau, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_slarfx(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const float *v, float tau, float *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_slarfx_work(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const float *v, float tau, float *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_slarnv(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, float *x);
armpl_int_t LAPACKE_slarnv_work(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, float *x);
armpl_int_t LAPACKE_slartgp(float f, float g, float *cs, float *sn, float *r);
armpl_int_t LAPACKE_slartgp_work(float f, float g, float *cs, float *sn, float *r);
armpl_int_t LAPACKE_slartgs(float x, float y, float sigma, float *cs, float *sn);
armpl_int_t LAPACKE_slartgs_work(float x, float y, float sigma, float *cs, float *sn);
armpl_int_t LAPACKE_slascl(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, float cfrom, float cto, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_slascl_work(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, float cfrom, float cto, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_slaset(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, float alpha, float beta, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_slaset_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, float alpha, float beta, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_slasrt(char id, armpl_int_t n, float *d);
armpl_int_t LAPACKE_slasrt_work(char id, armpl_int_t n, float *d);
armpl_int_t LAPACKE_slassq(armpl_int_t n, float *x, armpl_int_t incx, float *scale, float *sumsq);
armpl_int_t LAPACKE_slassq_work(armpl_int_t n, float *x, armpl_int_t incx, float *scale, float *sumsq);
armpl_int_t LAPACKE_slaswp(armpl_int_t matrix_layout, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_slaswp_work(armpl_int_t matrix_layout, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_slauum(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_slauum_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_sopgtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, const float *tau, float *q, armpl_int_t ldq);
armpl_int_t LAPACKE_sopgtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, const float *tau, float *q, armpl_int_t ldq, float *work);
armpl_int_t LAPACKE_sopmtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const float *ap, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sopmtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const float *ap, const float *tau, float *c, armpl_int_t ldc, float *work);
armpl_int_t LAPACKE_sorbdb(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *x11, armpl_int_t ldx11, float *x12, armpl_int_t ldx12, float *x21, armpl_int_t ldx21, float *x22, armpl_int_t ldx22, float *theta, float *phi, float *taup1, float *taup2, float *tauq1, float *tauq2);
armpl_int_t LAPACKE_sorbdb_work(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *x11, armpl_int_t ldx11, float *x12, armpl_int_t ldx12, float *x21, armpl_int_t ldx21, float *x22, armpl_int_t ldx22, float *theta, float *phi, float *taup1, float *taup2, float *tauq1, float *tauq2, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sorcsd2by1(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *x11, armpl_int_t ldx11, float *x21, armpl_int_t ldx21, float *theta, float *u1, armpl_int_t ldu1, float *u2, armpl_int_t ldu2, float *v1t, armpl_int_t ldv1t);
armpl_int_t LAPACKE_sorcsd2by1_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *x11, armpl_int_t ldx11, float *x21, armpl_int_t ldx21, float *theta, float *u1, armpl_int_t ldu1, float *u2, armpl_int_t ldu2, float *v1t, armpl_int_t ldv1t, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sorcsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *x11, armpl_int_t ldx11, float *x12, armpl_int_t ldx12, float *x21, armpl_int_t ldx21, float *x22, armpl_int_t ldx22, float *theta, float *u1, armpl_int_t ldu1, float *u2, armpl_int_t ldu2, float *v1t, armpl_int_t ldv1t, float *v2t, armpl_int_t ldv2t);
armpl_int_t LAPACKE_sorcsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, float *x11, armpl_int_t ldx11, float *x12, armpl_int_t ldx12, float *x21, armpl_int_t ldx21, float *x22, armpl_int_t ldx22, float *theta, float *u1, armpl_int_t ldu1, float *u2, armpl_int_t ldu2, float *v1t, armpl_int_t ldv1t, float *v2t, armpl_int_t ldv2t, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_sorgbr(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau);
armpl_int_t LAPACKE_sorgbr_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sorghr(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, const float *tau);
armpl_int_t LAPACKE_sorghr_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, float *a, armpl_int_t lda, const float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sorglq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau);
armpl_int_t LAPACKE_sorglq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sorgql(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau);
armpl_int_t LAPACKE_sorgql_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sorgqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau);
armpl_int_t LAPACKE_sorgqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sorgrq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau);
armpl_int_t LAPACKE_sorgrq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, float *a, armpl_int_t lda, const float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sorgtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const float *tau);
armpl_int_t LAPACKE_sorgtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormbr(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormbr_work(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormhr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormhr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormql(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormql_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormrq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormrq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormrz(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormrz_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_sormtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc);
armpl_int_t LAPACKE_sormtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, const float *tau, float *c, armpl_int_t ldc, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_spbcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const float *ab, armpl_int_t ldab, float anorm, float *rcond);
armpl_int_t LAPACKE_spbcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const float *ab, armpl_int_t ldab, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_spbequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const float *ab, armpl_int_t ldab, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_spbequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const float *ab, armpl_int_t ldab, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_spbrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *afb, armpl_int_t ldafb, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_spbrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *afb, armpl_int_t ldafb, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_spbstf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, float *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_spbstf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, float *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_spbsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spbsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spbsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *afb, armpl_int_t ldafb, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_spbsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, float *ab, armpl_int_t ldab, float *afb, armpl_int_t ldafb, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_spbtrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_spbtrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_spbtrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spbtrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spftrf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, float *a);
armpl_int_t LAPACKE_spftrf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, float *a);
armpl_int_t LAPACKE_spftri(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, float *a);
armpl_int_t LAPACKE_spftri_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, float *a);
armpl_int_t LAPACKE_spftrs(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spftrs_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spocon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float anorm, float *rcond);
armpl_int_t LAPACKE_spocon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_spoequb(armpl_int_t matrix_layout, armpl_int_t n, const float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_spoequb_work(armpl_int_t matrix_layout, armpl_int_t n, const float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_spoequ(armpl_int_t matrix_layout, armpl_int_t n, const float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_spoequ_work(armpl_int_t matrix_layout, armpl_int_t n, const float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_sporfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_sporfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sporfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const float *s, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_sporfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const float *s, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sposv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sposv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sposvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_sposvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sposvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_sposvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_spotrf2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_spotrf2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_spotrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_spotrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_spotri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_spotri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_spotrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spotrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sppcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, float anorm, float *rcond);
armpl_int_t LAPACKE_sppcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sppequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_sppequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_spprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, const float *afp, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_spprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, const float *afp, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sppsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *ap, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sppsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *ap, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sppsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *ap, float *afp, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_sppsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *ap, float *afp, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_spptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap);
armpl_int_t LAPACKE_spptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap);
armpl_int_t LAPACKE_spptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap);
armpl_int_t LAPACKE_spptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap);
armpl_int_t LAPACKE_spptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spstrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, float tol);
armpl_int_t LAPACKE_spstrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, float tol, float *work);
armpl_int_t LAPACKE_sptcon(armpl_int_t n, const float *d, const float *e, float anorm, float *rcond);
armpl_int_t LAPACKE_sptcon_work(armpl_int_t n, const float *d, const float *e, float anorm, float *rcond, float *work);
armpl_int_t LAPACKE_spteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_spteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_sptrfs(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const float *d, const float *e, const float *df, const float *ef, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_sptrfs_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const float *d, const float *e, const float *df, const float *ef, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work);
armpl_int_t LAPACKE_sptsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *d, float *e, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sptsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, float *d, float *e, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sptsvx(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const float *d, const float *e, float *df, float *ef, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_sptsvx_work(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const float *d, const float *e, float *df, float *ef, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work);
armpl_int_t LAPACKE_spttrf(armpl_int_t n, float *d, float *e);
armpl_int_t LAPACKE_spttrf_work(armpl_int_t n, float *d, float *e);
armpl_int_t LAPACKE_spttrs(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const float *d, const float *e, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_spttrs_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, const float *d, const float *e, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssbev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_ssbev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssbevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_ssbevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssbevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_ssbevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssbev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_ssbev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *w, float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_ssbevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssbevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssbevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssbevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssbgst(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, const float *bb, armpl_int_t ldbb, float *x, armpl_int_t ldx);
armpl_int_t LAPACKE_ssbgst_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, const float *bb, armpl_int_t ldbb, float *x, armpl_int_t ldx, float *work);
armpl_int_t LAPACKE_ssbgvd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, float *bb, armpl_int_t ldbb, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_ssbgvd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, float *bb, armpl_int_t ldbb, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssbgv(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, float *bb, armpl_int_t ldbb, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_ssbgv_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, float *bb, armpl_int_t ldbb, float *w, float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_ssbgvx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, float *bb, armpl_int_t ldbb, float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssbgvx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, float *ab, armpl_int_t ldab, float *bb, armpl_int_t ldbb, float *q, armpl_int_t ldq, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssbtrd(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *d, float *e, float *q, armpl_int_t ldq);
armpl_int_t LAPACKE_ssbtrd_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, float *ab, armpl_int_t ldab, float *d, float *e, float *q, armpl_int_t ldq, float *work);
armpl_int_t LAPACKE_ssfrk(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, float alpha, const float *a, armpl_int_t lda, float beta, float *c);
armpl_int_t LAPACKE_ssfrk_work(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, float alpha, const float *a, armpl_int_t lda, float beta, float *c);
armpl_int_t LAPACKE_sspcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_sspcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, const armpl_int_t *ipiv, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sspevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *ap, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sspevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *ap, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_sspev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *ap, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sspev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *ap, float *w, float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_sspevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *ap, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_sspevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *ap, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_sspgst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, float *ap, const float *bp);
armpl_int_t LAPACKE_sspgst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, float *ap, const float *bp);
armpl_int_t LAPACKE_sspgvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *ap, float *bp, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sspgvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *ap, float *bp, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_sspgv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *ap, float *bp, float *w, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sspgv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *ap, float *bp, float *w, float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_sspgvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, float *ap, float *bp, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_sspgvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, float *ap, float *bp, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, const float *afp, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_ssprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, const float *afp, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sspsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *ap, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sspsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *ap, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sspsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, float *afp, armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_sspsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, float *afp, armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_ssptrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap, float *d, float *e, float *tau);
armpl_int_t LAPACKE_ssptrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap, float *d, float *e, float *tau);
armpl_int_t LAPACKE_ssptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *ap, const armpl_int_t *ipiv, float *work);
armpl_int_t LAPACKE_ssptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *ap, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_sstebz(char range, char order, armpl_int_t n, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, const float *d, const float *e, armpl_int_t *m, armpl_int_t *nsplit, float *w, armpl_int_t *iblock, armpl_int_t *isplit);
armpl_int_t LAPACKE_sstebz_work(char range, char order, armpl_int_t n, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, const float *d, const float *e, armpl_int_t *m, armpl_int_t *nsplit, float *w, armpl_int_t *iblock, armpl_int_t *isplit, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_sstedc(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sstedc_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_sstegr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_sstegr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_sstein(armpl_int_t matrix_layout, armpl_int_t n, const float *d, const float *e, armpl_int_t m, const float *w, const armpl_int_t *iblock, const armpl_int_t *isplit, float *z, armpl_int_t ldz, armpl_int_t *ifailv);
armpl_int_t LAPACKE_sstein_work(armpl_int_t matrix_layout, armpl_int_t n, const float *d, const float *e, armpl_int_t m, const float *w, const armpl_int_t *iblock, const armpl_int_t *isplit, float *z, armpl_int_t ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifailv);
armpl_int_t LAPACKE_sstemr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac);
armpl_int_t LAPACKE_sstemr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_ssteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_ssterf(armpl_int_t n, float *d, float *e);
armpl_int_t LAPACKE_ssterf_work(armpl_int_t n, float *d, float *e);
armpl_int_t LAPACKE_sstevd(armpl_int_t matrix_layout, char jobz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sstevd_work(armpl_int_t matrix_layout, char jobz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_sstev(armpl_int_t matrix_layout, char jobz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz);
armpl_int_t LAPACKE_sstevr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_sstevr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_sstev_work(armpl_int_t matrix_layout, char jobz, armpl_int_t n, float *d, float *e, float *z, armpl_int_t ldz, float *work);
armpl_int_t LAPACKE_sstevx(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_sstevx_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, float *d, float *e, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssycon_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, const float *e, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_ssycon_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, const float *e, const armpl_int_t *ipiv, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_ssycon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float anorm, float *rcond);
armpl_int_t LAPACKE_ssyconv(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *e);
armpl_int_t LAPACKE_ssyconv_work(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *e);
armpl_int_t LAPACKE_ssycon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float anorm, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_ssyequb(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float *s, float *scond, float *amax);
armpl_int_t LAPACKE_ssyequb_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float *s, float *scond, float *amax, float *work);
armpl_int_t LAPACKE_ssyev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_ssyev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssyevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_ssyevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssyevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_ssyevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssyevr_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_ssyevr_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssyev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w);
armpl_int_t LAPACKE_ssyevr(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_ssyevr_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *isuppz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssyev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *w, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssyevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssyevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssyevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssyevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssygst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssygst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssygv_2stage(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *w);
armpl_int_t LAPACKE_ssygv_2stage_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *w, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssygvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *w);
armpl_int_t LAPACKE_ssygvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *w, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ssygv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *w);
armpl_int_t LAPACKE_ssygv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *w, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssygvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssygvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float vl, float vu, armpl_int_t il, armpl_int_t iu, float abstol, armpl_int_t *m, float *w, float *z, armpl_int_t ldz, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_ssyrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_ssyrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_ssyrfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *s, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_ssyrfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const float *s, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_ssysv_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssysv_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssysv_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *e, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssysv_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *e, armpl_int_t *ipiv, float *b, armpl_int_t ldb, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssysv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssysv_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssysv_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssysv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *b, armpl_int_t ldb, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssysvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr);
armpl_int_t LAPACKE_ssysvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, const float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *ferr, float *berr, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_ssysvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params);
armpl_int_t LAPACKE_ssysvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, float *a, armpl_int_t lda, float *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, float *s, float *b, armpl_int_t ldb, float *x, armpl_int_t ldx, float *rcond, float *rpvgrw, float *berr, armpl_int_t n_err_bnds, float *err_bnds_norm, float *err_bnds_comp, armpl_int_t nparams, float *params, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_ssyswapr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_ssyswapr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_ssytrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *d, float *e, float *tau);
armpl_int_t LAPACKE_ssytrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *d, float *e, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytrf_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssytrf_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytrf_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *e, armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssytrf_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, float *e, armpl_int_t *ipiv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssytrf_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssytrf_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, armpl_int_t *ipiv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytri2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssytri2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytri2x(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_int_t nb);
armpl_int_t LAPACKE_ssytri2x_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *work, armpl_int_t nb);
armpl_int_t LAPACKE_ssytri_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const float *e, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssytri_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const float *e, const armpl_int_t *ipiv, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_ssytri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *work);
armpl_int_t LAPACKE_ssytrs2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb, float *work);
armpl_int_t LAPACKE_ssytrs_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *e, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *e, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ssytrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ssytrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const armpl_int_t *ipiv, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stbcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const float *ab, armpl_int_t ldab, float *rcond);
armpl_int_t LAPACKE_stbcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const float *ab, armpl_int_t ldab, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_stbrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *b, armpl_int_t ldb, const float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_stbrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, const float *b, armpl_int_t ldb, const float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_stbtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stbtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const float *ab, armpl_int_t ldab, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stfsm(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, float alpha, const float *a, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stfsm_work(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, float alpha, const float *a, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stftri(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, float *a);
armpl_int_t LAPACKE_stftri_work(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, float *a);
armpl_int_t LAPACKE_stfttp(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *arf, float *ap);
armpl_int_t LAPACKE_stfttp_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *arf, float *ap);
armpl_int_t LAPACKE_stfttr(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *arf, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_stfttr_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *arf, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_stgevc(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const float *s, armpl_int_t lds, const float *p, armpl_int_t ldp, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_stgevc_work(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const float *s, armpl_int_t lds, const float *p, armpl_int_t ldp, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, float *work);
armpl_int_t LAPACKE_stgexc(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz, armpl_int_t *ifst, armpl_int_t *ilst);
armpl_int_t LAPACKE_stgexc_work(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz, armpl_int_t *ifst, armpl_int_t *ilst, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_stgsen(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz, armpl_int_t *m, float *pl, float *pr, float *dif);
armpl_int_t LAPACKE_stgsen_work(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *alphar, float *alphai, float *beta, float *q, armpl_int_t ldq, float *z, armpl_int_t ldz, armpl_int_t *m, float *pl, float *pr, float *dif, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_stgsja(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float tola, float tolb, float *alpha, float *beta, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq, armpl_int_t *ncycle);
armpl_int_t LAPACKE_stgsja_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float tola, float tolb, float *alpha, float *beta, float *u, armpl_int_t ldu, float *v, armpl_int_t ldv, float *q, armpl_int_t ldq, float *work, armpl_int_t *ncycle);
armpl_int_t LAPACKE_stgsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, const float *vl, armpl_int_t ldvl, const float *vr, armpl_int_t ldvr, float *s, float *dif, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_stgsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, const float *vl, armpl_int_t ldvl, const float *vr, armpl_int_t ldvr, float *s, float *dif, armpl_int_t mm, armpl_int_t *m, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_stgsyl(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, float *c, armpl_int_t ldc, const float *d, armpl_int_t ldd, const float *e, armpl_int_t lde, float *f, armpl_int_t ldf, float *scale, float *dif);
armpl_int_t LAPACKE_stgsyl_work(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, float *c, armpl_int_t ldc, const float *d, armpl_int_t ldd, const float *e, armpl_int_t lde, float *f, armpl_int_t ldf, float *scale, float *dif, float *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_stpcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const float *ap, float *rcond);
armpl_int_t LAPACKE_stpcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const float *ap, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_stpmqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stpmqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *work);
armpl_int_t LAPACKE_stpqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_stpqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_stpqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *t, armpl_int_t ldt);
armpl_int_t LAPACKE_stpqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *t, armpl_int_t ldt, float *work);
armpl_int_t LAPACKE_stprfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stprfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const float *v, armpl_int_t ldv, const float *t, armpl_int_t ldt, float *a, armpl_int_t lda, float *b, armpl_int_t ldb, float *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_stprfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *ap, const float *b, armpl_int_t ldb, const float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_stprfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *ap, const float *b, armpl_int_t ldb, const float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_stptri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, float *ap);
armpl_int_t LAPACKE_stptri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, float *ap);
armpl_int_t LAPACKE_stptrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *ap, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stptrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *ap, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_stpttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *ap, float *arf);
armpl_int_t LAPACKE_stpttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *ap, float *arf);
armpl_int_t LAPACKE_stpttr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_stpttr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *ap, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_strcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const float *a, armpl_int_t lda, float *rcond);
armpl_int_t LAPACKE_strcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const float *a, armpl_int_t lda, float *rcond, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_strevc(armpl_int_t matrix_layout, char side, char howmny, armpl_int_t *select, armpl_int_t n, const float *t, armpl_int_t ldt, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_strevc_work(armpl_int_t matrix_layout, char side, char howmny, armpl_int_t *select, armpl_int_t n, const float *t, armpl_int_t ldt, float *vl, armpl_int_t ldvl, float *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, float *work);
armpl_int_t LAPACKE_strexc(armpl_int_t matrix_layout, char compq, armpl_int_t n, float *t, armpl_int_t ldt, float *q, armpl_int_t ldq, armpl_int_t *ifst, armpl_int_t *ilst);
armpl_int_t LAPACKE_strexc_work(armpl_int_t matrix_layout, char compq, armpl_int_t n, float *t, armpl_int_t ldt, float *q, armpl_int_t ldq, armpl_int_t *ifst, armpl_int_t *ilst, float *work);
armpl_int_t LAPACKE_strrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, const float *x, armpl_int_t ldx, float *ferr, float *berr);
armpl_int_t LAPACKE_strrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, const float *x, armpl_int_t ldx, float *ferr, float *berr, float *work, armpl_int_t *iwork);
armpl_int_t LAPACKE_strsen(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, float *t, armpl_int_t ldt, float *q, armpl_int_t ldq, float *wr, float *wi, armpl_int_t *m, float *s, float *sep);
armpl_int_t LAPACKE_strsen_work(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, float *t, armpl_int_t ldt, float *q, armpl_int_t ldq, float *wr, float *wi, armpl_int_t *m, float *s, float *sep, float *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_strsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const float *t, armpl_int_t ldt, const float *vl, armpl_int_t ldvl, const float *vr, armpl_int_t ldvr, float *s, float *sep, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_strsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const float *t, armpl_int_t ldt, const float *vl, armpl_int_t ldvl, const float *vr, armpl_int_t ldvr, float *s, float *sep, armpl_int_t mm, armpl_int_t *m, float *work, armpl_int_t ldwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_strsyl(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, float *c, armpl_int_t ldc, float *scale);
armpl_int_t LAPACKE_strsyl_work(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const float *a, armpl_int_t lda, const float *b, armpl_int_t ldb, float *c, armpl_int_t ldc, float *scale);
armpl_int_t LAPACKE_strtri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_strtri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, float *a, armpl_int_t lda);
armpl_int_t LAPACKE_strtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_strtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const float *a, armpl_int_t lda, float *b, armpl_int_t ldb);
armpl_int_t LAPACKE_strttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float *arf);
armpl_int_t LAPACKE_strttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float *arf);
armpl_int_t LAPACKE_strttp(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float *ap);
armpl_int_t LAPACKE_strttp_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const float *a, armpl_int_t lda, float *ap);
armpl_int_t LAPACKE_stzrzf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau);
armpl_int_t LAPACKE_stzrzf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, float *a, armpl_int_t lda, float *tau, float *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zbbcsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *theta, double *phi, armpl_doublecomplex_t *u1, armpl_int_t ldu1, armpl_doublecomplex_t *u2, armpl_int_t ldu2, armpl_doublecomplex_t *v1t, armpl_int_t ldv1t, armpl_doublecomplex_t *v2t, armpl_int_t ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e);
armpl_int_t LAPACKE_zbbcsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, armpl_int_t m, armpl_int_t p, armpl_int_t q, double *theta, double *phi, armpl_doublecomplex_t *u1, armpl_int_t ldu1, armpl_doublecomplex_t *u2, armpl_int_t ldu2, armpl_doublecomplex_t *v1t, armpl_int_t ldv1t, armpl_doublecomplex_t *v2t, armpl_int_t ldv2t, double *b11d, double *b11e, double *b12d, double *b12e, double *b21d, double *b21e, double *b22d, double *b22e, double *rwork, armpl_int_t lrwork);
armpl_int_t LAPACKE_zbdsqr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, double *d, double *e, armpl_doublecomplex_t *vt, armpl_int_t ldvt, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zbdsqr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t ncvt, armpl_int_t nru, armpl_int_t ncc, double *d, double *e, armpl_doublecomplex_t *vt, armpl_int_t ldvt, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *c, armpl_int_t ldc, double *work);
armpl_int_t LAPACKE_zcgesv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, armpl_int_t *iter);
armpl_int_t LAPACKE_zcgesv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, armpl_doublecomplex_t *work, armpl_singlecomplex_t *swork, double *rwork, armpl_int_t *iter);
armpl_int_t LAPACKE_zcposv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, armpl_int_t *iter);
armpl_int_t LAPACKE_zcposv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, armpl_doublecomplex_t *work, armpl_singlecomplex_t *swork, double *rwork, armpl_int_t *iter);
armpl_int_t LAPACKE_zgbbrd(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, armpl_doublecomplex_t *ab, armpl_int_t ldab, double *d, double *e, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *pt, armpl_int_t ldpt, armpl_doublecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zgbbrd_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t ncc, armpl_int_t kl, armpl_int_t ku, armpl_doublecomplex_t *ab, armpl_int_t ldab, double *d, double *e, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *pt, armpl_int_t ldpt, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zgbcon(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const armpl_doublecomplex_t *ab, armpl_int_t ldab, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zgbcon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const armpl_doublecomplex_t *ab, armpl_int_t ldab, const armpl_int_t *ipiv, double anorm, double *rcond, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zgbequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const armpl_doublecomplex_t *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgbequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const armpl_doublecomplex_t *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgbequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const armpl_doublecomplex_t *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgbequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, const armpl_doublecomplex_t *ab, armpl_int_t ldab, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgbrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const armpl_doublecomplex_t *ab, armpl_int_t ldab, const armpl_doublecomplex_t *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zgbrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const armpl_doublecomplex_t *ab, armpl_int_t ldab, const armpl_doublecomplex_t *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zgbrfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const armpl_doublecomplex_t *ab, armpl_int_t ldab, const armpl_doublecomplex_t *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const double *r, const double *c, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zgbrfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const armpl_doublecomplex_t *ab, armpl_int_t ldab, const armpl_doublecomplex_t *afb, armpl_int_t ldafb, const armpl_int_t *ipiv, const double *r, const double *c, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zgbsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgbsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgbsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *rpivot);
armpl_int_t LAPACKE_zgbsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zgbsvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zgbsvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *afb, armpl_int_t ldafb, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zgbtrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgbtrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgbtrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const armpl_doublecomplex_t *ab, armpl_int_t ldab, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgbtrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t kl, armpl_int_t ku, armpl_int_t nrhs, const armpl_doublecomplex_t *ab, armpl_int_t ldab, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgebak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *scale, armpl_int_t m, armpl_doublecomplex_t *v, armpl_int_t ldv);
armpl_int_t LAPACKE_zgebak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *scale, armpl_int_t m, armpl_doublecomplex_t *v, armpl_int_t ldv);
armpl_int_t LAPACKE_zgebal(armpl_int_t matrix_layout, char job, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, double *scale);
armpl_int_t LAPACKE_zgebal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ilo, armpl_int_t *ihi, double *scale);
armpl_int_t LAPACKE_zgebrd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *d, double *e, armpl_doublecomplex_t *tauq, armpl_doublecomplex_t *taup);
armpl_int_t LAPACKE_zgebrd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *d, double *e, armpl_doublecomplex_t *tauq, armpl_doublecomplex_t *taup, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgecon(armpl_int_t matrix_layout, char norm, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double anorm, double *rcond);
armpl_int_t LAPACKE_zgecon_work(armpl_int_t matrix_layout, char norm, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double anorm, double *rcond, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zgeequb(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgeequb_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgeequ(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgeequ_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *r, double *c, double *rowcnd, double *colcnd, double *amax);
armpl_int_t LAPACKE_zgees(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_Z_SELECT1 select, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *sdim, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vs, armpl_int_t ldvs);
armpl_int_t LAPACKE_zgees_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_Z_SELECT1 select, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *sdim, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vs, armpl_int_t ldvs, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_zgeesx(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_Z_SELECT1 select, char sense, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *sdim, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vs, armpl_int_t ldvs, double *rconde, double *rcondv);
armpl_int_t LAPACKE_zgeesx_work(armpl_int_t matrix_layout, char jobvs, char sort, LAPACK_Z_SELECT1 select, char sense, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *sdim, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vs, armpl_int_t ldvs, double *rconde, double *rcondv, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_zgeev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_zgeev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zgeevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, double *abnrm, double *rconde, double *rcondv);
armpl_int_t LAPACKE_zgeevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *scale, double *abnrm, double *rconde, double *rcondv, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zgehrd(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zgehrd_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgejsv(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *sva, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *v, armpl_int_t ldv, double *stat, armpl_int_t *istat);
armpl_int_t LAPACKE_zgejsv_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, char jobr, char jobt, char jobp, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *sva, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *v, armpl_int_t ldv, armpl_doublecomplex_t *cwork, armpl_int_t lwork, double *work, armpl_int_t lrwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_zgelq2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zgelq2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zgelqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zgelqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgelq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *t, armpl_int_t tsize);
armpl_int_t LAPACKE_zgelq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *t, armpl_int_t tsize, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgelsd(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_zgelsd_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_zgels(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgelss(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_zgelss_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double *s, double rcond, armpl_int_t *rank, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zgels_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgelsy(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_int_t *jpvt, double rcond, armpl_int_t *rank);
armpl_int_t LAPACKE_zgelsy_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_int_t *jpvt, double rcond, armpl_int_t *rank, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zgemlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *t, armpl_int_t tsize, armpl_doublecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zgemlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *t, armpl_int_t tsize, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgemqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *t, armpl_int_t tsize, armpl_doublecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zgemqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const armpl_doublecomplex_t *v, armpl_int_t ldv, const armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zgemqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t nb, const armpl_doublecomplex_t *v, armpl_int_t ldv, const armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zgemqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *t, armpl_int_t tsize, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgeqlf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zgeqlf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgeqp3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *jpvt, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zgeqp3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *jpvt, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zgeqpf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *jpvt, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zgeqpf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *jpvt, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zgeqr2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zgeqr2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zgeqrfp(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zgeqrfp_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgeqrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zgeqrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgeqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *t, armpl_int_t tsize);
armpl_int_t LAPACKE_zgeqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zgeqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zgeqrt3(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zgeqrt3_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zgeqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zgeqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t nb, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zgeqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *t, armpl_int_t tsize, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgerfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zgerfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zgerfsx(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *r, const double *c, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zgerfsx_work(armpl_int_t matrix_layout, char trans, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *r, const double *c, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zgerqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zgerqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgesdd(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *s, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *vt, armpl_int_t ldvt);
armpl_int_t LAPACKE_zgesdd_work(armpl_int_t matrix_layout, char jobz, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *s, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *vt, armpl_int_t ldvt, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_zgesvd(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *s, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *vt, armpl_int_t ldvt, double *superb);
armpl_int_t LAPACKE_zgesvd_work(armpl_int_t matrix_layout, char jobu, char jobvt, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *s, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *vt, armpl_int_t ldvt, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zgesvdx(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, double *s, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *vt, armpl_int_t ldvt, armpl_int_t *superb);
armpl_int_t LAPACKE_zgesvdx_work(armpl_int_t matrix_layout, char jobu, char jobvt, char range, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *ns, double *s, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *vt, armpl_int_t ldvt, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_zgesvj(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *sva, armpl_int_t mv, armpl_doublecomplex_t *v, armpl_int_t ldv, double *stat);
armpl_int_t LAPACKE_zgesvj_work(armpl_int_t matrix_layout, char joba, char jobu, char jobv, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *sva, armpl_int_t mv, armpl_doublecomplex_t *v, armpl_int_t ldv, armpl_doublecomplex_t *cwork, armpl_int_t lwork, double *rwork, armpl_int_t lrwork);
armpl_int_t LAPACKE_zgesv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgesv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgesvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, double *rpivot);
armpl_int_t LAPACKE_zgesvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zgesvxx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zgesvxx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *r, double *c, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zgetf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgetf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgetrf2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgetrf2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgetrf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgetrf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgetri(armpl_int_t matrix_layout, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgetri_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgetrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgetrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgetsls(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgetsls_work(armpl_int_t matrix_layout, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zggbak(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *lscale, const double *rscale, armpl_int_t m, armpl_doublecomplex_t *v, armpl_int_t ldv);
armpl_int_t LAPACKE_zggbak_work(armpl_int_t matrix_layout, char job, char side, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const double *lscale, const double *rscale, armpl_int_t m, armpl_doublecomplex_t *v, armpl_int_t ldv);
armpl_int_t LAPACKE_zggbal(armpl_int_t matrix_layout, char job, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale);
armpl_int_t LAPACKE_zggbal_work(armpl_int_t matrix_layout, char job, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *work);
armpl_int_t LAPACKE_zgges3(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_int_t *sdim, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vsl, armpl_int_t ldvsl, armpl_doublecomplex_t *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_zgges3_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_int_t *sdim, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vsl, armpl_int_t ldvsl, armpl_doublecomplex_t *vsr, armpl_int_t ldvsr, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_zgges(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_int_t *sdim, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vsl, armpl_int_t ldvsl, armpl_doublecomplex_t *vsr, armpl_int_t ldvsr);
armpl_int_t LAPACKE_zgges_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_int_t *sdim, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vsl, armpl_int_t ldvsl, armpl_doublecomplex_t *vsr, armpl_int_t ldvsr, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_zggesx(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, char sense, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_int_t *sdim, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vsl, armpl_int_t ldvsl, armpl_doublecomplex_t *vsr, armpl_int_t ldvsr, double *rconde, double *rcondv);
armpl_int_t LAPACKE_zggesx_work(armpl_int_t matrix_layout, char jobvsl, char jobvsr, char sort, LAPACK_Z_SELECT2 selctg, char sense, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_int_t *sdim, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vsl, armpl_int_t ldvsl, armpl_doublecomplex_t *vsr, armpl_int_t ldvsr, double *rconde, double *rcondv, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork, armpl_int_t liwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_zggev3(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_zggev3_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zggev(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr);
armpl_int_t LAPACKE_zggev_work(armpl_int_t matrix_layout, char jobvl, char jobvr, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zggevx(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv);
armpl_int_t LAPACKE_zggevx_work(armpl_int_t matrix_layout, char balanc, char jobvl, char jobvr, char sense, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr, armpl_int_t *ilo, armpl_int_t *ihi, double *lscale, double *rscale, double *abnrm, double *bbnrm, double *rconde, double *rcondv, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *bwork);
armpl_int_t LAPACKE_zggglm(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *d, armpl_doublecomplex_t *x, armpl_doublecomplex_t *y);
armpl_int_t LAPACKE_zggglm_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *d, armpl_doublecomplex_t *x, armpl_doublecomplex_t *y, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgghd3(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zgghd3_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zgghrd(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zgghrd_work(armpl_int_t matrix_layout, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zgglse(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *c, armpl_doublecomplex_t *d, armpl_doublecomplex_t *x);
armpl_int_t LAPACKE_zgglse_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *c, armpl_doublecomplex_t *d, armpl_doublecomplex_t *x, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zggqrf(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *taua, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *taub);
armpl_int_t LAPACKE_zggqrf_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t m, armpl_int_t p, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *taua, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *taub, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zggrqf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *taua, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *taub);
armpl_int_t LAPACKE_zggrqf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *taua, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *taub, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zggsvd3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double *alpha, double *beta, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *v, armpl_int_t ldv, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_int_t *iwork);
armpl_int_t LAPACKE_zggsvd3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double *alpha, double *beta, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *v, armpl_int_t ldv, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_zggsvd(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double *alpha, double *beta, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *v, armpl_int_t ldv, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_int_t *iwork);
armpl_int_t LAPACKE_zggsvd_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t n, armpl_int_t p, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double *alpha, double *beta, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *v, armpl_int_t ldv, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_zggsvp3(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double tola, double tolb, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *v, armpl_int_t ldv, armpl_doublecomplex_t *q, armpl_int_t ldq);
armpl_int_t LAPACKE_zggsvp3_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double tola, double tolb, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *v, armpl_int_t ldv, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_int_t *iwork, double *rwork, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zggsvp(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double tola, double tolb, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *v, armpl_int_t ldv, armpl_doublecomplex_t *q, armpl_int_t ldq);
armpl_int_t LAPACKE_zggsvp_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double tola, double tolb, armpl_int_t *k, armpl_int_t *l, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *v, armpl_int_t ldv, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_int_t *iwork, double *rwork, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zgtcon(char norm, armpl_int_t n, const armpl_doublecomplex_t *dl, const armpl_doublecomplex_t *d, const armpl_doublecomplex_t *du, const armpl_doublecomplex_t *du2, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zgtcon_work(char norm, armpl_int_t n, const armpl_doublecomplex_t *dl, const armpl_doublecomplex_t *d, const armpl_doublecomplex_t *du, const armpl_doublecomplex_t *du2, const armpl_int_t *ipiv, double anorm, double *rcond, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zgtrfs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *dl, const armpl_doublecomplex_t *d, const armpl_doublecomplex_t *du, const armpl_doublecomplex_t *dlf, const armpl_doublecomplex_t *df, const armpl_doublecomplex_t *duf, const armpl_doublecomplex_t *du2, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zgtrfs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *dl, const armpl_doublecomplex_t *d, const armpl_doublecomplex_t *du, const armpl_doublecomplex_t *dlf, const armpl_doublecomplex_t *df, const armpl_doublecomplex_t *duf, const armpl_doublecomplex_t *du2, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zgtsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *dl, armpl_doublecomplex_t *d, armpl_doublecomplex_t *du, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgtsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *dl, armpl_doublecomplex_t *d, armpl_doublecomplex_t *du, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgtsvx(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *dl, const armpl_doublecomplex_t *d, const armpl_doublecomplex_t *du, armpl_doublecomplex_t *dlf, armpl_doublecomplex_t *df, armpl_doublecomplex_t *duf, armpl_doublecomplex_t *du2, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zgtsvx_work(armpl_int_t matrix_layout, char fact, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *dl, const armpl_doublecomplex_t *d, const armpl_doublecomplex_t *du, armpl_doublecomplex_t *dlf, armpl_doublecomplex_t *df, armpl_doublecomplex_t *duf, armpl_doublecomplex_t *du2, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zgttrf(armpl_int_t n, armpl_doublecomplex_t *dl, armpl_doublecomplex_t *d, armpl_doublecomplex_t *du, armpl_doublecomplex_t *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgttrf_work(armpl_int_t n, armpl_doublecomplex_t *dl, armpl_doublecomplex_t *d, armpl_doublecomplex_t *du, armpl_doublecomplex_t *du2, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zgttrs(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *dl, const armpl_doublecomplex_t *d, const armpl_doublecomplex_t *du, const armpl_doublecomplex_t *du2, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zgttrs_work(armpl_int_t matrix_layout, char trans, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *dl, const armpl_doublecomplex_t *d, const armpl_doublecomplex_t *du, const armpl_doublecomplex_t *du2, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhbev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhbev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zhbevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhbevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zhbevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhbevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zhbev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhbev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zhbevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhbevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhbevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhbevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhbgst(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_doublecomplex_t *ab, armpl_int_t ldab, const armpl_doublecomplex_t *bb, armpl_int_t ldbb, armpl_doublecomplex_t *x, armpl_int_t ldx);
armpl_int_t LAPACKE_zhbgst_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_doublecomplex_t *ab, armpl_int_t ldab, const armpl_doublecomplex_t *bb, armpl_int_t ldbb, armpl_doublecomplex_t *x, armpl_int_t ldx, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zhbgvd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *bb, armpl_int_t ldbb, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhbgvd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *bb, armpl_int_t ldbb, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zhbgv(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *bb, armpl_int_t ldbb, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhbgv_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *bb, armpl_int_t ldbb, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zhbgvx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *bb, armpl_int_t ldbb, armpl_doublecomplex_t *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhbgvx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_int_t ka, armpl_int_t kb, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *bb, armpl_int_t ldbb, armpl_doublecomplex_t *q, armpl_int_t ldq, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhbtrd(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab, double *d, double *e, armpl_doublecomplex_t *q, armpl_int_t ldq);
armpl_int_t LAPACKE_zhbtrd_work(armpl_int_t matrix_layout, char vect, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab, double *d, double *e, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zhecon_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zhecon_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, double anorm, double *rcond, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zhecon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zhecon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, double anorm, double *rcond, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zheequb(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zheequb_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *s, double *scond, double *amax, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zheev_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_zheev_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *w, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zheevd_2stage(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_zheevd_2stage_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *w, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zheevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_zheevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *w, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zheevr_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_zheevr_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *isuppz, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zheev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *w);
armpl_int_t LAPACKE_zheevr(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_zheevr_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *isuppz, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zheev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *w, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zheevx_2stage(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zheevx_2stage_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zheevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zheevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhegst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhegst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhegv_2stage(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double *w);
armpl_int_t LAPACKE_zhegv_2stage_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double *w, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zhegvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double *w);
armpl_int_t LAPACKE_zhegvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double *w, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zhegv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double *w);
armpl_int_t LAPACKE_zhegv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double *w, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zhegvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhegvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zherfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zherfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zherfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *s, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zherfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *s, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zhesv_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhesv_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhesv_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhesv_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhesv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhesv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhesvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zhesvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zhesvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zhesvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zheswapr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_zheswapr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_zhetrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *d, double *e, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zhetrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, double *d, double *e, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetrf_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhetrf_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetrf_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhetrf_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhetrf_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhetrf_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetri2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhetri2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetri2x(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_int_t nb);
armpl_int_t LAPACKE_zhetri2x_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t nb);
armpl_int_t LAPACKE_zhetri_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhetri_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhetri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zhetrs2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zhetrs_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zhetrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhetrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhfrk(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, double alpha, const armpl_doublecomplex_t *a, armpl_int_t lda, double beta, armpl_doublecomplex_t *c);
armpl_int_t LAPACKE_zhfrk_work(armpl_int_t matrix_layout, char transr, char uplo, char trans, armpl_int_t n, armpl_int_t k, double alpha, const armpl_doublecomplex_t *a, armpl_int_t lda, double beta, armpl_doublecomplex_t *c);
armpl_int_t LAPACKE_zhgeqz(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_doublecomplex_t *h, armpl_int_t ldh, armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhgeqz_work(armpl_int_t matrix_layout, char job, char compq, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_doublecomplex_t *h, armpl_int_t ldh, armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zhpcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zhpcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, double anorm, double *rcond, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zhpevd(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhpevd_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zhpev(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhpev_work(armpl_int_t matrix_layout, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zhpevx(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhpevx_work(armpl_int_t matrix_layout, char jobz, char range, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhpgst(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *bp);
armpl_int_t LAPACKE_zhpgst_work(armpl_int_t matrix_layout, armpl_int_t itype, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *bp);
armpl_int_t LAPACKE_zhpgvd(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *bp, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhpgvd_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *bp, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zhpgv(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *bp, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhpgv_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *bp, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zhpgvx(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *bp, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhpgvx_work(armpl_int_t matrix_layout, armpl_int_t itype, char jobz, char range, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *bp, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *iwork, armpl_int_t *ifail);
armpl_int_t LAPACKE_zhprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *afp, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zhprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *afp, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zhpsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhpsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhpsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *afp, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zhpsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *afp, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zhptrd(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, double *d, double *e, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zhptrd_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, double *d, double *e, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zhptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zhptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zhptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zhsein(armpl_int_t matrix_layout, char job, char eigsrc, char initv, const armpl_int_t *select, armpl_int_t n, const armpl_doublecomplex_t *h, armpl_int_t ldh, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_zhsein_work(armpl_int_t matrix_layout, char job, char eigsrc, char initv, const armpl_int_t *select, armpl_int_t n, const armpl_doublecomplex_t *h, armpl_int_t ldh, armpl_doublecomplex_t *w, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, armpl_doublecomplex_t *work, double *rwork, armpl_int_t *ifaill, armpl_int_t *ifailr);
armpl_int_t LAPACKE_zhseqr(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_doublecomplex_t *h, armpl_int_t ldh, armpl_doublecomplex_t *w, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zhseqr_work(armpl_int_t matrix_layout, char job, char compz, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_doublecomplex_t *h, armpl_int_t ldh, armpl_doublecomplex_t *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zlacgv(armpl_int_t n, armpl_doublecomplex_t *x, armpl_int_t incx);
armpl_int_t LAPACKE_zlacgv_work(armpl_int_t n, armpl_doublecomplex_t *x, armpl_int_t incx);
armpl_int_t LAPACKE_zlacn2(armpl_int_t n, armpl_doublecomplex_t *v, armpl_doublecomplex_t *x, double *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_zlacn2_work(armpl_int_t n, armpl_doublecomplex_t *v, armpl_doublecomplex_t *x, double *est, armpl_int_t *kase, armpl_int_t *isave);
armpl_int_t LAPACKE_zlacp2(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zlacp2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const double *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zlacpy(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zlacpy_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zlag2c(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *sa, armpl_int_t ldsa);
armpl_int_t LAPACKE_zlag2c_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_singlecomplex_t *sa, armpl_int_t ldsa);
double LAPACKE_zlange(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda);
double LAPACKE_zlange_work(armpl_int_t matrix_layout, char norm, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *work);
double LAPACKE_zlanhe(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda);
double LAPACKE_zlanhe_work(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *work);
double LAPACKE_zlansy(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda);
double LAPACKE_zlansy_work(armpl_int_t matrix_layout, char norm, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *work);
double LAPACKE_zlantr(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda);
double LAPACKE_zlantr_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *work);
armpl_int_t LAPACKE_zlapmr(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_zlapmr_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_zlapmt(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_zlapmt_work(armpl_int_t matrix_layout, armpl_int_t forwrd, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *x, armpl_int_t ldx, armpl_int_t *k);
armpl_int_t LAPACKE_zlarfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *v, armpl_int_t ldv, const armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zlarfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *v, armpl_int_t ldv, const armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_zlarfg(armpl_int_t n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, armpl_int_t incx, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zlarfg_work(armpl_int_t n, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *x, armpl_int_t incx, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zlarft(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *v, armpl_int_t ldv, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zlarft_work(armpl_int_t matrix_layout, char direct, char storev, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *v, armpl_int_t ldv, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_zlarfx(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *v, armpl_doublecomplex_t tau, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zlarfx_work(armpl_int_t matrix_layout, char side, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *v, armpl_doublecomplex_t tau, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zlarnv(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, armpl_doublecomplex_t *x);
armpl_int_t LAPACKE_zlarnv_work(armpl_int_t idist, armpl_int_t *iseed, armpl_int_t n, armpl_doublecomplex_t *x);
armpl_int_t LAPACKE_zlascl(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, double cfrom, double cto, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_zlascl_work(armpl_int_t matrix_layout, char type, armpl_int_t kl, armpl_int_t ku, double cfrom, double cto, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_zlaset(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t alpha, armpl_doublecomplex_t beta, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_zlaset_work(armpl_int_t matrix_layout, char uplo, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t alpha, armpl_doublecomplex_t beta, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_zlassq(armpl_int_t n, armpl_doublecomplex_t *x, armpl_int_t incx, double *scale, double *sumsq);
armpl_int_t LAPACKE_zlassq_work(armpl_int_t n, armpl_doublecomplex_t *x, armpl_int_t incx, double *scale, double *sumsq);
armpl_int_t LAPACKE_zlaswp(armpl_int_t matrix_layout, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_zlaswp_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t k1, armpl_int_t k2, const armpl_int_t *ipiv, armpl_int_t incx);
armpl_int_t LAPACKE_zlauum(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_zlauum_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_zpbcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const armpl_doublecomplex_t *ab, armpl_int_t ldab, double anorm, double *rcond);
armpl_int_t LAPACKE_zpbcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const armpl_doublecomplex_t *ab, armpl_int_t ldab, double anorm, double *rcond, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zpbequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const armpl_doublecomplex_t *ab, armpl_int_t ldab, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zpbequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, const armpl_doublecomplex_t *ab, armpl_int_t ldab, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zpbrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_doublecomplex_t *ab, armpl_int_t ldab, const armpl_doublecomplex_t *afb, armpl_int_t ldafb, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zpbrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_doublecomplex_t *ab, armpl_int_t ldab, const armpl_doublecomplex_t *afb, armpl_int_t ldafb, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zpbstf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, armpl_doublecomplex_t *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_zpbstf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kb, armpl_doublecomplex_t *bb, armpl_int_t ldbb);
armpl_int_t LAPACKE_zpbsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpbsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpbsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *afb, armpl_int_t ldafb, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zpbsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *afb, armpl_int_t ldafb, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zpbtrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_zpbtrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_doublecomplex_t *ab, armpl_int_t ldab);
armpl_int_t LAPACKE_zpbtrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpbtrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpftrf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_doublecomplex_t *a);
armpl_int_t LAPACKE_zpftrf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_doublecomplex_t *a);
armpl_int_t LAPACKE_zpftri(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_doublecomplex_t *a);
armpl_int_t LAPACKE_zpftri_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_doublecomplex_t *a);
armpl_int_t LAPACKE_zpftrs(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpftrs_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpocon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double anorm, double *rcond);
armpl_int_t LAPACKE_zpocon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double anorm, double *rcond, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zpoequb(armpl_int_t matrix_layout, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zpoequb_work(armpl_int_t matrix_layout, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zpoequ(armpl_int_t matrix_layout, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zpoequ_work(armpl_int_t matrix_layout, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zporfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zporfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zporfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const double *s, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zporfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const double *s, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zposv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zposv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zposvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zposvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zposvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zposvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zpotrf2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_zpotrf2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_zpotrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_zpotrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_zpotri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_zpotri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_zpotrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpotrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zppcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *ap, double anorm, double *rcond);
armpl_int_t LAPACKE_zppcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *ap, double anorm, double *rcond, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zppequ(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *ap, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zppequ_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *ap, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zpprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *afp, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zpprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *afp, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zppsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zppsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zppsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *afp, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zppsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *ap, armpl_doublecomplex_t *afp, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zpptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap);
armpl_int_t LAPACKE_zpptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap);
armpl_int_t LAPACKE_zpptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap);
armpl_int_t LAPACKE_zpptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap);
armpl_int_t LAPACKE_zpptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpstrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, double tol);
armpl_int_t LAPACKE_zpstrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *piv, armpl_int_t *rank, double tol, double *work);
armpl_int_t LAPACKE_zptcon(armpl_int_t n, const double *d, const armpl_doublecomplex_t *e, double anorm, double *rcond);
armpl_int_t LAPACKE_zptcon_work(armpl_int_t n, const double *d, const armpl_doublecomplex_t *e, double anorm, double *rcond, double *work);
armpl_int_t LAPACKE_zpteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zpteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, armpl_doublecomplex_t *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_zptrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *d, const armpl_doublecomplex_t *e, const double *df, const armpl_doublecomplex_t *ef, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zptrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *d, const armpl_doublecomplex_t *e, const double *df, const armpl_doublecomplex_t *ef, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zptsv(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *d, armpl_doublecomplex_t *e, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zptsv_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t nrhs, double *d, armpl_doublecomplex_t *e, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zptsvx(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const double *d, const armpl_doublecomplex_t *e, double *df, armpl_doublecomplex_t *ef, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zptsvx_work(armpl_int_t matrix_layout, char fact, armpl_int_t n, armpl_int_t nrhs, const double *d, const armpl_doublecomplex_t *e, double *df, armpl_doublecomplex_t *ef, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zpttrf(armpl_int_t n, double *d, armpl_doublecomplex_t *e);
armpl_int_t LAPACKE_zpttrf_work(armpl_int_t n, double *d, armpl_doublecomplex_t *e);
armpl_int_t LAPACKE_zpttrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *d, const armpl_doublecomplex_t *e, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zpttrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const double *d, const armpl_doublecomplex_t *e, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zspcon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zspcon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, double anorm, double *rcond, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zsprfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *afp, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zsprfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *afp, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zspsv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zspsv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *ap, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zspsvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *afp, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zspsvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *afp, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zsptrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsptrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsptri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsptri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zsptrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsptrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zstedc(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zstedc_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zstegr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *isuppz);
armpl_int_t LAPACKE_zstegr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, double abstol, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *isuppz, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zstein(armpl_int_t matrix_layout, armpl_int_t n, const double *d, const double *e, armpl_int_t m, const double *w, const armpl_int_t *iblock, const armpl_int_t *isplit, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *ifailv);
armpl_int_t LAPACKE_zstein_work(armpl_int_t matrix_layout, armpl_int_t n, const double *d, const double *e, armpl_int_t m, const double *w, const armpl_int_t *iblock, const armpl_int_t *isplit, armpl_doublecomplex_t *z, armpl_int_t ldz, double *work, armpl_int_t *iwork, armpl_int_t *ifailv);
armpl_int_t LAPACKE_zstemr(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac);
armpl_int_t LAPACKE_zstemr_work(armpl_int_t matrix_layout, char jobz, char range, armpl_int_t n, double *d, double *e, double vl, double vu, armpl_int_t il, armpl_int_t iu, armpl_int_t *m, double *w, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t nzc, armpl_int_t *isuppz, armpl_int_t *tryrac, double *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_zsteqr(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, armpl_doublecomplex_t *z, armpl_int_t ldz);
armpl_int_t LAPACKE_zsteqr_work(armpl_int_t matrix_layout, char compz, armpl_int_t n, double *d, double *e, armpl_doublecomplex_t *z, armpl_int_t ldz, double *work);
armpl_int_t LAPACKE_zsycon_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zsycon_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, double anorm, double *rcond, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zsycon(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, double anorm, double *rcond);
armpl_int_t LAPACKE_zsyconv(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *e);
armpl_int_t LAPACKE_zsyconv_work(armpl_int_t matrix_layout, char uplo, char way, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *e);
armpl_int_t LAPACKE_zsycon_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, double anorm, double *rcond, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zsyequb(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *s, double *scond, double *amax);
armpl_int_t LAPACKE_zsyequb_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *s, double *scond, double *amax, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zsyrfs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_zsyrfs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zsyrfsx(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *s, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zsyrfsx_work(armpl_int_t matrix_layout, char uplo, char equed, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *af, armpl_int_t ldaf, const armpl_int_t *ipiv, const double *s, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zsyr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t alpha, const armpl_doublecomplex_t *x, armpl_int_t incx, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_zsyr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t alpha, const armpl_doublecomplex_t *x, armpl_int_t incx, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_zsysv_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsysv_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsysv_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsysv_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsysv(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsysv_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsysv_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsysv_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsysvx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr);
armpl_int_t LAPACKE_zsysvx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *ferr, double *berr, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork);
armpl_int_t LAPACKE_zsysvxx(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params);
armpl_int_t LAPACKE_zsysvxx_work(armpl_int_t matrix_layout, char fact, char uplo, armpl_int_t n, armpl_int_t nrhs, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *af, armpl_int_t ldaf, armpl_int_t *ipiv, char *equed, double *s, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *x, armpl_int_t ldx, double *rcond, double *rpvgrw, double *berr, armpl_int_t n_err_bnds, double *err_bnds_norm, double *err_bnds_comp, armpl_int_t nparams, double *params, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_zsyswapr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_zsyswapr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t i1, armpl_int_t i2);
armpl_int_t LAPACKE_zsytrf_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsytrf_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsytrf_rk(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsytrf_rk_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *e, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsytrf(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsytrf_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsytrf_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsytrf_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsytri2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsytri2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsytri2x(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_int_t nb);
armpl_int_t LAPACKE_zsytri2x_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t nb);
armpl_int_t LAPACKE_zsytri_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsytri_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsytri(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv);
armpl_int_t LAPACKE_zsytri_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zsytrs2(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs2_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zsytrs_3(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs_3_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *e, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs_aa(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs_aa_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zsytrs(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs_rook(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs_rook_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_zsytrs_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_int_t *ipiv, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztbcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const armpl_doublecomplex_t *ab, armpl_int_t ldab, double *rcond);
armpl_int_t LAPACKE_ztbcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, armpl_int_t kd, const armpl_doublecomplex_t *ab, armpl_int_t ldab, double *rcond, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_ztbrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_doublecomplex_t *ab, armpl_int_t ldab, const armpl_doublecomplex_t *b, armpl_int_t ldb, const armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_ztbrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_doublecomplex_t *ab, armpl_int_t ldab, const armpl_doublecomplex_t *b, armpl_int_t ldb, const armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_ztbtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztbtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t kd, armpl_int_t nrhs, const armpl_doublecomplex_t *ab, armpl_int_t ldab, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztfsm(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t alpha, const armpl_doublecomplex_t *a, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztfsm_work(armpl_int_t matrix_layout, char transr, char side, char uplo, char trans, char diag, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t alpha, const armpl_doublecomplex_t *a, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztftri(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, armpl_doublecomplex_t *a);
armpl_int_t LAPACKE_ztftri_work(armpl_int_t matrix_layout, char transr, char uplo, char diag, armpl_int_t n, armpl_doublecomplex_t *a);
armpl_int_t LAPACKE_ztfttp(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_doublecomplex_t *arf, armpl_doublecomplex_t *ap);
armpl_int_t LAPACKE_ztfttp_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_doublecomplex_t *arf, armpl_doublecomplex_t *ap);
armpl_int_t LAPACKE_ztfttr(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_doublecomplex_t *arf, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_ztfttr_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_doublecomplex_t *arf, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_ztgevc(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const armpl_doublecomplex_t *s, armpl_int_t lds, const armpl_doublecomplex_t *p, armpl_int_t ldp, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ztgevc_work(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, const armpl_doublecomplex_t *s, armpl_int_t lds, const armpl_doublecomplex_t *p, armpl_int_t ldp, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_ztgexc(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ztgexc_work(armpl_int_t matrix_layout, armpl_int_t wantq, armpl_int_t wantz, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ztgsen(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *m, double *pl, double *pr, double *dif);
armpl_int_t LAPACKE_ztgsen_work(armpl_int_t matrix_layout, armpl_int_t ijob, armpl_int_t wantq, armpl_int_t wantz, const armpl_int_t *select, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *alpha, armpl_doublecomplex_t *beta, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *z, armpl_int_t ldz, armpl_int_t *m, double *pl, double *pr, double *dif, armpl_doublecomplex_t *work, armpl_int_t lwork, armpl_int_t *iwork, armpl_int_t liwork);
armpl_int_t LAPACKE_ztgsja(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double tola, double tolb, double *alpha, double *beta, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *v, armpl_int_t ldv, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_int_t *ncycle);
armpl_int_t LAPACKE_ztgsja_work(armpl_int_t matrix_layout, char jobu, char jobv, char jobq, armpl_int_t m, armpl_int_t p, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, double tola, double tolb, double *alpha, double *beta, armpl_doublecomplex_t *u, armpl_int_t ldu, armpl_doublecomplex_t *v, armpl_int_t ldv, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *work, armpl_int_t *ncycle);
armpl_int_t LAPACKE_ztgsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *b, armpl_int_t ldb, const armpl_doublecomplex_t *vl, armpl_int_t ldvl, const armpl_doublecomplex_t *vr, armpl_int_t ldvr, double *s, double *dif, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ztgsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *b, armpl_int_t ldb, const armpl_doublecomplex_t *vl, armpl_int_t ldvl, const armpl_doublecomplex_t *vr, armpl_int_t ldvr, double *s, double *dif, armpl_int_t mm, armpl_int_t *m, armpl_doublecomplex_t *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_ztgsyl(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *c, armpl_int_t ldc, const armpl_doublecomplex_t *d, armpl_int_t ldd, const armpl_doublecomplex_t *e, armpl_int_t lde, armpl_doublecomplex_t *f, armpl_int_t ldf, double *scale, double *dif);
armpl_int_t LAPACKE_ztgsyl_work(armpl_int_t matrix_layout, char trans, armpl_int_t ijob, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *c, armpl_int_t ldc, const armpl_doublecomplex_t *d, armpl_int_t ldd, const armpl_doublecomplex_t *e, armpl_int_t lde, armpl_doublecomplex_t *f, armpl_int_t ldf, double *scale, double *dif, armpl_doublecomplex_t *work, armpl_int_t lwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_ztpcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const armpl_doublecomplex_t *ap, double *rcond);
armpl_int_t LAPACKE_ztpcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const armpl_doublecomplex_t *ap, double *rcond, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_ztpmqrt(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const armpl_doublecomplex_t *v, armpl_int_t ldv, const armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztpmqrt_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, armpl_int_t nb, const armpl_doublecomplex_t *v, armpl_int_t ldv, const armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_ztpqrt2(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_ztpqrt2_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_ztpqrt(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *t, armpl_int_t ldt);
armpl_int_t LAPACKE_ztpqrt_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t l, armpl_int_t nb, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_ztprfb(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const armpl_doublecomplex_t *v, armpl_int_t ldv, const armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztprfb_work(armpl_int_t matrix_layout, char side, char trans, char direct, char storev, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const armpl_doublecomplex_t *v, armpl_int_t ldv, const armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *work, armpl_int_t ldwork);
armpl_int_t LAPACKE_ztprfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *b, armpl_int_t ldb, const armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_ztprfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *b, armpl_int_t ldb, const armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_ztptri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_doublecomplex_t *ap);
armpl_int_t LAPACKE_ztptri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_doublecomplex_t *ap);
armpl_int_t LAPACKE_ztptrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztptrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztpttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *arf);
armpl_int_t LAPACKE_ztpttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *arf);
armpl_int_t LAPACKE_ztpttr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_ztpttr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *ap, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_ztrcon(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *rcond);
armpl_int_t LAPACKE_ztrcon_work(armpl_int_t matrix_layout, char norm, char uplo, char diag, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, double *rcond, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_ztrevc(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ztrevc_work(armpl_int_t matrix_layout, char side, char howmny, const armpl_int_t *select, armpl_int_t n, armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *vl, armpl_int_t ldvl, armpl_doublecomplex_t *vr, armpl_int_t ldvr, armpl_int_t mm, armpl_int_t *m, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_ztrexc(armpl_int_t matrix_layout, char compq, armpl_int_t n, armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ztrexc_work(armpl_int_t matrix_layout, char compq, armpl_int_t n, armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_int_t ifst, armpl_int_t ilst);
armpl_int_t LAPACKE_ztrrfs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *b, armpl_int_t ldb, const armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr);
armpl_int_t LAPACKE_ztrrfs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *b, armpl_int_t ldb, const armpl_doublecomplex_t *x, armpl_int_t ldx, double *ferr, double *berr, armpl_doublecomplex_t *work, double *rwork);
armpl_int_t LAPACKE_ztrsen(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *w, armpl_int_t *m, double *s, double *sep);
armpl_int_t LAPACKE_ztrsen_work(armpl_int_t matrix_layout, char job, char compq, const armpl_int_t *select, armpl_int_t n, armpl_doublecomplex_t *t, armpl_int_t ldt, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *w, armpl_int_t *m, double *s, double *sep, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_ztrsna(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const armpl_doublecomplex_t *t, armpl_int_t ldt, const armpl_doublecomplex_t *vl, armpl_int_t ldvl, const armpl_doublecomplex_t *vr, armpl_int_t ldvr, double *s, double *sep, armpl_int_t mm, armpl_int_t *m);
armpl_int_t LAPACKE_ztrsna_work(armpl_int_t matrix_layout, char job, char howmny, const armpl_int_t *select, armpl_int_t n, const armpl_doublecomplex_t *t, armpl_int_t ldt, const armpl_doublecomplex_t *vl, armpl_int_t ldvl, const armpl_doublecomplex_t *vr, armpl_int_t ldvr, double *s, double *sep, armpl_int_t mm, armpl_int_t *m, armpl_doublecomplex_t *work, armpl_int_t ldwork, double *rwork);
armpl_int_t LAPACKE_ztrsyl(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *c, armpl_int_t ldc, double *scale);
armpl_int_t LAPACKE_ztrsyl_work(armpl_int_t matrix_layout, char trana, char tranb, armpl_int_t isgn, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *b, armpl_int_t ldb, armpl_doublecomplex_t *c, armpl_int_t ldc, double *scale);
armpl_int_t LAPACKE_ztrtri(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_ztrtri_work(armpl_int_t matrix_layout, char uplo, char diag, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda);
armpl_int_t LAPACKE_ztrtrs(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztrtrs_work(armpl_int_t matrix_layout, char uplo, char trans, char diag, armpl_int_t n, armpl_int_t nrhs, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *b, armpl_int_t ldb);
armpl_int_t LAPACKE_ztrttf(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *arf);
armpl_int_t LAPACKE_ztrttf_work(armpl_int_t matrix_layout, char transr, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *arf);
armpl_int_t LAPACKE_ztrttp(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *ap);
armpl_int_t LAPACKE_ztrttp_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *ap);
armpl_int_t LAPACKE_ztzrzf(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_ztzrzf_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunbdb(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, armpl_doublecomplex_t *x11, armpl_int_t ldx11, armpl_doublecomplex_t *x12, armpl_int_t ldx12, armpl_doublecomplex_t *x21, armpl_int_t ldx21, armpl_doublecomplex_t *x22, armpl_int_t ldx22, double *theta, double *phi, armpl_doublecomplex_t *taup1, armpl_doublecomplex_t *taup2, armpl_doublecomplex_t *tauq1, armpl_doublecomplex_t *tauq2);
armpl_int_t LAPACKE_zunbdb_work(armpl_int_t matrix_layout, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, armpl_doublecomplex_t *x11, armpl_int_t ldx11, armpl_doublecomplex_t *x12, armpl_int_t ldx12, armpl_doublecomplex_t *x21, armpl_int_t ldx21, armpl_doublecomplex_t *x22, armpl_int_t ldx22, double *theta, double *phi, armpl_doublecomplex_t *taup1, armpl_doublecomplex_t *taup2, armpl_doublecomplex_t *tauq1, armpl_doublecomplex_t *tauq2, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zuncsd2by1(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, armpl_doublecomplex_t *x11, armpl_int_t ldx11, armpl_doublecomplex_t *x21, armpl_int_t ldx21, double *theta, armpl_doublecomplex_t *u1, armpl_int_t ldu1, armpl_doublecomplex_t *u2, armpl_int_t ldu2, armpl_doublecomplex_t *v1t, armpl_int_t ldv1t);
armpl_int_t LAPACKE_zuncsd2by1_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, armpl_int_t m, armpl_int_t p, armpl_int_t q, armpl_doublecomplex_t *x11, armpl_int_t ldx11, armpl_doublecomplex_t *x21, armpl_int_t ldx21, double *theta, armpl_doublecomplex_t *u1, armpl_int_t ldu1, armpl_doublecomplex_t *u2, armpl_int_t ldu2, armpl_doublecomplex_t *v1t, armpl_int_t ldv1t, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_zuncsd(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, armpl_doublecomplex_t *x11, armpl_int_t ldx11, armpl_doublecomplex_t *x12, armpl_int_t ldx12, armpl_doublecomplex_t *x21, armpl_int_t ldx21, armpl_doublecomplex_t *x22, armpl_int_t ldx22, double *theta, armpl_doublecomplex_t *u1, armpl_int_t ldu1, armpl_doublecomplex_t *u2, armpl_int_t ldu2, armpl_doublecomplex_t *v1t, armpl_int_t ldv1t, armpl_doublecomplex_t *v2t, armpl_int_t ldv2t);
armpl_int_t LAPACKE_zuncsd_work(armpl_int_t matrix_layout, char jobu1, char jobu2, char jobv1t, char jobv2t, char trans, char signs, armpl_int_t m, armpl_int_t p, armpl_int_t q, armpl_doublecomplex_t *x11, armpl_int_t ldx11, armpl_doublecomplex_t *x12, armpl_int_t ldx12, armpl_doublecomplex_t *x21, armpl_int_t ldx21, armpl_doublecomplex_t *x22, armpl_int_t ldx22, double *theta, armpl_doublecomplex_t *u1, armpl_int_t ldu1, armpl_doublecomplex_t *u2, armpl_int_t ldu2, armpl_doublecomplex_t *v1t, armpl_int_t ldv1t, armpl_doublecomplex_t *v2t, armpl_int_t ldv2t, armpl_doublecomplex_t *work, armpl_int_t lwork, double *rwork, armpl_int_t lrwork, armpl_int_t *iwork);
armpl_int_t LAPACKE_zungbr(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zungbr_work(armpl_int_t matrix_layout, char vect, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunghr(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zunghr_work(armpl_int_t matrix_layout, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunglq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zunglq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zungql(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zungql_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zungqr(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zungqr_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zungrq(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zungrq_work(armpl_int_t matrix_layout, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zungtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau);
armpl_int_t LAPACKE_zungtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmbr(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmbr_work(armpl_int_t matrix_layout, char vect, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmhr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmhr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t ilo, armpl_int_t ihi, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmlq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmlq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmql(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmql_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmqr(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmqr_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmrq(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmrq_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmrz(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmrz_work(armpl_int_t matrix_layout, char side, char trans, armpl_int_t m, armpl_int_t n, armpl_int_t k, armpl_int_t l, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zunmtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zunmtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *a, armpl_int_t lda, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work, armpl_int_t lwork);
armpl_int_t LAPACKE_zupgtr(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *q, armpl_int_t ldq);
armpl_int_t LAPACKE_zupgtr_work(armpl_int_t matrix_layout, char uplo, armpl_int_t n, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *q, armpl_int_t ldq, armpl_doublecomplex_t *work);
armpl_int_t LAPACKE_zupmtr(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc);
armpl_int_t LAPACKE_zupmtr_work(armpl_int_t matrix_layout, char side, char uplo, char trans, armpl_int_t m, armpl_int_t n, const armpl_doublecomplex_t *ap, const armpl_doublecomplex_t *tau, armpl_doublecomplex_t *c, armpl_int_t ldc, armpl_doublecomplex_t *work);

/* FFT Fortran interfaces */
void cfft1d_(armpl_int_t *mode, armpl_int_t *n, armpl_singlecomplex_t *x, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft1dx_(armpl_int_t *mode, float *scale, armpl_int_t *inpl, armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx, armpl_singlecomplex_t *y, armpl_int_t *incy, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft1m_(armpl_int_t *mode, armpl_int_t *nseq, armpl_int_t *n, armpl_singlecomplex_t *x, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft1mx_(armpl_int_t *mode, float *scale, armpl_int_t *inpl, armpl_int_t *nseq, armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx1, armpl_int_t *incx2, armpl_singlecomplex_t *y, armpl_int_t *incy1, armpl_int_t *incy2, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft2d_(armpl_int_t *mode, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *x, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft2dx_(armpl_int_t *mode, float *scale, armpl_int_t *ltrans, armpl_int_t *inpl, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx1, armpl_int_t *incx2, armpl_singlecomplex_t *y, armpl_int_t *incy1, armpl_int_t *incy2, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft3d_(armpl_int_t *mode, armpl_int_t *l, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *x, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft3dx_(armpl_int_t *mode, float *scale, armpl_int_t *ltrans, armpl_int_t *inpl, armpl_int_t *l, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *x, armpl_singlecomplex_t *y, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft3dy_(armpl_int_t *mode, float *scale, armpl_int_t *inpl, armpl_int_t *l, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *x, armpl_int_t *incx1, armpl_int_t *incx2, armpl_int_t *incx3, armpl_singlecomplex_t *y, armpl_int_t *incy1, armpl_int_t *incy2, armpl_int_t *incy3, armpl_singlecomplex_t *comm, armpl_int_t *lcomm, armpl_int_t *info);
void csfft1d_(armpl_int_t *mode, armpl_int_t *n, armpl_singlecomplex_t *x, float *y, float *comm, armpl_int_t *info);
void csfft1m_(armpl_int_t *mode, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *x, float *y, float *comm, armpl_int_t *info);
void csfft2d_(armpl_int_t *mode, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *x, float *y, float *comm, armpl_int_t *info);
void csfft3d_(armpl_int_t *mode, armpl_int_t *l, armpl_int_t *m, armpl_int_t *n, armpl_singlecomplex_t *x, float *y, float *comm, armpl_int_t *info);
void csfft_(armpl_int_t *mode, armpl_int_t *n, float *x, float *comm, armpl_int_t *info);
void csfftm_(armpl_int_t *nseq, armpl_int_t *n, float *x, float *comm, armpl_int_t *info);
void dzfft1d_(armpl_int_t *mode, armpl_int_t *n, double *x, armpl_doublecomplex_t *y, double *comm, armpl_int_t *info);
void dzfft1m_(armpl_int_t *mode, armpl_int_t *m, armpl_int_t *n, double *x, armpl_doublecomplex_t *y, double *comm, armpl_int_t *info);
void dzfft2d_(armpl_int_t *mode, armpl_int_t *m, armpl_int_t *n, double *x, armpl_doublecomplex_t *y, double *comm, armpl_int_t *info);
void dzfft3d_(armpl_int_t *mode, armpl_int_t *l, armpl_int_t *m, armpl_int_t *n, double *x, armpl_doublecomplex_t *y, double *comm, armpl_int_t *info);
void dzfft_(armpl_int_t *mode, armpl_int_t *n, double *x, double *comm, armpl_int_t *info);
void dzfftm_(armpl_int_t *nseq, armpl_int_t *n, double *x, double *comm, armpl_int_t *info);
void scfft1d_(armpl_int_t *mode, armpl_int_t *n, float *x, armpl_singlecomplex_t *y, float *comm, armpl_int_t *info);
void scfft1m_(armpl_int_t *mode, armpl_int_t *m, armpl_int_t *n, float *x, armpl_singlecomplex_t *y, float *comm, armpl_int_t *info);
void scfft2d_(armpl_int_t *mode, armpl_int_t *m, armpl_int_t *n, float *x, armpl_singlecomplex_t *y, float *comm, armpl_int_t *info);
void scfft3d_(armpl_int_t *mode, armpl_int_t *l, armpl_int_t *m, armpl_int_t *n, float *x, armpl_singlecomplex_t *y, float *comm, armpl_int_t *info);
void scfft_(armpl_int_t *mode, armpl_int_t *n, float *x, float *comm, armpl_int_t *info);
void scfftm_(armpl_int_t *nseq, armpl_int_t *n, float *x, float *comm, armpl_int_t *info);
void zdfft1d_(armpl_int_t *mode, armpl_int_t *n, armpl_doublecomplex_t *x, double *y, double *comm, armpl_int_t *info);
void zdfft1m_(armpl_int_t *mode, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *x, double *y, double *comm, armpl_int_t *info);
void zdfft2d_(armpl_int_t *mode, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *x, double *y, double *comm, armpl_int_t *info);
void zdfft3d_(armpl_int_t *mode, armpl_int_t *l, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *x, double *y, double *comm, armpl_int_t *info);
void zdfft_(armpl_int_t *mode, armpl_int_t *n, double *x, double *comm, armpl_int_t *info);
void zdfftm_(armpl_int_t *nseq, armpl_int_t *n, double *x, double *comm, armpl_int_t *info);
void zfft1d_(armpl_int_t *mode, armpl_int_t *n, armpl_doublecomplex_t *x, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft1dx_(armpl_int_t *mode, double *scale, armpl_int_t *inpl, armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx, armpl_doublecomplex_t *y, armpl_int_t *incy, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft1m_(armpl_int_t *mode, armpl_int_t *nseq, armpl_int_t *n, armpl_doublecomplex_t *x, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft1mx_(armpl_int_t *mode, double *scale, armpl_int_t *inpl, armpl_int_t *nseq, armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx1, armpl_int_t *incx2, armpl_doublecomplex_t *y, armpl_int_t *incy1, armpl_int_t *incy2, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft2d_(armpl_int_t *mode, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *x, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft2dx_(armpl_int_t *mode, double *scale, armpl_int_t *ltrans, armpl_int_t *inpl, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx1, armpl_int_t *incx2, armpl_doublecomplex_t *y, armpl_int_t *incy1, armpl_int_t *incy2, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft3d_(armpl_int_t *mode, armpl_int_t *l, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *x, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft3dx_(armpl_int_t *mode, double *scale, armpl_int_t *ltrans, armpl_int_t *inpl, armpl_int_t *l, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *x, armpl_doublecomplex_t *y, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft3dy_(armpl_int_t *mode, double *scale, armpl_int_t *inpl, armpl_int_t *l, armpl_int_t *m, armpl_int_t *n, armpl_doublecomplex_t *x, armpl_int_t *incx1, armpl_int_t *incx2, armpl_int_t *incx3, armpl_doublecomplex_t *y, armpl_int_t *incy1, armpl_int_t *incy2, armpl_int_t *incy3, armpl_doublecomplex_t *comm, armpl_int_t *lcomm, armpl_int_t *info);

/* FFT C interfaces */
void cfft1d(armpl_int_t mode, armpl_int_t n, armpl_singlecomplex_t *x, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft1dx(armpl_int_t mode, float scale, armpl_int_t inpl, armpl_int_t n, armpl_singlecomplex_t *x, armpl_int_t incx, armpl_singlecomplex_t *y, armpl_int_t incy, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft1m(armpl_int_t mode, armpl_int_t nseq, armpl_int_t n, armpl_singlecomplex_t *x, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft1mx(armpl_int_t mode, float scale, armpl_int_t inpl, armpl_int_t nseq, armpl_int_t n, armpl_singlecomplex_t *x, armpl_int_t incx1, armpl_int_t incx2, armpl_singlecomplex_t *y, armpl_int_t incy1, armpl_int_t incy2, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft2d(armpl_int_t mode, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *x, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft2dx(armpl_int_t mode, float scale, armpl_int_t ltrans, armpl_int_t inpl, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *x, armpl_int_t incx1, armpl_int_t incx2, armpl_singlecomplex_t *y, armpl_int_t incy1, armpl_int_t incy2, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft3d(armpl_int_t mode, armpl_int_t l, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *x, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft3dx(armpl_int_t mode, float scale, armpl_int_t ltrans, armpl_int_t inpl, armpl_int_t l, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *x, armpl_singlecomplex_t *y, armpl_singlecomplex_t *comm, armpl_int_t *info);
void cfft3dy(armpl_int_t mode, float scale, armpl_int_t inpl, armpl_int_t l, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *x, armpl_int_t incx1, armpl_int_t incx2, armpl_int_t incx3, armpl_singlecomplex_t *y, armpl_int_t incy1, armpl_int_t incy2, armpl_int_t incy3, armpl_singlecomplex_t *comm, armpl_int_t lcomm, armpl_int_t *info);
void csfft(armpl_int_t mode, armpl_int_t n, float *x, float *comm, armpl_int_t *info);
void csfft1d(armpl_int_t mode, armpl_int_t n, armpl_singlecomplex_t *x, float *y, float *comm, armpl_int_t *info);
void csfft1m(armpl_int_t mode, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *x, float *y, float *comm, armpl_int_t *info);
void csfft2d(armpl_int_t mode, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *x, float *y, float *comm, armpl_int_t *info);
void csfft3d(armpl_int_t mode, armpl_int_t l, armpl_int_t m, armpl_int_t n, armpl_singlecomplex_t *x, float *y, float *comm, armpl_int_t *info);
void csfftm(armpl_int_t nseq, armpl_int_t n, float *x, float *comm, armpl_int_t *info);
void dzfft(armpl_int_t mode, armpl_int_t n, double *x, double *comm, armpl_int_t *info);
void dzfft1d(armpl_int_t mode, armpl_int_t n, double *x, armpl_doublecomplex_t *y, double *comm, armpl_int_t *info);
void dzfft1m(armpl_int_t mode, armpl_int_t m, armpl_int_t n, double *x, armpl_doublecomplex_t *y, double *comm, armpl_int_t *info);
void dzfft2d(armpl_int_t mode, armpl_int_t m, armpl_int_t n, double *x, armpl_doublecomplex_t *y, double *comm, armpl_int_t *info);
void dzfft3d(armpl_int_t mode, armpl_int_t l, armpl_int_t m, armpl_int_t n, double *x, armpl_doublecomplex_t *y, double *comm, armpl_int_t *info);
void dzfftm(armpl_int_t nseq, armpl_int_t n, double *x, double *comm, armpl_int_t *info);
void scfft(armpl_int_t mode, armpl_int_t n, float *x, float *comm, armpl_int_t *info);
void scfft1d(armpl_int_t mode, armpl_int_t n, float *x, armpl_singlecomplex_t *y, float *comm, armpl_int_t *info);
void scfft1m(armpl_int_t mode, armpl_int_t m, armpl_int_t n, float *x, armpl_singlecomplex_t *y, float *comm, armpl_int_t *info);
void scfft2d(armpl_int_t mode, armpl_int_t m, armpl_int_t n, float *x, armpl_singlecomplex_t *y, float *comm, armpl_int_t *info);
void scfft3d(armpl_int_t mode, armpl_int_t l, armpl_int_t m, armpl_int_t n, float *x, armpl_singlecomplex_t *y, float *comm, armpl_int_t *info);
void scfftm(armpl_int_t nseq, armpl_int_t n, float *x, float *comm, armpl_int_t *info);
void zdfft(armpl_int_t mode, armpl_int_t n, double *x, double *comm, armpl_int_t *info);
void zdfft1d(armpl_int_t mode, armpl_int_t n, armpl_doublecomplex_t *x, double *y, double *comm, armpl_int_t *info);
void zdfft1m(armpl_int_t mode, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *x, double *y, double *comm, armpl_int_t *info);
void zdfft2d(armpl_int_t mode, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *x, double *y, double *comm, armpl_int_t *info);
void zdfft3d(armpl_int_t mode, armpl_int_t l, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *x, double *y, double *comm, armpl_int_t *info);
void zdfftm(armpl_int_t nseq, armpl_int_t n, double *x, double *comm, armpl_int_t *info);
void zfft1d(armpl_int_t mode, armpl_int_t n, armpl_doublecomplex_t *x, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft1dx(armpl_int_t mode, double scale, armpl_int_t inpl, armpl_int_t n, armpl_doublecomplex_t *x, armpl_int_t incx, armpl_doublecomplex_t *y, armpl_int_t incy, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft1m(armpl_int_t mode, armpl_int_t nseq, armpl_int_t n, armpl_doublecomplex_t *x, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft1mx(armpl_int_t mode, double scale, armpl_int_t inpl, armpl_int_t nseq, armpl_int_t n, armpl_doublecomplex_t *x, armpl_int_t incx1, armpl_int_t incx2, armpl_doublecomplex_t *y, armpl_int_t incy1, armpl_int_t incy2, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft2d(armpl_int_t mode, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *x, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft2dx(armpl_int_t mode, double scale, armpl_int_t ltrans, armpl_int_t inpl, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *x, armpl_int_t incx1, armpl_int_t incx2, armpl_doublecomplex_t *y, armpl_int_t incy1, armpl_int_t incy2, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft3d(armpl_int_t mode, armpl_int_t l, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *x, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft3dx(armpl_int_t mode, double scale, armpl_int_t ltrans, armpl_int_t inpl, armpl_int_t l, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *x, armpl_doublecomplex_t *y, armpl_doublecomplex_t *comm, armpl_int_t *info);
void zfft3dy(armpl_int_t mode, double scale, armpl_int_t inpl, armpl_int_t l, armpl_int_t m, armpl_int_t n, armpl_doublecomplex_t *x, armpl_int_t incx1, armpl_int_t incx2, armpl_int_t incx3, armpl_doublecomplex_t *y, armpl_int_t incy1, armpl_int_t incy2, armpl_int_t incy3, armpl_doublecomplex_t *comm, armpl_int_t lcomm, armpl_int_t *info);

#include <xblas.h>

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif  /* !defined(_ARMPL_H) */
